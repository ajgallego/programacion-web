{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Contenidos \u00b6 El objetivo de este libro es realizar una introducci\u00f3n a los conceptos m\u00e1s b\u00e1sicos de la programaci\u00f3n web, como son HTML y CSS, hasta otros m\u00e1s avanzados y novedosos de HTML 5, CSS 3 o JavaScript. En las primeras secciones se realiza una introducci\u00f3n a los conceptos fundamentales, desde la sintaxis del lenguaje, etiquetas, editores de HTML, estructura b\u00e1sica de una p\u00e1gina web, etc. Se incluyen peque\u00f1os ejemplos para cada uno de los apartados adem\u00e1s de alg\u00fan ejemplo m\u00e1s elaborado y ejercicios finales. Tambi\u00e9n se tratan aspectos m\u00e1s avanzados como eventos HTML, procesamiento de formularios, pseudo-clases CSS, disposici\u00f3n o estructuraci\u00f3n de una web en capas, y se realiza una introducci\u00f3n a los \u00faltimos elementos del lenguaje introducidos con HTML 5 y CSS: transiciones, transformaciones, audio, v\u00eddeo, geolocalizaci\u00f3n, etc. Por \u00faltimo se incluye una secci\u00f3n de introducci\u00f3n a JavaScript en la que tambi\u00e9n se parte desde los conceptos m\u00e1s b\u00e1sicos (inclusi\u00f3n de scripts en HTML, variables, operadores, etc.) hasta algunos m\u00e1s avanzados como funciones, eventos o como trabajar con el DOM de una p\u00e1gina Web. Los contenidos principales de este libro son: Introducci\u00f3n a HTML Editores HTML Sintaxis del lenguaje Estructura b\u00e1sica de una Web Elementos de cabecera Etiquetas b\u00e1sicas Listas Tablas Cajas, etiqueta DIV Enlaces Im\u00e1genes Formularios Eventos S\u00edmbolos HTML Introducci\u00f3n a CSS Adjuntar una hoja de estilo Definici\u00f3n de estilos para etiquetas HTML Identificadores y clases Estilos CSS b\u00e1sicos Pseudo-clases Capas Ejemplo Introducci\u00f3n a HTML 5 Navegadores que lo soportan Doctype Estructura sem\u00e1ntica Formularios Etiqueta Mark Canvas Audio V\u00eddeo Geolocalizaci\u00f3n Almacenamiento Offline Detectar funcionalidades de HTML 5 Introducci\u00f3n a CSS 3 Nuevos selectores de atributos Nuevas pseudo-clases Color Bordes Fondos Texto Columnas Modelo de caja b\u00e1sico Transiciones Transformaciones Introducci\u00f3n a JavaScript Inclusi\u00f3n de JavaScript en HTML Etiqueta noscript Consideraciones sobre el lenguaje Variables Operadores Estructuras de control de flujo Funciones \u00fatiles Funciones DOM Eventos Detecci\u00f3n de errores M\u00e1s informaci\u00f3n Ejercicios","title":"Contenidos"},{"location":"index.html#contenidos","text":"El objetivo de este libro es realizar una introducci\u00f3n a los conceptos m\u00e1s b\u00e1sicos de la programaci\u00f3n web, como son HTML y CSS, hasta otros m\u00e1s avanzados y novedosos de HTML 5, CSS 3 o JavaScript. En las primeras secciones se realiza una introducci\u00f3n a los conceptos fundamentales, desde la sintaxis del lenguaje, etiquetas, editores de HTML, estructura b\u00e1sica de una p\u00e1gina web, etc. Se incluyen peque\u00f1os ejemplos para cada uno de los apartados adem\u00e1s de alg\u00fan ejemplo m\u00e1s elaborado y ejercicios finales. Tambi\u00e9n se tratan aspectos m\u00e1s avanzados como eventos HTML, procesamiento de formularios, pseudo-clases CSS, disposici\u00f3n o estructuraci\u00f3n de una web en capas, y se realiza una introducci\u00f3n a los \u00faltimos elementos del lenguaje introducidos con HTML 5 y CSS: transiciones, transformaciones, audio, v\u00eddeo, geolocalizaci\u00f3n, etc. Por \u00faltimo se incluye una secci\u00f3n de introducci\u00f3n a JavaScript en la que tambi\u00e9n se parte desde los conceptos m\u00e1s b\u00e1sicos (inclusi\u00f3n de scripts en HTML, variables, operadores, etc.) hasta algunos m\u00e1s avanzados como funciones, eventos o como trabajar con el DOM de una p\u00e1gina Web. Los contenidos principales de este libro son: Introducci\u00f3n a HTML Editores HTML Sintaxis del lenguaje Estructura b\u00e1sica de una Web Elementos de cabecera Etiquetas b\u00e1sicas Listas Tablas Cajas, etiqueta DIV Enlaces Im\u00e1genes Formularios Eventos S\u00edmbolos HTML Introducci\u00f3n a CSS Adjuntar una hoja de estilo Definici\u00f3n de estilos para etiquetas HTML Identificadores y clases Estilos CSS b\u00e1sicos Pseudo-clases Capas Ejemplo Introducci\u00f3n a HTML 5 Navegadores que lo soportan Doctype Estructura sem\u00e1ntica Formularios Etiqueta Mark Canvas Audio V\u00eddeo Geolocalizaci\u00f3n Almacenamiento Offline Detectar funcionalidades de HTML 5 Introducci\u00f3n a CSS 3 Nuevos selectores de atributos Nuevas pseudo-clases Color Bordes Fondos Texto Columnas Modelo de caja b\u00e1sico Transiciones Transformaciones Introducci\u00f3n a JavaScript Inclusi\u00f3n de JavaScript en HTML Etiqueta noscript Consideraciones sobre el lenguaje Variables Operadores Estructuras de control de flujo Funciones \u00fatiles Funciones DOM Eventos Detecci\u00f3n de errores M\u00e1s informaci\u00f3n Ejercicios","title":"Contenidos"},{"location":"capitulo_css.html","text":"Introducci\u00f3n a CSS \u00b6 El nombre hojas de estilo en cascada viene del ingl\u00e9s Cascading Style Sheets , del que toma sus siglas. CSS es un lenguaje usado para definir la presentaci\u00f3n o la apariencia de un documento estructurado escrito en HTML o XML (y por extensi\u00f3n en XHTML). CSS se cre\u00f3 para separar el contenido de la forma, a la vez que permite a los dise\u00f1adores mantener un control mucho m\u00e1s preciso sobre la apariencia de las p\u00e1ginas. El W3C ( World Wide Web Consortium ) es el encargado de formular la especificaci\u00f3n de las hojas de estilo que sirven de est\u00e1ndar para los navegadores. En versiones antiguas de HTML se deb\u00eda de a\u00f1adir el formato dentro de las propias etiquetas, para indicar por ejemplo su color o tama\u00f1o. Esto obligaba a tener que especificar el mismo formato en todas las etiquetas para tener un dise\u00f1o consistente, adem\u00e1s, al cambiar un formato tambi\u00e9n hab\u00eda que cambiarlo para todas las etiquetas. Cuando se utiliza CSS, las etiquetas HTML no deber\u00edan proporcionar informaci\u00f3n sobre c\u00f3mo ser\u00e1n visualizadas. La informaci\u00f3n de la hoja de estilo ser\u00e1 la que especifique c\u00f3mo se han de mostrar: color, fuente, alineaci\u00f3n del texto, tama\u00f1o, etc. Las ventajas de utilizar CSS (u otro lenguaje de estilo) son: Control centralizado de la apariencia de un sitio web completo, con lo que se agiliza de forma considerable la actualizaci\u00f3n del mismo. Los navegadores permiten a los usuarios especificar su propia hoja de estilo local, que ser\u00e1 aplicada a un sitio web, con lo que aumenta considerablemente la accesibilidad. Por ejemplo, personas con deficiencias visuales pueden configurar su propia hoja de estilo para aumentar el tama\u00f1o del texto o remarcar m\u00e1s los enlaces. Una p\u00e1gina puede disponer de diferentes hojas de estilo seg\u00fan el dispositivo que la muestre o, incluso, a elecci\u00f3n del usuario. Por ejemplo, para ser impresa o mostrada en un dispositivo m\u00f3vil. El documento HTML en si mismo es m\u00e1s claro de entender y se consigue reducir considerablemente su tama\u00f1o.","title":"Introducci\u00f3n"},{"location":"capitulo_css.html#introduccion-a-css","text":"El nombre hojas de estilo en cascada viene del ingl\u00e9s Cascading Style Sheets , del que toma sus siglas. CSS es un lenguaje usado para definir la presentaci\u00f3n o la apariencia de un documento estructurado escrito en HTML o XML (y por extensi\u00f3n en XHTML). CSS se cre\u00f3 para separar el contenido de la forma, a la vez que permite a los dise\u00f1adores mantener un control mucho m\u00e1s preciso sobre la apariencia de las p\u00e1ginas. El W3C ( World Wide Web Consortium ) es el encargado de formular la especificaci\u00f3n de las hojas de estilo que sirven de est\u00e1ndar para los navegadores. En versiones antiguas de HTML se deb\u00eda de a\u00f1adir el formato dentro de las propias etiquetas, para indicar por ejemplo su color o tama\u00f1o. Esto obligaba a tener que especificar el mismo formato en todas las etiquetas para tener un dise\u00f1o consistente, adem\u00e1s, al cambiar un formato tambi\u00e9n hab\u00eda que cambiarlo para todas las etiquetas. Cuando se utiliza CSS, las etiquetas HTML no deber\u00edan proporcionar informaci\u00f3n sobre c\u00f3mo ser\u00e1n visualizadas. La informaci\u00f3n de la hoja de estilo ser\u00e1 la que especifique c\u00f3mo se han de mostrar: color, fuente, alineaci\u00f3n del texto, tama\u00f1o, etc. Las ventajas de utilizar CSS (u otro lenguaje de estilo) son: Control centralizado de la apariencia de un sitio web completo, con lo que se agiliza de forma considerable la actualizaci\u00f3n del mismo. Los navegadores permiten a los usuarios especificar su propia hoja de estilo local, que ser\u00e1 aplicada a un sitio web, con lo que aumenta considerablemente la accesibilidad. Por ejemplo, personas con deficiencias visuales pueden configurar su propia hoja de estilo para aumentar el tama\u00f1o del texto o remarcar m\u00e1s los enlaces. Una p\u00e1gina puede disponer de diferentes hojas de estilo seg\u00fan el dispositivo que la muestre o, incluso, a elecci\u00f3n del usuario. Por ejemplo, para ser impresa o mostrada en un dispositivo m\u00f3vil. El documento HTML en si mismo es m\u00e1s claro de entender y se consigue reducir considerablemente su tama\u00f1o.","title":"Introducci\u00f3n a CSS"},{"location":"capitulo_css3.html","text":"Introducci\u00f3n a CSS3 \u00b6 La especificaci\u00f3n de CSS3 viene con interesantes novedades que permitir\u00e1n hacer webs m\u00e1s elaboradas y m\u00e1s din\u00e1micas, con mayor separaci\u00f3n entre estilos y contenidos. Dar\u00e1 soporte a muchas necesidades de las webs actuales, sin tener que recurrir a trucos de dise\u00f1adores o lenguajes de programaci\u00f3n. Aunque CSS3 est\u00e1 todav\u00eda en fase de desarrollo, la mayor\u00eda de navegadores ya dan soporte a casi todos los nuevos estilos, como Firefox, Chrome o Safari. Por el contrario Internet Explorer no ha empezado a incorporar estos nuevos elementos hasta la versi\u00f3n 9. Las principales propiedades nuevas en CSS3 son: Selectores de atributos y propiedades Nuevas pseudo-clases Formatos de color: colores HSL, colores HSLA, colores RGBA, Opacidad Bordes: border-color, border-image, border-radius, box-shadow Fondos: background-origin, background-clip, background-size, capas con m\u00faltiples im\u00e1genes de fondo Texto: text-shadow, text-overflow, rotura de palabras largas, Web Fonts, creaci\u00f3n de m\u00faltiples columnas de texto Modelo de caja b\u00e1sico: overflow Transiciones y transformaciones A continuaci\u00f3n veremos con m\u00e1s detalle cada una de estas nuevas propiedades.","title":"Introducci\u00f3n"},{"location":"capitulo_css3.html#introduccion-a-css3","text":"La especificaci\u00f3n de CSS3 viene con interesantes novedades que permitir\u00e1n hacer webs m\u00e1s elaboradas y m\u00e1s din\u00e1micas, con mayor separaci\u00f3n entre estilos y contenidos. Dar\u00e1 soporte a muchas necesidades de las webs actuales, sin tener que recurrir a trucos de dise\u00f1adores o lenguajes de programaci\u00f3n. Aunque CSS3 est\u00e1 todav\u00eda en fase de desarrollo, la mayor\u00eda de navegadores ya dan soporte a casi todos los nuevos estilos, como Firefox, Chrome o Safari. Por el contrario Internet Explorer no ha empezado a incorporar estos nuevos elementos hasta la versi\u00f3n 9. Las principales propiedades nuevas en CSS3 son: Selectores de atributos y propiedades Nuevas pseudo-clases Formatos de color: colores HSL, colores HSLA, colores RGBA, Opacidad Bordes: border-color, border-image, border-radius, box-shadow Fondos: background-origin, background-clip, background-size, capas con m\u00faltiples im\u00e1genes de fondo Texto: text-shadow, text-overflow, rotura de palabras largas, Web Fonts, creaci\u00f3n de m\u00faltiples columnas de texto Modelo de caja b\u00e1sico: overflow Transiciones y transformaciones A continuaci\u00f3n veremos con m\u00e1s detalle cada una de estas nuevas propiedades.","title":"Introducci\u00f3n a CSS3"},{"location":"capitulo_css3_bordes.html","text":"Bordes \u00b6 En CSS3 se han incorporado cuatro nuevas propiedades para dar formato a los bordes de una caja. Estas propiedades no est\u00e1n todav\u00eda plenamente soportadas en todos los navegadores, por lo que para que funcione en la mayor\u00eda de ellos tendremos que usar tambi\u00e9n las propiedades nativas del navegador (simplemente a\u00f1adiremos los prefijos -webkit- y -moz-). Las nuevas propiedades son: border-radius : permite crear cajas con esquinas redondeadas. Hasta ahora esto solo se pod\u00eda hacer insertando im\u00e1genes que simularan esta caracter\u00edstica. Ahora lo podemos hacer de una forma mucho m\u00e1s sencilla: 1 2 3 -webkit-border-radius : 30px ; -moz-border-radius : 30px ; border-radius : 30px ; Adem\u00e1s tambi\u00e9n podemos indicar cada uno de los bordes por separado: 1 2 3 4 5 6 -moz-border-radius-topleft : 10px ; -moz-border-radius-topright : 20px ; -moz-border-radius-bottomright : 30px ; -moz-border-radius-bottomleft : 40px ; -webkit-border-radius : 10px 20px 30px 40px ; border-radius : 10px 20px 30px 40px ; border-image : este nuevo estilo nos permite usar una imagen como borde de una caja. Tenemos que indicar tres atributos: la imagen a utilizar, el grosor y la forma de aplicar la imagen (stretch, repeat, round, none). Ejemplo de uso: 1 2 3 -webkit-border-image : url ( imagen . png ) 27 repeat ; -moz-border-image : url ( imagen . png ) 27 repeat ; border-image : url ( imagen . png ) 27 repeat ; El resultado depender\u00e1 de la imagen que utilicemos para el borde, pero por ejemplo podr\u00edamos obtener resultados como el siguiente: border-color : Permite crear degradados en los bordes de una caja indicando la secuencia de colores del degradado (p\u00edxel a p\u00edxel y de dentro hacia fuera), de la forma: 1 2 3 4 5 6 7 8 9 -webkit-border-bottom-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -webkit-border-top-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -webkit-border-left-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -webkit-border-right-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -moz-border-bottom-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -moz-border-top-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -moz-border-left-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -moz-border-right-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; border : 8px solid # 000 ; Con lo que obtendr\u00edamos un resultado similar a: box-shadow : Permite dar sombra a elementos de bloque. Tiene 4 atributos: la distancia horizontal de la sombra, la distancia vertical de la sombra, el desenfoque (blur) y el color de la sombra. Adem\u00e1s podemos usar valores negativos para las distancias horizontal y vertical para crear sombras en otros sentidos. Un ejemplo de sombra en color gris: 1 2 3 -moz-box-shadow : 3px 3px 6px # 888888 ; -webkit-box-shadow : 3px 3px 6px # 888888 ; box-shadow : 3px 3px 6px # 888888 ; Con lo que obtendr\u00edamos un resultado similar a:","title":"Bordes"},{"location":"capitulo_css3_bordes.html#bordes","text":"En CSS3 se han incorporado cuatro nuevas propiedades para dar formato a los bordes de una caja. Estas propiedades no est\u00e1n todav\u00eda plenamente soportadas en todos los navegadores, por lo que para que funcione en la mayor\u00eda de ellos tendremos que usar tambi\u00e9n las propiedades nativas del navegador (simplemente a\u00f1adiremos los prefijos -webkit- y -moz-). Las nuevas propiedades son: border-radius : permite crear cajas con esquinas redondeadas. Hasta ahora esto solo se pod\u00eda hacer insertando im\u00e1genes que simularan esta caracter\u00edstica. Ahora lo podemos hacer de una forma mucho m\u00e1s sencilla: 1 2 3 -webkit-border-radius : 30px ; -moz-border-radius : 30px ; border-radius : 30px ; Adem\u00e1s tambi\u00e9n podemos indicar cada uno de los bordes por separado: 1 2 3 4 5 6 -moz-border-radius-topleft : 10px ; -moz-border-radius-topright : 20px ; -moz-border-radius-bottomright : 30px ; -moz-border-radius-bottomleft : 40px ; -webkit-border-radius : 10px 20px 30px 40px ; border-radius : 10px 20px 30px 40px ; border-image : este nuevo estilo nos permite usar una imagen como borde de una caja. Tenemos que indicar tres atributos: la imagen a utilizar, el grosor y la forma de aplicar la imagen (stretch, repeat, round, none). Ejemplo de uso: 1 2 3 -webkit-border-image : url ( imagen . png ) 27 repeat ; -moz-border-image : url ( imagen . png ) 27 repeat ; border-image : url ( imagen . png ) 27 repeat ; El resultado depender\u00e1 de la imagen que utilicemos para el borde, pero por ejemplo podr\u00edamos obtener resultados como el siguiente: border-color : Permite crear degradados en los bordes de una caja indicando la secuencia de colores del degradado (p\u00edxel a p\u00edxel y de dentro hacia fuera), de la forma: 1 2 3 4 5 6 7 8 9 -webkit-border-bottom-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -webkit-border-top-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -webkit-border-left-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -webkit-border-right-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -moz-border-bottom-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -moz-border-top-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -moz-border-left-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; -moz-border-right-colors : # 555 # 666 # 777 # 888 # 999 # aaa # bbb # ccc ; border : 8px solid # 000 ; Con lo que obtendr\u00edamos un resultado similar a: box-shadow : Permite dar sombra a elementos de bloque. Tiene 4 atributos: la distancia horizontal de la sombra, la distancia vertical de la sombra, el desenfoque (blur) y el color de la sombra. Adem\u00e1s podemos usar valores negativos para las distancias horizontal y vertical para crear sombras en otros sentidos. Un ejemplo de sombra en color gris: 1 2 3 -moz-box-shadow : 3px 3px 6px # 888888 ; -webkit-box-shadow : 3px 3px 6px # 888888 ; box-shadow : 3px 3px 6px # 888888 ; Con lo que obtendr\u00edamos un resultado similar a:","title":"Bordes"},{"location":"capitulo_css3_color.html","text":"Color \u00b6 En CSS3 se han incorporado nuevas formas para definir los colores: rgba( red, green, blue, opacity ); - Color RGBA. El valor de opacidad debe de estar entre 0 y 1, siendo 0 totalmente transparente. Por ejemplo, podemos usarlo de la forma: 1 2 background-color : rgba ( 255 , 115 , 135 , 0 . 5 ); color : rgba ( 255 , 115 , 135 , 0 . 5 ); hsl( hue, saturation, lightness ); - Modelo de color HSL. hsla(hue, saturation, lightness, alpha); - Modelo de color HSLA. cmyk(cyan, magenta, yellow, black); - Modelo de color CMYK. opacity: 0.5; - Tambi\u00e9n podemos indicar el valor de transparencia u opacidad por separado, debiendo de estar este valor entre 0 y 1, siendo 0 totalmente transparente y 1 totalmente opaco. Para dar tambi\u00e9n soporte a Internet Explorer usaremos: \" filter:alpha(opacity=50); \".","title":"Color"},{"location":"capitulo_css3_color.html#color","text":"En CSS3 se han incorporado nuevas formas para definir los colores: rgba( red, green, blue, opacity ); - Color RGBA. El valor de opacidad debe de estar entre 0 y 1, siendo 0 totalmente transparente. Por ejemplo, podemos usarlo de la forma: 1 2 background-color : rgba ( 255 , 115 , 135 , 0 . 5 ); color : rgba ( 255 , 115 , 135 , 0 . 5 ); hsl( hue, saturation, lightness ); - Modelo de color HSL. hsla(hue, saturation, lightness, alpha); - Modelo de color HSLA. cmyk(cyan, magenta, yellow, black); - Modelo de color CMYK. opacity: 0.5; - Tambi\u00e9n podemos indicar el valor de transparencia u opacidad por separado, debiendo de estar este valor entre 0 y 1, siendo 0 totalmente transparente y 1 totalmente opaco. Para dar tambi\u00e9n soporte a Internet Explorer usaremos: \" filter:alpha(opacity=50); \".","title":"Color"},{"location":"capitulo_css3_columnas.html","text":"Columnas \u00b6 Se han a\u00f1adido nuevas propiedades que nos permiten crear columnas directamente a partir de un texto, estas son: column-count: Define el n\u00famero de columnas en el que se va a dividir el texto. El texto ser\u00e1 dividido de la mejor forma posible para que ocupe todo el espacio. column-width: Define el ancho de la columna (en unidades CSS). column-gap: Define el espacio entre las columnas (en unidades CSS). column-rule: Mediante esta propiedad podemos a\u00f1adir una l\u00ednea separadora entre las columnas, si no especificamos esta propiedad no se a\u00f1adir\u00e1 ninguna l\u00ednea. Debemos de indicarle tres valores: ancho de la l\u00ednea (en unidades CSS), estilo de la l\u00ednea (solid, dotted, double, etc.) y color de la l\u00ednea. Para dar un mayor soporte antepondremos los prefijos -webkit- y -moz-, de la forma: 1 2 3 4 5 6 7 8 9 -webkit-column-count : 3 ; -webkit-column-rule : 1px solid silver ; -webkit-column-gap : 10px ; -moz-column-count : 3 ; -moz-column-rule : 1px solid silver ; -moz-column-gap : 10px ; column-count : 3 ; column-rule : 1px solid silver ; column-gap : 10px ; Con lo que obtendr\u00edamos un resultado similar a:","title":"Columnas"},{"location":"capitulo_css3_columnas.html#columnas","text":"Se han a\u00f1adido nuevas propiedades que nos permiten crear columnas directamente a partir de un texto, estas son: column-count: Define el n\u00famero de columnas en el que se va a dividir el texto. El texto ser\u00e1 dividido de la mejor forma posible para que ocupe todo el espacio. column-width: Define el ancho de la columna (en unidades CSS). column-gap: Define el espacio entre las columnas (en unidades CSS). column-rule: Mediante esta propiedad podemos a\u00f1adir una l\u00ednea separadora entre las columnas, si no especificamos esta propiedad no se a\u00f1adir\u00e1 ninguna l\u00ednea. Debemos de indicarle tres valores: ancho de la l\u00ednea (en unidades CSS), estilo de la l\u00ednea (solid, dotted, double, etc.) y color de la l\u00ednea. Para dar un mayor soporte antepondremos los prefijos -webkit- y -moz-, de la forma: 1 2 3 4 5 6 7 8 9 -webkit-column-count : 3 ; -webkit-column-rule : 1px solid silver ; -webkit-column-gap : 10px ; -moz-column-count : 3 ; -moz-column-rule : 1px solid silver ; -moz-column-gap : 10px ; column-count : 3 ; column-rule : 1px solid silver ; column-gap : 10px ; Con lo que obtendr\u00edamos un resultado similar a:","title":"Columnas"},{"location":"capitulo_css3_fondos.html","text":"Fondos \u00b6 CSS3 tambi\u00e9n ha introducido nuevas propiedades para definir el estilo de las im\u00e1genes de fondo: background-origin: border-box | padding-box | content-box - permite definir el origen de coordenadas sobre el que se va a colocar la imagen de fondo. Acepta tres posible valores: \"border-box\" para que el fondo empiece desde el mismo borde del elemento, \"padding-box\" para que la imagen de fondo se coloque a partir del espaciado de padding, y por \u00faltimo \"content-box\" para que la imagen de fondo se coloque donde empieza el contenido del elemento, sin tener en cuenta el borde ni el padding. background-clip: border-box | padding-box | content-box - define el \u00e1rea sobre la que se extiende la imagen de fondo, puede tomar tres valores: \"border-box\" se extiende por toda el \u00e1rea dentro de la zona definida a partir del borde, \"padding-box\" se extiende a partir del espaciado de padding y \"content-box\" el fondo se extiende solo dentro del \u00e1rea de contenido. background-size : Permite indicar el tama\u00f1o de la imagen de fondo. Acepta diferentes atributos: background-size: 200px; // especifica ancho y alto a la vez background-size: 200px 100px; // 200px de ancho y 100px de alto background-size: auto 200px; // ajustar la anchura autom\u00e1ticamente background-size: 50% 25%; // Tambi\u00e9n podemos indicar el tama\u00f1o con porcentajes background-size: contain; // Escalar la imagen al tama\u00f1o m\u00e1ximo posible (conservando las proporciones originales) para que quepa dentro del \u00e1rea asignada. background-size: cover; // Escalar la imagen para que cubra completamente el \u00e1rea asignada (conservando las proporciones originales). Capas con m\u00faltiples im\u00e1genes de fondo: Con la propiedad background ahora podemos indicar varias im\u00e1genes de fondo, simplemente separ\u00e1ndolas con comas. Para cada propiedad background debemos definir cuatro valores: imagen de fondo, posici\u00f3n vertical, posici\u00f3n horizontal, modo de repetici\u00f3n (repeat, repeat-x, repeat-y, no-repeat). Ejemplo: 1 2 background : url ( imagen1 . png ) 10px center no-repeat , url ( imagen2 . png ) 0 center repeat-x ; Dado que estas propiedades no son soportadas todav\u00eda en todos los navegadores, deberemos de definirlas tambi\u00e9n a\u00f1adiendo los prefijos \"-webkit-\" y \"-moz-\" para dar un mayor soporte.","title":"Fondos"},{"location":"capitulo_css3_fondos.html#fondos","text":"CSS3 tambi\u00e9n ha introducido nuevas propiedades para definir el estilo de las im\u00e1genes de fondo: background-origin: border-box | padding-box | content-box - permite definir el origen de coordenadas sobre el que se va a colocar la imagen de fondo. Acepta tres posible valores: \"border-box\" para que el fondo empiece desde el mismo borde del elemento, \"padding-box\" para que la imagen de fondo se coloque a partir del espaciado de padding, y por \u00faltimo \"content-box\" para que la imagen de fondo se coloque donde empieza el contenido del elemento, sin tener en cuenta el borde ni el padding. background-clip: border-box | padding-box | content-box - define el \u00e1rea sobre la que se extiende la imagen de fondo, puede tomar tres valores: \"border-box\" se extiende por toda el \u00e1rea dentro de la zona definida a partir del borde, \"padding-box\" se extiende a partir del espaciado de padding y \"content-box\" el fondo se extiende solo dentro del \u00e1rea de contenido. background-size : Permite indicar el tama\u00f1o de la imagen de fondo. Acepta diferentes atributos: background-size: 200px; // especifica ancho y alto a la vez background-size: 200px 100px; // 200px de ancho y 100px de alto background-size: auto 200px; // ajustar la anchura autom\u00e1ticamente background-size: 50% 25%; // Tambi\u00e9n podemos indicar el tama\u00f1o con porcentajes background-size: contain; // Escalar la imagen al tama\u00f1o m\u00e1ximo posible (conservando las proporciones originales) para que quepa dentro del \u00e1rea asignada. background-size: cover; // Escalar la imagen para que cubra completamente el \u00e1rea asignada (conservando las proporciones originales). Capas con m\u00faltiples im\u00e1genes de fondo: Con la propiedad background ahora podemos indicar varias im\u00e1genes de fondo, simplemente separ\u00e1ndolas con comas. Para cada propiedad background debemos definir cuatro valores: imagen de fondo, posici\u00f3n vertical, posici\u00f3n horizontal, modo de repetici\u00f3n (repeat, repeat-x, repeat-y, no-repeat). Ejemplo: 1 2 background : url ( imagen1 . png ) 10px center no-repeat , url ( imagen2 . png ) 0 center repeat-x ; Dado que estas propiedades no son soportadas todav\u00eda en todos los navegadores, deberemos de definirlas tambi\u00e9n a\u00f1adiendo los prefijos \"-webkit-\" y \"-moz-\" para dar un mayor soporte.","title":"Fondos"},{"location":"capitulo_css3_modelo_de_caja_basico.html","text":"Modelo de caja b\u00e1sico \u00b6 Se han a\u00f1adido nuevas propiedades para la disposici\u00f3n de elementos dentro de una caja: overflow: visible | hidden | scroll | auto; - permite indicar que ocurrir\u00e1 si el contenido excede el \u00e1rea de un elemento, acepta cuatro posibles valores: visible : No se recorta el contenido, la parte que quede fuera ser\u00e1 visible. Es el valor por defecto. hidden : El contenido que sobresalga ser\u00e1 ocultado y tampoco se mostrar\u00e1 la barra de scroll. scroll : El contenido se recorta y el navegador muestra la barra de scroll para ver el resto del contenido. auto : Si el contenido se recorta el navegador mostrar\u00e1 una barra para ver el resto del contenido. overflow-x : igual que overflow pero indicaremos solo la propiedad en horizontal. overflow-y : igual que overflow pero solo para vertical. resize: none | horizontal | vertical | both; - habilita la posibilidad de redimensionar \"manualmente\" una caja. Puede tomar los valores: none, horizontal (permitir redimensionar solo en horizontal), vertical (solo en vertical), o both (redimensionar ambas dimensiones). Se recomienda adem\u00e1s a\u00f1adir la propiedad \"overflow: hidden\" para ocultar los elementos al redimensionar. Por ejemplo: 1 2 resize : both ; overflow : auto ;","title":"Modelo de caja b\u00e1sico"},{"location":"capitulo_css3_modelo_de_caja_basico.html#modelo-de-caja-basico","text":"Se han a\u00f1adido nuevas propiedades para la disposici\u00f3n de elementos dentro de una caja: overflow: visible | hidden | scroll | auto; - permite indicar que ocurrir\u00e1 si el contenido excede el \u00e1rea de un elemento, acepta cuatro posibles valores: visible : No se recorta el contenido, la parte que quede fuera ser\u00e1 visible. Es el valor por defecto. hidden : El contenido que sobresalga ser\u00e1 ocultado y tampoco se mostrar\u00e1 la barra de scroll. scroll : El contenido se recorta y el navegador muestra la barra de scroll para ver el resto del contenido. auto : Si el contenido se recorta el navegador mostrar\u00e1 una barra para ver el resto del contenido. overflow-x : igual que overflow pero indicaremos solo la propiedad en horizontal. overflow-y : igual que overflow pero solo para vertical. resize: none | horizontal | vertical | both; - habilita la posibilidad de redimensionar \"manualmente\" una caja. Puede tomar los valores: none, horizontal (permitir redimensionar solo en horizontal), vertical (solo en vertical), o both (redimensionar ambas dimensiones). Se recomienda adem\u00e1s a\u00f1adir la propiedad \"overflow: hidden\" para ocultar los elementos al redimensionar. Por ejemplo: 1 2 resize : both ; overflow : auto ;","title":"Modelo de caja b\u00e1sico"},{"location":"capitulo_css3_nuevas_pseudo-clases.html","text":"Nuevas pseudo-clases \u00b6 Una pseudo-clase es un estado o uso predefinido de un elemento al que se le puede aplicar un estilo independientemente del estilo aplicado al de su estado por defecto. En CSS3 se han a\u00f1adido muchas nuevas pseudo-clases para facilitar a los programadores el uso de algunos estilos avanzados en el dise\u00f1o de p\u00e1ginas Web. Las nuevas pseudo-clases son: :nth-child(n) - Fija el aspecto de una ocurrencia espec\u00edfica del elemento nodo hijo especificado. Por ejemplo, el tercer elemento nodo hijo de una lista ser\u00eda \"li:nth-child(3)\". Adem\u00e1s se pueden usar peque\u00f1as expresiones como par\u00e1metro para por ejemplo seleccionar todos los elementos impares: \"nth-child(2n+1)\" los pares \"nth-child(2n)\", etc. Los elementos impares y pares tambi\u00e9n se pueden seleccionar usando \"nth-child(odd)\" y \"nth-child(even)\" :nth-last-child(n) - igual que \":nth-child(n)\" pero empezando a contar desde el final. :nth-of-type(n) - Fija la apariencia de una ocurrencia espec\u00edfica del elemento con el tipo de selector especificado en un elemento padre. Por ejemplo la segunda lista no ordenada ser\u00eda ul:nth-of-type(2). Tambi\u00e9n permite los mismos par\u00e1metros que \":nth-child(#)\". :nth-last-of-type(n) - igual que \":nth-of-type(n)\" pero empezando a contar desde el final. :first-child - Fija el aspecto del primer elemento de un tipo de selector solo si es el primer nodo hijo de su elemento padre, por ejemplo la primera etiqueta <li> de una lista <ol> . :last-child - Ultimo elemento de una lista de elementos de un tipo dado. :first-of-type - Selecciona el primer elemento de un tipo concreto dentro de la lista de hijos. :last-of-type - Selecciona el \u00faltimo elemento de un tipo. :only-child - Selecciona el elemento si es el \u00fanico elemento hijo. :only-of-type - Selecciona el elemento si es el \u00fanico elemento hijo de ese tipo. :empty - Selecciona los elementos que no tienen hijos (incluyendo nodos de texto). :enabled - Selecciona los elementos de la interfaz que tengan el estado \"enable\". :disabled - Selecciona los elementos de la interfaz que tengan un estado \"disabled\". :not(s) - Selecciona los elementos que no coincidan con el selector especificado. :lang(language) - nos permite especificar estilos que dependen del idioma especificado por la propiedad language (en, sp, etc.) Ejemplos de uso: 1 2 3 4 5 6 7 8 9 10 tr : nth-child ( even ) { background : silver ; } tr : nth-child ( odd ) { background : white ; } p : lang ( en ) { color : gray ; font-style : italic ; } Pseudo-clases para formularios \u00b6 Adem\u00e1s tambi\u00e9n se han a\u00f1adido nuevas pseudo-clases que podemos usar en los formularios para aplicar un formato seg\u00fan el estado de un campo. Estas propiedades van en concordancia con los nuevos campos introducidos en HTML5 (ver la secci\u00f3n de formularios de HTML5). estas son: :valid - campo v\u00e1lido (depender\u00e1 del tipo de campo). :invalid - campo inv\u00e1lido (depender\u00e1 del tipo de campo). :required - campo requerido (marcado con el atributo \"required\"). :optional - campo opcional (campo no marcado con el atributo \"required\"). :checked - elemento marcado (o checked, v\u00e1lido para radio button o checkbox). :in-range - valor dentro del rango indicado (para campos num\u00e9ricos o de rango). :out-of-range - valor fuera de rango (para campos num\u00e9ricos o de rango). :read-only - campo de solo lectura. :read-write - campo de lectura / escritura. Algunos ejemplos de uso: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 < head > < style > # form1 input : valid { background : lightgreen ; } # form1 input : invalid { border-color : red ; } # form1 specialInput input : valid { background : green ; } </ style > </ head > < body > < form id = \"form1\" name = \"form1\" method = \"post\" action = \"formaction.php\" > < p > Nombre: < input type = \"text\" name = \"nombre\" id = \"nombre\" required /> < p /> < p > Usuario: < specialInput > < input type = \"text\" name = \"usuario\" id = \"usuario\" required /> </ specialInput > < p /> </ form > </ body > En este ejemplo cabe destacar la etiqueta \"specialInput\", que no es ninguna etiqueta existente, sino una nueva etiqueta que hemos creado para aplicar un formato especial. Adem\u00e1s podemos aplicar estas pseudo-clases en cadena y hacer cosas como: 1 2 3 4 5 6 input : focus : required : invalid { background : pink url ( ico_validation.png ) 379 px 3 px no-repeat ; } input : required : valid { background-color : #fff ; background-position : 379 px -61 px ; } Dado que Internet Explorer 6-8 no soporta la mayor\u00eda de pseudo-clases se han desarrollado algunas librer\u00edas de JavaScript que realizan las mismas funciones para estos navegadores, como \"select[ivizr]\" que podr\u00e9is descargar de su p\u00e1gina oficial \" http://selectivizr.com/ \".","title":"Nuevas pseudo-clases"},{"location":"capitulo_css3_nuevas_pseudo-clases.html#nuevas-pseudo-clases","text":"Una pseudo-clase es un estado o uso predefinido de un elemento al que se le puede aplicar un estilo independientemente del estilo aplicado al de su estado por defecto. En CSS3 se han a\u00f1adido muchas nuevas pseudo-clases para facilitar a los programadores el uso de algunos estilos avanzados en el dise\u00f1o de p\u00e1ginas Web. Las nuevas pseudo-clases son: :nth-child(n) - Fija el aspecto de una ocurrencia espec\u00edfica del elemento nodo hijo especificado. Por ejemplo, el tercer elemento nodo hijo de una lista ser\u00eda \"li:nth-child(3)\". Adem\u00e1s se pueden usar peque\u00f1as expresiones como par\u00e1metro para por ejemplo seleccionar todos los elementos impares: \"nth-child(2n+1)\" los pares \"nth-child(2n)\", etc. Los elementos impares y pares tambi\u00e9n se pueden seleccionar usando \"nth-child(odd)\" y \"nth-child(even)\" :nth-last-child(n) - igual que \":nth-child(n)\" pero empezando a contar desde el final. :nth-of-type(n) - Fija la apariencia de una ocurrencia espec\u00edfica del elemento con el tipo de selector especificado en un elemento padre. Por ejemplo la segunda lista no ordenada ser\u00eda ul:nth-of-type(2). Tambi\u00e9n permite los mismos par\u00e1metros que \":nth-child(#)\". :nth-last-of-type(n) - igual que \":nth-of-type(n)\" pero empezando a contar desde el final. :first-child - Fija el aspecto del primer elemento de un tipo de selector solo si es el primer nodo hijo de su elemento padre, por ejemplo la primera etiqueta <li> de una lista <ol> . :last-child - Ultimo elemento de una lista de elementos de un tipo dado. :first-of-type - Selecciona el primer elemento de un tipo concreto dentro de la lista de hijos. :last-of-type - Selecciona el \u00faltimo elemento de un tipo. :only-child - Selecciona el elemento si es el \u00fanico elemento hijo. :only-of-type - Selecciona el elemento si es el \u00fanico elemento hijo de ese tipo. :empty - Selecciona los elementos que no tienen hijos (incluyendo nodos de texto). :enabled - Selecciona los elementos de la interfaz que tengan el estado \"enable\". :disabled - Selecciona los elementos de la interfaz que tengan un estado \"disabled\". :not(s) - Selecciona los elementos que no coincidan con el selector especificado. :lang(language) - nos permite especificar estilos que dependen del idioma especificado por la propiedad language (en, sp, etc.) Ejemplos de uso: 1 2 3 4 5 6 7 8 9 10 tr : nth-child ( even ) { background : silver ; } tr : nth-child ( odd ) { background : white ; } p : lang ( en ) { color : gray ; font-style : italic ; }","title":"Nuevas pseudo-clases"},{"location":"capitulo_css3_nuevas_pseudo-clases.html#pseudo-clases-para-formularios","text":"Adem\u00e1s tambi\u00e9n se han a\u00f1adido nuevas pseudo-clases que podemos usar en los formularios para aplicar un formato seg\u00fan el estado de un campo. Estas propiedades van en concordancia con los nuevos campos introducidos en HTML5 (ver la secci\u00f3n de formularios de HTML5). estas son: :valid - campo v\u00e1lido (depender\u00e1 del tipo de campo). :invalid - campo inv\u00e1lido (depender\u00e1 del tipo de campo). :required - campo requerido (marcado con el atributo \"required\"). :optional - campo opcional (campo no marcado con el atributo \"required\"). :checked - elemento marcado (o checked, v\u00e1lido para radio button o checkbox). :in-range - valor dentro del rango indicado (para campos num\u00e9ricos o de rango). :out-of-range - valor fuera de rango (para campos num\u00e9ricos o de rango). :read-only - campo de solo lectura. :read-write - campo de lectura / escritura. Algunos ejemplos de uso: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 < head > < style > # form1 input : valid { background : lightgreen ; } # form1 input : invalid { border-color : red ; } # form1 specialInput input : valid { background : green ; } </ style > </ head > < body > < form id = \"form1\" name = \"form1\" method = \"post\" action = \"formaction.php\" > < p > Nombre: < input type = \"text\" name = \"nombre\" id = \"nombre\" required /> < p /> < p > Usuario: < specialInput > < input type = \"text\" name = \"usuario\" id = \"usuario\" required /> </ specialInput > < p /> </ form > </ body > En este ejemplo cabe destacar la etiqueta \"specialInput\", que no es ninguna etiqueta existente, sino una nueva etiqueta que hemos creado para aplicar un formato especial. Adem\u00e1s podemos aplicar estas pseudo-clases en cadena y hacer cosas como: 1 2 3 4 5 6 input : focus : required : invalid { background : pink url ( ico_validation.png ) 379 px 3 px no-repeat ; } input : required : valid { background-color : #fff ; background-position : 379 px -61 px ; } Dado que Internet Explorer 6-8 no soporta la mayor\u00eda de pseudo-clases se han desarrollado algunas librer\u00edas de JavaScript que realizan las mismas funciones para estos navegadores, como \"select[ivizr]\" que podr\u00e9is descargar de su p\u00e1gina oficial \" http://selectivizr.com/ \".","title":"Pseudo-clases para formularios"},{"location":"capitulo_css3_nuevos_selectores.html","text":"Nuevos selectores de atributos \u00b6 En primer lugar encontramos 3 nuevos selectores de atributos: elemento[atributo^=\"valor\"] : Selecciona los elementos con ese atributo y que su valor comienza por la cadena de texto indicada en \"valor\". elemento[atributo$=\"valor\"] : Selecciona los elementos con ese atributo y que su valor termina por la cadena de texto indicada en \"valor\". elemento[atributo*=\"valor\"] : Selecciona los elementos con ese atributo y que su valor contiene la cadena de texto indicada en \"valor\". Por ejemplo: 1 2 3 4 5 6 7 8 // Selecciona todos los enlaces que apunten a una direcci\u00f3n de correo : a [ href ^= \"mailto:\" ] { ... } // Selecciona todos los enlaces que apuntan a p\u00e1ginas . php a [ href $= \".php\" ] { ... } // Selecciona todos los enlaces que lleven a una p\u00e1gina que contenga la palabra ejemplo : a [ href *= \"ejemplo\" ] { ... } Tambi\u00e9n incorpora nuevas formas de seleccionar etiquetas adyacentes: h1 + h2{...} : Etiquetas inmediatamente adyacentes. h1 ~ h2{...} : Selector general de hermanos. V\u00e1lido cuando <h2> se encuentre despu\u00e9s de <h1> , pero puede haber otras etiquetas de por medio. Ejemplo: 1 2 3 4 5 6 < h1 > T\u00edtulo </ h1 > < h2 > Subt\u00edtulo adyacente </ h2 > < h1 > T\u00edtulo </ h1 > < p > p\u00e1rrafo de separaci\u00f3n </ p > < h2 > Subt\u00edtulo con selector general de hermanos </ h2 > Tambi\u00e9n podemos indicar atributos espec\u00edficos de una etiqueta, con: etiqueta1[atributo1=\"valor1\"] : seleccionar\u00eda todas las etiquetas \"etiqueta1\" que contengan un atributo llamado \"atributo1\" cuyo valor sea igual a \"valor1\". Por ejemplo, si queremos indicar un estilo para todas las etiquetas input que sean de tipo texto: 1 2 3 input [ type = \"text\" ] { background : #eee ; }","title":"Nuevos selectores de atributos"},{"location":"capitulo_css3_nuevos_selectores.html#nuevos-selectores-de-atributos","text":"En primer lugar encontramos 3 nuevos selectores de atributos: elemento[atributo^=\"valor\"] : Selecciona los elementos con ese atributo y que su valor comienza por la cadena de texto indicada en \"valor\". elemento[atributo$=\"valor\"] : Selecciona los elementos con ese atributo y que su valor termina por la cadena de texto indicada en \"valor\". elemento[atributo*=\"valor\"] : Selecciona los elementos con ese atributo y que su valor contiene la cadena de texto indicada en \"valor\". Por ejemplo: 1 2 3 4 5 6 7 8 // Selecciona todos los enlaces que apunten a una direcci\u00f3n de correo : a [ href ^= \"mailto:\" ] { ... } // Selecciona todos los enlaces que apuntan a p\u00e1ginas . php a [ href $= \".php\" ] { ... } // Selecciona todos los enlaces que lleven a una p\u00e1gina que contenga la palabra ejemplo : a [ href *= \"ejemplo\" ] { ... } Tambi\u00e9n incorpora nuevas formas de seleccionar etiquetas adyacentes: h1 + h2{...} : Etiquetas inmediatamente adyacentes. h1 ~ h2{...} : Selector general de hermanos. V\u00e1lido cuando <h2> se encuentre despu\u00e9s de <h1> , pero puede haber otras etiquetas de por medio. Ejemplo: 1 2 3 4 5 6 < h1 > T\u00edtulo </ h1 > < h2 > Subt\u00edtulo adyacente </ h2 > < h1 > T\u00edtulo </ h1 > < p > p\u00e1rrafo de separaci\u00f3n </ p > < h2 > Subt\u00edtulo con selector general de hermanos </ h2 > Tambi\u00e9n podemos indicar atributos espec\u00edficos de una etiqueta, con: etiqueta1[atributo1=\"valor1\"] : seleccionar\u00eda todas las etiquetas \"etiqueta1\" que contengan un atributo llamado \"atributo1\" cuyo valor sea igual a \"valor1\". Por ejemplo, si queremos indicar un estilo para todas las etiquetas input que sean de tipo texto: 1 2 3 input [ type = \"text\" ] { background : #eee ; }","title":"Nuevos selectores de atributos"},{"location":"capitulo_css3_texto.html","text":"Texto \u00b6 Las nuevas propiedades de CSS3 para dar formato a textos son: text-shadow : Permite dar sombra a un texto. Sus propiedades son distancia horizontal, distancia vertical, desenfoque ( blur ) y color de la sombra. Por ejemplo: 1 2 text-shadow : 2px 2px 2px # 9e9e9e ; filter : dropshadow ( color = # 9e9e9e , offx = 2 , offy = 2 ); Con lo que obtendr\u00edamos un resultado similar a: word-wrap: break-word; - Permite separar palabras muy largas dentro de un elemento de bloque. Por defecto toma el valor \"normal\", por lo que las palabras largas se saldr\u00edan del borde del elemento. Con el valor \"break-word\" indicamos que las palabras pueden ser partidas para que quepan en el ancho de la caja, de la forma: text-overflow: clip | ellipsis; - Indica la forma de partir texto cuando excede el tama\u00f1o de su contenedor. Con \"clip\" el texto sobrante ser\u00e1 cortado directamente aunque se quede una palabra por la mitad, mientras que \"ellipsis\" quitar\u00e1 la \u00faltima palabra que no quepa y pondr\u00e1 en su lugar unos puntos suspensivos. Esta propiedad de momento no funciona en Firefox. font-face : Permite utilizar tipograf\u00edas diferentes a las est\u00e1ndar, que ser\u00e1n importadas desde un fichero indicado. De momento soporta los formatos: .eot, .ttf y .otf. Para importar una fuente hay que seguir la siguiente sintaxis: 1 2 3 4 5 6 @ font-face { font-family : < nombre-fuente >; src : < source >; [ font-weight : < weigth >]; [ font-style : < style >]; } Con \"font-family\" indicamos el nombre que le damos a la fuente, y \"src\" nos permite seleccionar el fichero a cargar. Los otros dos par\u00e1metros son opcionales y tendr\u00e1n valor \"normal\" por defecto. Por ejemplo: 1 2 3 4 5 6 7 8 9 @ font-face { font-family : \u2019 LeagueGothic \u2019 ; src : url ( LeagueGothic . otf ); } // Ahora ya podemos usar esta fuente : p { font-family : \u2019 LeagueGothic \u2019 ; }","title":"Texto"},{"location":"capitulo_css3_texto.html#texto","text":"Las nuevas propiedades de CSS3 para dar formato a textos son: text-shadow : Permite dar sombra a un texto. Sus propiedades son distancia horizontal, distancia vertical, desenfoque ( blur ) y color de la sombra. Por ejemplo: 1 2 text-shadow : 2px 2px 2px # 9e9e9e ; filter : dropshadow ( color = # 9e9e9e , offx = 2 , offy = 2 ); Con lo que obtendr\u00edamos un resultado similar a: word-wrap: break-word; - Permite separar palabras muy largas dentro de un elemento de bloque. Por defecto toma el valor \"normal\", por lo que las palabras largas se saldr\u00edan del borde del elemento. Con el valor \"break-word\" indicamos que las palabras pueden ser partidas para que quepan en el ancho de la caja, de la forma: text-overflow: clip | ellipsis; - Indica la forma de partir texto cuando excede el tama\u00f1o de su contenedor. Con \"clip\" el texto sobrante ser\u00e1 cortado directamente aunque se quede una palabra por la mitad, mientras que \"ellipsis\" quitar\u00e1 la \u00faltima palabra que no quepa y pondr\u00e1 en su lugar unos puntos suspensivos. Esta propiedad de momento no funciona en Firefox. font-face : Permite utilizar tipograf\u00edas diferentes a las est\u00e1ndar, que ser\u00e1n importadas desde un fichero indicado. De momento soporta los formatos: .eot, .ttf y .otf. Para importar una fuente hay que seguir la siguiente sintaxis: 1 2 3 4 5 6 @ font-face { font-family : < nombre-fuente >; src : < source >; [ font-weight : < weigth >]; [ font-style : < style >]; } Con \"font-family\" indicamos el nombre que le damos a la fuente, y \"src\" nos permite seleccionar el fichero a cargar. Los otros dos par\u00e1metros son opcionales y tendr\u00e1n valor \"normal\" por defecto. Por ejemplo: 1 2 3 4 5 6 7 8 9 @ font-face { font-family : \u2019 LeagueGothic \u2019 ; src : url ( LeagueGothic . otf ); } // Ahora ya podemos usar esta fuente : p { font-family : \u2019 LeagueGothic \u2019 ; }","title":"Texto"},{"location":"capitulo_css3_transformaciones.html","text":"Transformaciones \u00b6 La propiedad \" transform \" nos permite aplicar transformaciones 2D o 3D a un elemento. Por ejemplo nos permite rotar, escalar, mover, etc. el elemento indicado. Esta propiedad todav\u00eda no es soportada por todos los navegadores, por lo que tendremos que a\u00f1adir los prefijos \"-ms-\", \"webkit-\", \"-moz-\" y \"-o-\" para dar un mayor soporte. Algunas de las funciones de transformaci\u00f3n que podemos utilizar son: none: Indica que no se tiene que aplicar ninguna transformaci\u00f3n. translate(x,y): Define una traslaci\u00f3n 2D. translateX(x): Traslaci\u00f3n en la coordenada X. translateY(y): Traslaci\u00f3n en la coordenada Y. scale(x,y): Define una transformaci\u00f3n de escalado 2D, deberemos de indicar valores entre 0.1 y 2. scaleX(x): Escalado en la coordenada X, deberemos de indicar valores entre 0.1 y 2. scaleY(y): Escalado en la coordenada Y, deberemos de indicar valores entre 0.1 y 2. rotate(angle): Aplica una rotaci\u00f3n, el \u00e1ngulo debe ser indicado en grados (ejem: \"30deg\"). skew(x-angle,y-angle): Define una transformaci\u00f3n 2D de sesgo (o torsi\u00f3n), indicada en grados (deg). skewX(angle): Define una transformaci\u00f3n de sesgo sobre la coordenada X (indicada en grados). skewY(angle): Define una transformaci\u00f3n de sesgo sobre la coordenada Y (indicada en grados). Adem\u00e1s tambi\u00e9n podemos indicar varias transformaciones en una misma l\u00ednea, de la forma: 1 2 3 4 5 6 7 # myDIV { -moz- transform : scale ( 1.2 ) rotate ( 9 deg ) translate ( 5 px , 2 px ) skew ( 5 deg , 5 deg ); -webkit- transform : scale ( 1.2 ) rotate ( 9 deg ) translate ( 5 px , 2 px ) skew ( 5 deg , 5 deg ); -o- transform : scale ( 1.2 ) rotate ( 9 deg ) translate ( 5 px , 2 px ) skew ( 5 deg , 5 deg ); -ms- transform : scale ( 1.2 ) rotate ( 9 deg ) translate ( 5 px , 2 px ) skew ( 5 deg , 5 deg ); transform : scale ( 1.2 ) rotate ( 9 deg ) translate ( 5 px , 2 px ) skew ( 5 deg , 5 deg ); } Hay muchos m\u00e1s tipos de transformaciones, aunque algunas de ellos no son funcionales todav\u00eda (sobre todo las funciones 3D), para m\u00e1s informaci\u00f3n consulta: \" http://www.w3schools.com/cssref/css3_pr_transform.asp \".","title":"Transformaciones"},{"location":"capitulo_css3_transformaciones.html#transformaciones","text":"La propiedad \" transform \" nos permite aplicar transformaciones 2D o 3D a un elemento. Por ejemplo nos permite rotar, escalar, mover, etc. el elemento indicado. Esta propiedad todav\u00eda no es soportada por todos los navegadores, por lo que tendremos que a\u00f1adir los prefijos \"-ms-\", \"webkit-\", \"-moz-\" y \"-o-\" para dar un mayor soporte. Algunas de las funciones de transformaci\u00f3n que podemos utilizar son: none: Indica que no se tiene que aplicar ninguna transformaci\u00f3n. translate(x,y): Define una traslaci\u00f3n 2D. translateX(x): Traslaci\u00f3n en la coordenada X. translateY(y): Traslaci\u00f3n en la coordenada Y. scale(x,y): Define una transformaci\u00f3n de escalado 2D, deberemos de indicar valores entre 0.1 y 2. scaleX(x): Escalado en la coordenada X, deberemos de indicar valores entre 0.1 y 2. scaleY(y): Escalado en la coordenada Y, deberemos de indicar valores entre 0.1 y 2. rotate(angle): Aplica una rotaci\u00f3n, el \u00e1ngulo debe ser indicado en grados (ejem: \"30deg\"). skew(x-angle,y-angle): Define una transformaci\u00f3n 2D de sesgo (o torsi\u00f3n), indicada en grados (deg). skewX(angle): Define una transformaci\u00f3n de sesgo sobre la coordenada X (indicada en grados). skewY(angle): Define una transformaci\u00f3n de sesgo sobre la coordenada Y (indicada en grados). Adem\u00e1s tambi\u00e9n podemos indicar varias transformaciones en una misma l\u00ednea, de la forma: 1 2 3 4 5 6 7 # myDIV { -moz- transform : scale ( 1.2 ) rotate ( 9 deg ) translate ( 5 px , 2 px ) skew ( 5 deg , 5 deg ); -webkit- transform : scale ( 1.2 ) rotate ( 9 deg ) translate ( 5 px , 2 px ) skew ( 5 deg , 5 deg ); -o- transform : scale ( 1.2 ) rotate ( 9 deg ) translate ( 5 px , 2 px ) skew ( 5 deg , 5 deg ); -ms- transform : scale ( 1.2 ) rotate ( 9 deg ) translate ( 5 px , 2 px ) skew ( 5 deg , 5 deg ); transform : scale ( 1.2 ) rotate ( 9 deg ) translate ( 5 px , 2 px ) skew ( 5 deg , 5 deg ); } Hay muchos m\u00e1s tipos de transformaciones, aunque algunas de ellos no son funcionales todav\u00eda (sobre todo las funciones 3D), para m\u00e1s informaci\u00f3n consulta: \" http://www.w3schools.com/cssref/css3_pr_transform.asp \".","title":"Transformaciones"},{"location":"capitulo_css3_transiciones.html","text":"Transiciones \u00b6 Una de las propiedades m\u00e1s novedosas que incorpora CSS3 es la posibilidad de crear animaciones mediante transiciones y transformaciones. Se pueden aplicar transiciones a la mayor\u00eda de propiedades (posiciones, fondo, color, tama\u00f1o, etc.). Desafortunadamente, no todos los navegadores usan los nombres est\u00e1ndares, por lo que tendremos que a\u00f1adir los prefijos \"-webkit-\", \"-moz-\" y \"-o-\" para dar un mayor soporte. La buena noticia es que la sintaxis para los valores en todos ellos es consistente: transition-property: propertyName; - Indica la propiedad sobre la que se aplicar\u00e1 la transici\u00f3n. Se puede aplicar sobre casi todas las propiedades: background, color, height, width, border, etc. Adem\u00e1s tambi\u00e9n podemos usar el valor \"all\" para que se aplique sobre todas las propiedades disponibles, por ejemplo: 1 2 3 4 -webkit-transition-property : all ; -moz-transition-property : all ; -o-transition-property : all ; transition-property : all ; transition-duration: duration; - Indica el tiempo que debe durar la transici\u00f3n en segundos (0.5s) o en milisegundos (500ms): 1 2 3 4 -webkit-transition-duration : 1s ; -moz-transition-duration : 1s ; -o-transition-duration : 1s ; transition-duration : 1s ; transition-timing-function: timingFunction; - Es la funci\u00f3n de tiempo que seguir\u00e1 la transici\u00f3n, indica los cambios de velocidad a lo largo de la animaci\u00f3n. Puede tomar cinco valores diferentes: ease (valor por defecto), linear, ease-in, ease-out, ease-in-out y cubic-bezier(cp1x, cp1y, cp2x, cp2y). Por ejemplo: 1 2 3 4 -webkit-transition-timing-function : linear ; -moz-transition-timing-function : linear ; -o-transition-timing-function : linear ; transition-timing-function : linear ; transition-delay: delay; - Permite establecer un retraso inicial antes de ejecutar la transici\u00f3n. El tiempo de retraso se debe de indicar en segundos (0.5s) o en milisegundos (500ms): 1 2 3 4 -webkit-transition-delay : 0 . 2s ; -moz-transition-delay : 0 . 2s ; -o-transition-delay : 0 . 2s ; transition-delay : 0 . 2s ; transition: propertyName duration timingFunction delay; - Tambi\u00e9n podemos indicar las cuatro propiedades explicadas en una sola l\u00ednea: 1 2 3 4 -webkit-transition : all 1s linear 0 . 2s ; -moz-transition : all 1s linear 0 . 2s ; -o-transition : all 1s linear 0 . 2s ; transition : all 1s linear 0 . 2s ; En general, lo mejor es declarar la transici\u00f3n en la propiedad base, sin pseudo-clases. De esta forma conseguiremos que se ejecute en ambas direcciones, por ejemplo: 1 2 3 4 5 6 7 8 9 10 . btn1 { background : #9c3 ; -webkit- transition : background 0.3 s ease ; -moz- transition : background 0.3 s ease ; -o- transition : background 0.3 s ease ; transition : background 0.3 s ease ; } . btn1 : hover { background : #690 ; }","title":"Transiciones"},{"location":"capitulo_css3_transiciones.html#transiciones","text":"Una de las propiedades m\u00e1s novedosas que incorpora CSS3 es la posibilidad de crear animaciones mediante transiciones y transformaciones. Se pueden aplicar transiciones a la mayor\u00eda de propiedades (posiciones, fondo, color, tama\u00f1o, etc.). Desafortunadamente, no todos los navegadores usan los nombres est\u00e1ndares, por lo que tendremos que a\u00f1adir los prefijos \"-webkit-\", \"-moz-\" y \"-o-\" para dar un mayor soporte. La buena noticia es que la sintaxis para los valores en todos ellos es consistente: transition-property: propertyName; - Indica la propiedad sobre la que se aplicar\u00e1 la transici\u00f3n. Se puede aplicar sobre casi todas las propiedades: background, color, height, width, border, etc. Adem\u00e1s tambi\u00e9n podemos usar el valor \"all\" para que se aplique sobre todas las propiedades disponibles, por ejemplo: 1 2 3 4 -webkit-transition-property : all ; -moz-transition-property : all ; -o-transition-property : all ; transition-property : all ; transition-duration: duration; - Indica el tiempo que debe durar la transici\u00f3n en segundos (0.5s) o en milisegundos (500ms): 1 2 3 4 -webkit-transition-duration : 1s ; -moz-transition-duration : 1s ; -o-transition-duration : 1s ; transition-duration : 1s ; transition-timing-function: timingFunction; - Es la funci\u00f3n de tiempo que seguir\u00e1 la transici\u00f3n, indica los cambios de velocidad a lo largo de la animaci\u00f3n. Puede tomar cinco valores diferentes: ease (valor por defecto), linear, ease-in, ease-out, ease-in-out y cubic-bezier(cp1x, cp1y, cp2x, cp2y). Por ejemplo: 1 2 3 4 -webkit-transition-timing-function : linear ; -moz-transition-timing-function : linear ; -o-transition-timing-function : linear ; transition-timing-function : linear ; transition-delay: delay; - Permite establecer un retraso inicial antes de ejecutar la transici\u00f3n. El tiempo de retraso se debe de indicar en segundos (0.5s) o en milisegundos (500ms): 1 2 3 4 -webkit-transition-delay : 0 . 2s ; -moz-transition-delay : 0 . 2s ; -o-transition-delay : 0 . 2s ; transition-delay : 0 . 2s ; transition: propertyName duration timingFunction delay; - Tambi\u00e9n podemos indicar las cuatro propiedades explicadas en una sola l\u00ednea: 1 2 3 4 -webkit-transition : all 1s linear 0 . 2s ; -moz-transition : all 1s linear 0 . 2s ; -o-transition : all 1s linear 0 . 2s ; transition : all 1s linear 0 . 2s ; En general, lo mejor es declarar la transici\u00f3n en la propiedad base, sin pseudo-clases. De esta forma conseguiremos que se ejecute en ambas direcciones, por ejemplo: 1 2 3 4 5 6 7 8 9 10 . btn1 { background : #9c3 ; -webkit- transition : background 0.3 s ease ; -moz- transition : background 0.3 s ease ; -o- transition : background 0.3 s ease ; transition : background 0.3 s ease ; } . btn1 : hover { background : #690 ; }","title":"Transiciones"},{"location":"capitulo_css_adjuntar_una_hoja_de_estilo.html","text":"Adjuntar una hoja de estilo \u00b6 La informaci\u00f3n de estilo puede ser adjuntada de tres formas diferentes: Hoja de estilo externa : es una hoja de estilo que est\u00e1 almacenada en un archivo diferente al archivo HTML (por ejemplo llamado \"estilo.css\"). Esta es la manera de programar m\u00e1s potente y la que deberemos de utilizar por defecto, ya que separa completamente las reglas de estilo de la p\u00e1gina HTML y adem\u00e1s nos permite usar dicha hoja de estilo en todas las p\u00e1ginas HTML que queramos. La hoja de estilo debe de ser enlazada con el c\u00f3digo HTML de la forma: 1 2 3 4 5 6 < html > < head > < link rel = \"stylesheet\" type = \"text/css\" href = \"estilo.css\" /> ... </ head > ... Hoja de estilo interna : es una hoja de estilo que est\u00e1 incrustada dentro del documento HTML. En general, el motivo para usar una hoja de estilo interna, es cuando se quiere diferenciar con alg\u00fan estilo uno de los ficheros HTML de nuestra Web. Este c\u00f3digo debe de estar incluido en la secci\u00f3n de cabecera <head> y entre las etiquetas <style> . La forma de incluir el c\u00f3digo ser\u00eda de la forma: 1 2 3 4 5 6 7 < html > < head > < style type = \"text/css\" > H1 { color : blue ; text-align : center } </ style > </ head > ... Estilo en l\u00ednea (inline): es un m\u00e9todo para insertar los estilos CSS directamente dentro de una etiqueta HTML. Esta opci\u00f3n la usaremos \u00fanicamente cuando queramos aplicar un estilo sobre una \u00fanica etiqueta o un \u00fanico elemento. En cualquier otro caso usaremos alguna de las opciones anteriores, ya que si por ejemplo aplicamos un mismo estilo a muchas etiquetas usando esta opci\u00f3n y despu\u00e9s queremos cambiar algo de ese estilo tendr\u00edamos que cambiarlo en todas las etiquetas, mientras que si tenemos una hoja de estilo centralizada con un \u00fanico cambio ser\u00e1 suficiente. Para incluir un estilo en l\u00ednea o inline se usa el atributo style de la forma: 1 < h1 style = \"color:blue; text-align:center\" > ... </ h1 >","title":"Adjuntar una hoja de estilo"},{"location":"capitulo_css_adjuntar_una_hoja_de_estilo.html#adjuntar-una-hoja-de-estilo","text":"La informaci\u00f3n de estilo puede ser adjuntada de tres formas diferentes: Hoja de estilo externa : es una hoja de estilo que est\u00e1 almacenada en un archivo diferente al archivo HTML (por ejemplo llamado \"estilo.css\"). Esta es la manera de programar m\u00e1s potente y la que deberemos de utilizar por defecto, ya que separa completamente las reglas de estilo de la p\u00e1gina HTML y adem\u00e1s nos permite usar dicha hoja de estilo en todas las p\u00e1ginas HTML que queramos. La hoja de estilo debe de ser enlazada con el c\u00f3digo HTML de la forma: 1 2 3 4 5 6 < html > < head > < link rel = \"stylesheet\" type = \"text/css\" href = \"estilo.css\" /> ... </ head > ... Hoja de estilo interna : es una hoja de estilo que est\u00e1 incrustada dentro del documento HTML. En general, el motivo para usar una hoja de estilo interna, es cuando se quiere diferenciar con alg\u00fan estilo uno de los ficheros HTML de nuestra Web. Este c\u00f3digo debe de estar incluido en la secci\u00f3n de cabecera <head> y entre las etiquetas <style> . La forma de incluir el c\u00f3digo ser\u00eda de la forma: 1 2 3 4 5 6 7 < html > < head > < style type = \"text/css\" > H1 { color : blue ; text-align : center } </ style > </ head > ... Estilo en l\u00ednea (inline): es un m\u00e9todo para insertar los estilos CSS directamente dentro de una etiqueta HTML. Esta opci\u00f3n la usaremos \u00fanicamente cuando queramos aplicar un estilo sobre una \u00fanica etiqueta o un \u00fanico elemento. En cualquier otro caso usaremos alguna de las opciones anteriores, ya que si por ejemplo aplicamos un mismo estilo a muchas etiquetas usando esta opci\u00f3n y despu\u00e9s queremos cambiar algo de ese estilo tendr\u00edamos que cambiarlo en todas las etiquetas, mientras que si tenemos una hoja de estilo centralizada con un \u00fanico cambio ser\u00e1 suficiente. Para incluir un estilo en l\u00ednea o inline se usa el atributo style de la forma: 1 < h1 style = \"color:blue; text-align:center\" > ... </ h1 >","title":"Adjuntar una hoja de estilo"},{"location":"capitulo_css_capas.html","text":"Capas \u00b6 Normalmente la posici\u00f3n de los elementos de una p\u00e1gina es relativa , es decir, depende de los dem\u00e1s elementos de la p\u00e1gina. Por ejemplo, un p\u00e1rrafo estar\u00e1 m\u00e1s abajo si antes de \u00e9l hay m\u00e1s p\u00e1rrafos o elementos. Debido a esto, normalmente cuando se quer\u00eda colocar elementos en un sitio concreto, se recurr\u00eda al uso de tablas (invisibles, solo para estructurar). Con CSS podemos colocar los elementos en posici\u00f3n absoluta , es decir, indicando el tama\u00f1o y coordenadas exactas en las que queremos que se coloque. Para organizar la disposici\u00f3n en una Web con CSS se suele usar el elemento <div> . Adem\u00e1s se le suele dar un identificador \u00fanico a cada uno, mediante el cual, desde la hoja de estilo, podemos configurar su disposici\u00f3n. Tambi\u00e9n podemos colocar estos elementos con posici\u00f3n relativa a otro elemento que lo contenga, por ejemplo, un <div> dentro de otro. Es com\u00fan en el dise\u00f1o Web crear contenedores <div> generales en una posici\u00f3n absoluta o centrados en la p\u00e1gina, con un tama\u00f1o definido, los cuales se utilizar\u00e1n para contener y disponer el resto de elementos de nuestra Web. Estos otros elementos se pueden alinear de forma sencilla con una alineaci\u00f3n \"relativa\" a sus contenedores. Por ejemplo un contenedor para la cabecera que contenga un par de contenedores para la disposici\u00f3n de logotipo y el texto de cabecera. Distribuci\u00f3n \u00b6 Para indicar el tipo de distribuci\u00f3n o disposici\u00f3n de un elemento lo hacemos mediante el atributo \" position: valor \". El cual puede tomar los valores: absolute : La posici\u00f3n del elemento no depende de ninguna otra etiqueta. Esta posici\u00f3n se calcula desde la esquina superior izquierda de la p\u00e1gina. fixed : Al igual que el anterior la posici\u00f3n es absoluta, pero el elemento se queda fijo en el sitio al hacer \"scroll\". relative : Posici\u00f3n relativa a su elemento contenedor. Es la propiedad predeterminada. static : Al igual que el anterior la posici\u00f3n es relativa, pero no podemos redimensionar (por ejemplo) el objeto. Posici\u00f3n \u00b6 Para indicar la posici\u00f3n concreta de una capa utilizamos los atributos: top , bottom , left y right , de la forma: 1 2 top : < posici\u00f3n >; left : < posici\u00f3n >; Normalmente s\u00f3lo se utilizan un par de ellos, como top y left , o botton y right . La posici\u00f3n se especifica mediante unidades de CSS, como por ejemplo en \"px\", aunque tambi\u00e9n admite porcentajes. Un ejemplo de la definici\u00f3n de una capa ser\u00eda: 1 2 3 4 5 6 7 8 9 10 # micapa { position : absolute ; top : 200 px ; left : 150 px ; width : 175 px ; height : 175 px ; border : solid 1 px blue ; text-align : center ; color : gray ; } En nuestro documento HTML tendremos un elemento definido de la forma: <div id=\"micapa\"> ... </div> , dentro del cual colocaremos texto u otros elementos. La posici\u00f3n absoluta la podemos definir respecto a la ventana del navegador o de forma relativa a un elemento contenedor. En este segundo caso tenemos que indicar que la posici\u00f3n del elemento contenedor es relativa (o de otra forma no funcionar\u00e1). Orden \u00b6 A veces tenemos varias capas, unas por encima de otras, y queremos especificar un orden, para poder controlar las ocultaciones entre capas. Para esto usamos el z-index, de la forma: 1 z-index : < \u00edndice >; Las capas con un \u00edndice de Z-index mayor aparecer\u00e1n por encima de las capas con un z-index menor.","title":"Capas"},{"location":"capitulo_css_capas.html#capas","text":"Normalmente la posici\u00f3n de los elementos de una p\u00e1gina es relativa , es decir, depende de los dem\u00e1s elementos de la p\u00e1gina. Por ejemplo, un p\u00e1rrafo estar\u00e1 m\u00e1s abajo si antes de \u00e9l hay m\u00e1s p\u00e1rrafos o elementos. Debido a esto, normalmente cuando se quer\u00eda colocar elementos en un sitio concreto, se recurr\u00eda al uso de tablas (invisibles, solo para estructurar). Con CSS podemos colocar los elementos en posici\u00f3n absoluta , es decir, indicando el tama\u00f1o y coordenadas exactas en las que queremos que se coloque. Para organizar la disposici\u00f3n en una Web con CSS se suele usar el elemento <div> . Adem\u00e1s se le suele dar un identificador \u00fanico a cada uno, mediante el cual, desde la hoja de estilo, podemos configurar su disposici\u00f3n. Tambi\u00e9n podemos colocar estos elementos con posici\u00f3n relativa a otro elemento que lo contenga, por ejemplo, un <div> dentro de otro. Es com\u00fan en el dise\u00f1o Web crear contenedores <div> generales en una posici\u00f3n absoluta o centrados en la p\u00e1gina, con un tama\u00f1o definido, los cuales se utilizar\u00e1n para contener y disponer el resto de elementos de nuestra Web. Estos otros elementos se pueden alinear de forma sencilla con una alineaci\u00f3n \"relativa\" a sus contenedores. Por ejemplo un contenedor para la cabecera que contenga un par de contenedores para la disposici\u00f3n de logotipo y el texto de cabecera.","title":"Capas"},{"location":"capitulo_css_capas.html#distribucion","text":"Para indicar el tipo de distribuci\u00f3n o disposici\u00f3n de un elemento lo hacemos mediante el atributo \" position: valor \". El cual puede tomar los valores: absolute : La posici\u00f3n del elemento no depende de ninguna otra etiqueta. Esta posici\u00f3n se calcula desde la esquina superior izquierda de la p\u00e1gina. fixed : Al igual que el anterior la posici\u00f3n es absoluta, pero el elemento se queda fijo en el sitio al hacer \"scroll\". relative : Posici\u00f3n relativa a su elemento contenedor. Es la propiedad predeterminada. static : Al igual que el anterior la posici\u00f3n es relativa, pero no podemos redimensionar (por ejemplo) el objeto.","title":"Distribuci\u00f3n"},{"location":"capitulo_css_capas.html#posicion","text":"Para indicar la posici\u00f3n concreta de una capa utilizamos los atributos: top , bottom , left y right , de la forma: 1 2 top : < posici\u00f3n >; left : < posici\u00f3n >; Normalmente s\u00f3lo se utilizan un par de ellos, como top y left , o botton y right . La posici\u00f3n se especifica mediante unidades de CSS, como por ejemplo en \"px\", aunque tambi\u00e9n admite porcentajes. Un ejemplo de la definici\u00f3n de una capa ser\u00eda: 1 2 3 4 5 6 7 8 9 10 # micapa { position : absolute ; top : 200 px ; left : 150 px ; width : 175 px ; height : 175 px ; border : solid 1 px blue ; text-align : center ; color : gray ; } En nuestro documento HTML tendremos un elemento definido de la forma: <div id=\"micapa\"> ... </div> , dentro del cual colocaremos texto u otros elementos. La posici\u00f3n absoluta la podemos definir respecto a la ventana del navegador o de forma relativa a un elemento contenedor. En este segundo caso tenemos que indicar que la posici\u00f3n del elemento contenedor es relativa (o de otra forma no funcionar\u00e1).","title":"Posici\u00f3n"},{"location":"capitulo_css_capas.html#orden","text":"A veces tenemos varias capas, unas por encima de otras, y queremos especificar un orden, para poder controlar las ocultaciones entre capas. Para esto usamos el z-index, de la forma: 1 z-index : < \u00edndice >; Las capas con un \u00edndice de Z-index mayor aparecer\u00e1n por encima de las capas con un z-index menor.","title":"Orden"},{"location":"capitulo_css_definicion_de_estilos.html","text":"Definici\u00f3n de estilos para etiquetas HTML \u00b6 Si lo que queremos es dar formato o redefinir una etiqueta HTML existente, usar\u00edamos la sintaxis: 1 2 3 4 5 etiqueta { estilo CSS 1 ; estilo CSS 2 ; ... } En \"etiqueta\" pondr\u00edamos el nombre de la etiqueta (por ejemplo \" h1 \", \" p \", etc. pero sin los signos < > ) y los estilos que definir\u00edan esa etiqueta ir\u00edan encerrados entre las llaves \" {...} \". Por ejemplo: 1 2 3 4 5 h1 { estilo CSS 1 ; estilo CSS 2 ; ... } Comentarios \u00b6 En las hojas de estilo tambi\u00e9n se pueden escribir comentarios usando los s\u00edmbolos: /* texto del comentario */ . Pero es importante usar esta notaci\u00f3n y no ninguna otra, ya que es la \u00fanica soportada. A continuaci\u00f3n se incluye un ejemplo con comentarios: 1 2 3 4 5 6 7 /* Definimos el estilo de la cabecera principal */ h1 { estilo CSS 1 ; /* Cambiamos el estilo de su... */ /* Tambi\u00e9n cambiamos este otro estilo porque... */ estilo CSS 2 ; } Definici\u00f3n de varios estilos a la vez \u00b6 Tambi\u00e9n podemos redefinir varias etiquetas a la vez que compartir\u00e1n los mismos estilos, separ\u00e1ndolas por comas, de la forma: 1 2 3 etiqueta1 , etiqueta2 , etiqueta3 { /* estilos CSS */ } En esta secci\u00f3n y la siguiente nos centraremos las cabeceras de los estilos y dejaremos los estilos CSS que podemos utilizar para la secci\u00f3n \"estilos CSS b\u00e1sicos\" y siguientes. Por este motivo escribiremos /* estilos CSS */ en el lugar donde ir\u00e1n los estilos que definir\u00e1 la etiqueta. Imaginad por ejemplo que quer\u00e9is cambiar el color de todas las cabeceras, lo pod\u00e9is hacer a la vez escribiendo: 1 2 3 h1 , h2 , h3 , h4 , h5 , h6 { /* estilos CSS */ } Estilos anidados \u00b6 Otra opci\u00f3n interesante es definir el estilo de etiquetas \"dentro\" de otras etiquetas. Para esto tenemos que escribir primero la etiqueta contendora, seguida de un espacio y por \u00faltimo la etiqueta a definir. En este caso el estilo CSS solo se aplicar\u00e1 cuando la etiqueta definida se encuentre dentro de la etiqueta contenedora : 1 2 3 contenedor etiqueta { /* estilos CSS */ } Por ejemplo, una etiqueta <span> dentro de una secci\u00f3n <p> : 1 2 3 p span { /* estilos CSS */ } Este estilo solo se aplicar\u00eda cuando se encuentre la etiqueta <span> dentro de una secci\u00f3n <p> de la forma: 1 2 3 4 5 < p > P\u00e1rrafo de ejemplo donde < span > el estilo solo se aplicar\u00e1 sobre este texto </ span > y no sobre el resto del texto. </ p > Esta opci\u00f3n es muy \u00fatil pues nos permitir\u00e1 definir diferentes estilos para la misma etiqueta dependiendo de donde se encuentre.","title":"Definici\u00f3n de estilos para etiquetas HTML"},{"location":"capitulo_css_definicion_de_estilos.html#definicion-de-estilos-para-etiquetas-html","text":"Si lo que queremos es dar formato o redefinir una etiqueta HTML existente, usar\u00edamos la sintaxis: 1 2 3 4 5 etiqueta { estilo CSS 1 ; estilo CSS 2 ; ... } En \"etiqueta\" pondr\u00edamos el nombre de la etiqueta (por ejemplo \" h1 \", \" p \", etc. pero sin los signos < > ) y los estilos que definir\u00edan esa etiqueta ir\u00edan encerrados entre las llaves \" {...} \". Por ejemplo: 1 2 3 4 5 h1 { estilo CSS 1 ; estilo CSS 2 ; ... }","title":"Definici\u00f3n de estilos para etiquetas HTML"},{"location":"capitulo_css_definicion_de_estilos.html#comentarios","text":"En las hojas de estilo tambi\u00e9n se pueden escribir comentarios usando los s\u00edmbolos: /* texto del comentario */ . Pero es importante usar esta notaci\u00f3n y no ninguna otra, ya que es la \u00fanica soportada. A continuaci\u00f3n se incluye un ejemplo con comentarios: 1 2 3 4 5 6 7 /* Definimos el estilo de la cabecera principal */ h1 { estilo CSS 1 ; /* Cambiamos el estilo de su... */ /* Tambi\u00e9n cambiamos este otro estilo porque... */ estilo CSS 2 ; }","title":"Comentarios"},{"location":"capitulo_css_definicion_de_estilos.html#definicion-de-varios-estilos-a-la-vez","text":"Tambi\u00e9n podemos redefinir varias etiquetas a la vez que compartir\u00e1n los mismos estilos, separ\u00e1ndolas por comas, de la forma: 1 2 3 etiqueta1 , etiqueta2 , etiqueta3 { /* estilos CSS */ } En esta secci\u00f3n y la siguiente nos centraremos las cabeceras de los estilos y dejaremos los estilos CSS que podemos utilizar para la secci\u00f3n \"estilos CSS b\u00e1sicos\" y siguientes. Por este motivo escribiremos /* estilos CSS */ en el lugar donde ir\u00e1n los estilos que definir\u00e1 la etiqueta. Imaginad por ejemplo que quer\u00e9is cambiar el color de todas las cabeceras, lo pod\u00e9is hacer a la vez escribiendo: 1 2 3 h1 , h2 , h3 , h4 , h5 , h6 { /* estilos CSS */ }","title":"Definici\u00f3n de varios estilos a la vez"},{"location":"capitulo_css_definicion_de_estilos.html#estilos-anidados","text":"Otra opci\u00f3n interesante es definir el estilo de etiquetas \"dentro\" de otras etiquetas. Para esto tenemos que escribir primero la etiqueta contendora, seguida de un espacio y por \u00faltimo la etiqueta a definir. En este caso el estilo CSS solo se aplicar\u00e1 cuando la etiqueta definida se encuentre dentro de la etiqueta contenedora : 1 2 3 contenedor etiqueta { /* estilos CSS */ } Por ejemplo, una etiqueta <span> dentro de una secci\u00f3n <p> : 1 2 3 p span { /* estilos CSS */ } Este estilo solo se aplicar\u00eda cuando se encuentre la etiqueta <span> dentro de una secci\u00f3n <p> de la forma: 1 2 3 4 5 < p > P\u00e1rrafo de ejemplo donde < span > el estilo solo se aplicar\u00e1 sobre este texto </ span > y no sobre el resto del texto. </ p > Esta opci\u00f3n es muy \u00fatil pues nos permitir\u00e1 definir diferentes estilos para la misma etiqueta dependiendo de donde se encuentre.","title":"Estilos anidados"},{"location":"capitulo_css_ejemplo.html","text":"Ejemplo \u00b6 En esta secci\u00f3n se incluye un ejemplo m\u00e1s completo de una peque\u00f1a p\u00e1gina web HTML a la que se le han aplicado estilos definidos en una secci\u00f3n style interna adem\u00e1s de algunos estilos inline . En la siguiente imagen se incluye una captura de la apariencia final del c\u00f3digo de ejemplo. Como se puede ver la web consta de una cabecera, un men\u00fa lateral, una secci\u00f3n principal de contenido y un pie de p\u00e1gina: A continuaci\u00f3n se incluye el c\u00f3digo HTML y CSS utilizado para componer la web de ejemplo. En primer lugar, en la secci\u00f3n de cabecera ( head ), se ha incluido una secci\u00f3n de estilos entre las etiquetas style . En la secci\u00f3n body se incluye todo el c\u00f3digo HTML que define la p\u00e1gina con los estilos aplicados: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < head > < title > Ejemplo </ title > < style type = \"text/css\" > body { /* Redefinimos la etiqueta body */ padding : 0 px ; margin : 0 px ; font-family : arial , helvetica ; width : 900 px ; margin : 0 auto ; } h1 , h2 { /* Redefinimos las etiquetas de cabecera */ color : navy ; } # header { /* Estilo para la cabecera usando su identificador */ padding : 15 px 20 px ; background-color : #E3DAFF ; border-bottom : 1 px solid silver ; } # sidebar { float : left ; width : 15 % ; } # article { float : left ; width : 80 % ; } # footer { clear : both ; text-align : center ; border-top : 1 px solid silver ; font-size : small ; color : gray ; background-color : #E3DAFF ; padding : 20 px ; } # sidebar a { /* Estilo para los enlaces de la barra lateral */ text-transform : uppercase ; text-decoration : none ; padding : 10 px 5 px ; display : block ; } # sidebar a : hover { /* Pseudo-clase para los enlaces */ background-color : navy ; color : white ; } # article p { line-height : 20 pt ; } . nota { /* Definimos la clase .nota */ background-color : yellow ; } . alineado-derecha { /* Definimos la clase .alineado-derecha */ text-align : right ; } </ style > </ head > < body > < div id = \"header\" > < h1 > Web de ejemplo </ h1 > </ div > < div id = \"content\" > < div id = \"sidebar\" style = \"padding-top: 15px\" > < a href = \"#\" > Menu 1 </ a > < a href = \"#\" > Menu 2 </ a > < a href = \"#\" > Menu 3 </ a > < a href = \"#\" > Menu 4 </ a > < a href = \"#\" > Menu 5 </ a > </ div > < div id = \"article\" > < h2 > Contenidos </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. </ p > < p > Ut enim ad minim veniam, quis nostrud exercitation ullamco < span style = \"font-weight:bold; color:red\" > laboris nisi ut aliquip ex ea commodo consequat </ span > . </ p > < p > Duis aute irure dolor in reprehenderit in voluptate < span class = \"nota\" > velit esse cillum dolore eu fugiat nulla pariatur </ span > . </ p > < br /> < p class = \"alineado-derecha\" > Excepteur sint occaecat cupidatat non proident, < br /> sunt in culpa qui officia deserunt mollit anim id est laborum. </ p > </ div > </ div > < div id = \"footer\" > Web de ejemplo </ div > </ body > </ html >","title":"Ejemplo de uso"},{"location":"capitulo_css_ejemplo.html#ejemplo","text":"En esta secci\u00f3n se incluye un ejemplo m\u00e1s completo de una peque\u00f1a p\u00e1gina web HTML a la que se le han aplicado estilos definidos en una secci\u00f3n style interna adem\u00e1s de algunos estilos inline . En la siguiente imagen se incluye una captura de la apariencia final del c\u00f3digo de ejemplo. Como se puede ver la web consta de una cabecera, un men\u00fa lateral, una secci\u00f3n principal de contenido y un pie de p\u00e1gina: A continuaci\u00f3n se incluye el c\u00f3digo HTML y CSS utilizado para componer la web de ejemplo. En primer lugar, en la secci\u00f3n de cabecera ( head ), se ha incluido una secci\u00f3n de estilos entre las etiquetas style . En la secci\u00f3n body se incluye todo el c\u00f3digo HTML que define la p\u00e1gina con los estilos aplicados: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < head > < title > Ejemplo </ title > < style type = \"text/css\" > body { /* Redefinimos la etiqueta body */ padding : 0 px ; margin : 0 px ; font-family : arial , helvetica ; width : 900 px ; margin : 0 auto ; } h1 , h2 { /* Redefinimos las etiquetas de cabecera */ color : navy ; } # header { /* Estilo para la cabecera usando su identificador */ padding : 15 px 20 px ; background-color : #E3DAFF ; border-bottom : 1 px solid silver ; } # sidebar { float : left ; width : 15 % ; } # article { float : left ; width : 80 % ; } # footer { clear : both ; text-align : center ; border-top : 1 px solid silver ; font-size : small ; color : gray ; background-color : #E3DAFF ; padding : 20 px ; } # sidebar a { /* Estilo para los enlaces de la barra lateral */ text-transform : uppercase ; text-decoration : none ; padding : 10 px 5 px ; display : block ; } # sidebar a : hover { /* Pseudo-clase para los enlaces */ background-color : navy ; color : white ; } # article p { line-height : 20 pt ; } . nota { /* Definimos la clase .nota */ background-color : yellow ; } . alineado-derecha { /* Definimos la clase .alineado-derecha */ text-align : right ; } </ style > </ head > < body > < div id = \"header\" > < h1 > Web de ejemplo </ h1 > </ div > < div id = \"content\" > < div id = \"sidebar\" style = \"padding-top: 15px\" > < a href = \"#\" > Menu 1 </ a > < a href = \"#\" > Menu 2 </ a > < a href = \"#\" > Menu 3 </ a > < a href = \"#\" > Menu 4 </ a > < a href = \"#\" > Menu 5 </ a > </ div > < div id = \"article\" > < h2 > Contenidos </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. </ p > < p > Ut enim ad minim veniam, quis nostrud exercitation ullamco < span style = \"font-weight:bold; color:red\" > laboris nisi ut aliquip ex ea commodo consequat </ span > . </ p > < p > Duis aute irure dolor in reprehenderit in voluptate < span class = \"nota\" > velit esse cillum dolore eu fugiat nulla pariatur </ span > . </ p > < br /> < p class = \"alineado-derecha\" > Excepteur sint occaecat cupidatat non proident, < br /> sunt in culpa qui officia deserunt mollit anim id est laborum. </ p > </ div > </ div > < div id = \"footer\" > Web de ejemplo </ div > </ body > </ html >","title":"Ejemplo"},{"location":"capitulo_css_estilos_basicos.html","text":"Estilos CSS b\u00e1sicos \u00b6 La sintaxis b\u00e1sica para definir un estilo es: 1 atributo : valor ; Los diferentes estilos siempre se separan con punto y coma (;), y despu\u00e9s del nombre se pone dos puntos (y no un igual \"=\", que es un error t\u00edpico al confundirse con el HTML). Por ejemplo, si queremos definir una clase que aplique tres estilos usar\u00edamos la notaci\u00f3n: 1 2 3 4 5 . estilo_de_ejemplo { atributo : valor ; atributo : valor ; atributo : valor ; } Es importante usar esta notaci\u00f3n correctamente ya que si se nos olvida el punto y coma (;) o no ponemos los dos puntos (:) los estilos no funcionar\u00e1n. Muchos de los valores que podemos aplicar a un atributo de estilo tendr\u00e1n unidades de medida , por ejemplo, el valor del tama\u00f1o de un margen o el tama\u00f1o de la fuente. Las unidades de medida que podemos utilizar son: pixels (px) puntos (pt) cent\u00edmetros (cm) pulgadas (in) A continuaci\u00f3n se incluye un resumen de los principales estilos CSS y los valores que se les pueden aplicar a los siguientes elementos: Estilos para textos Estilos para p\u00e1rrafos Estilos para fondos Estilos para cajas","title":"Sintaxis b\u00e1sica"},{"location":"capitulo_css_estilos_basicos.html#estilos-css-basicos","text":"La sintaxis b\u00e1sica para definir un estilo es: 1 atributo : valor ; Los diferentes estilos siempre se separan con punto y coma (;), y despu\u00e9s del nombre se pone dos puntos (y no un igual \"=\", que es un error t\u00edpico al confundirse con el HTML). Por ejemplo, si queremos definir una clase que aplique tres estilos usar\u00edamos la notaci\u00f3n: 1 2 3 4 5 . estilo_de_ejemplo { atributo : valor ; atributo : valor ; atributo : valor ; } Es importante usar esta notaci\u00f3n correctamente ya que si se nos olvida el punto y coma (;) o no ponemos los dos puntos (:) los estilos no funcionar\u00e1n. Muchos de los valores que podemos aplicar a un atributo de estilo tendr\u00e1n unidades de medida , por ejemplo, el valor del tama\u00f1o de un margen o el tama\u00f1o de la fuente. Las unidades de medida que podemos utilizar son: pixels (px) puntos (pt) cent\u00edmetros (cm) pulgadas (in) A continuaci\u00f3n se incluye un resumen de los principales estilos CSS y los valores que se les pueden aplicar a los siguientes elementos: Estilos para textos Estilos para p\u00e1rrafos Estilos para fondos Estilos para cajas","title":"Estilos CSS b\u00e1sicos"},{"location":"capitulo_css_estilos_para_cajas.html","text":"Estilos para cajas \u00b6 ( <div> o <table> ) width: Unidades CSS | Porcentaje height: Unidades CSS | Porcentaje Ejemplos : width: 50px; width: 100%; height: 15px; Permiten indicar el ancho y altura de un elemento. Se pueden aplicar sobre muchos elementos, como tablas, etiquetas div, im\u00e1genes, p\u00e1rrafos \"p\", etc. Con algunas etiquetas no funciona, tampoco sirve para indicar espaciado (padding), bordes o m\u00e1rgenes. margin-left: Unidades CSS Ejemplos : margin-left: 1cm; margin-left: 0,5in; Indica el tama\u00f1o del margen izquierdo. margin-right: Unidades CSS Ejemplos : margin-right: 5%; margin-right: 1in; Define el tama\u00f1o del margen derecho. margin-top: Unidades CSS Ejemplos : margin-top: 0px; margin-top: 10px; Indica el tama\u00f1o del margen superior. margin-bottom: Unidades CSS Ejemplos : margin-bottom: 0pt; margin-top: 1px; Indica el tama\u00f1o del margen inferior. margin: <arriba> <derecha> <abajo> <izquierda> | <arriba> <derecha> <abajo> | <arriba-abajo> <izquierda-derecha> | <los 4 m\u00e1rgenes> Ejemplos : margin: 4px 2px 1px 2px; margin: 4px; Tambi\u00e9n podemos utilizar el estilo \"margin\" para indicar todos los m\u00e1rgenes a la vez, esta etiqueta nos permite indicarle desde 4 valores (para cada uno de los m\u00e1rgenes), hasta 1 valor (para aplicarlo sobre todos los m\u00e1rgenes). padding-left: Unidades CSS Ejemplos : padding-left: 0.5in; padding-left: 1px; Indica el espacio insertado, por la izquierda, entre el borde del elemento-continente y el contenido de este. Es parecido a el atributo cellpadding de las tablas. El espacio insertado tiene el mismo fondo que el fondo del elemento-continente. padding-right: Unidades CSS Ejemplos : padding-right: 0.5cm; padding-right: 1pt; Indica el espacio insertado, en este caso por la derecha, entre el borde del elemento-continente y el contenido de este. Es parecido a el atributo cellpadding de las tablas. El espacio insertado tiene el mismo fondo que el fondo del elemento-continente. padding-top: Unidades CSS Ejemplos : padding-top: 10pt; padding-top: 5px; Indica el espacio insertado, por arriba, entre el borde del elemento-continente y el contenido de este. padding-bottom: Unidades CSS Ejemplos : padding-bottom: 0.5cm; padding-bottom: 1pt; Indica el espacio insertado, en este caso por abajo, entre el borde del elemento-continente y el contenido de este. padding: <arriba> <derecha> <abajo> <izquierda> | <arriba> <derecha> <abajo> | <arriba-abajo> <izquierda-derecha> | <los 4 m\u00e1rgenes> Ejemplos : padding: 4px 2px 1px 2px; padding: 4px; Al igual que para \"margin\", esta etiqueta nos permite indicarle desde 4 valores (espaciado hasta cada uno de los bordes por separado), hasta 1 valor (para indicar el mismo espaciado hasta todos los bordes). border-color: color RGB o nombre de color Ejemplos : border-color: red; border-color: #ffccff; Para indicar el color del borde del elemento de la p\u00e1gina al que se lo aplicamos. Se puede poner colores por separado con los atributos border-top-color, border-right-color, border-bottom-color, border-left-color. border-style: none | dotted | solid | double | groove | ridge | inset | outset Ejemplos : border-style: solid; border-style: double; El estilo del borde, los valores significan: none=ning\u00fan borde, dotted=punteado, solid=solido, double=doble borde, desde groove hasta outset son bordes con varios efectos 3D. border-width: Unidades CSS Ejemplos : border-width: 10px; border-width: 0.5in; El tama\u00f1o del borde del elemento al que lo aplicamos. border: <grosor> <tipo> <color> Ejemplo : border: 2px solid red; De esta forma podemos indicar las tres propiedades del borde a la vez. Tambi\u00e9n podemos utilizar border-top, border-right, border-bottom y border-left para indicar estas tres propiedades para un borde en concreto. float: none | left | right Ejemplo : float: right; Sirve para alinear un elemento a la izquierda o la derecha haciendo que el texto se agrupe alrededor de dicho elemento. clear: none | both | right | left Ejemplo : clear: right; Indica que no se permiten elementos por ese lado del objeto. Por ejemplo, si tenemos varias cajas una a continuaci\u00f3n de otra, al poner \"clear:left\" en la \u00faltima caja, esta pasar\u00eda a la siguiente l\u00ednea. En la siguiente imagen se puede ver un esquema de un contenedor DIV en el que se representa la diferencia entre margin , padding y border :","title":"Estilos para cajas"},{"location":"capitulo_css_estilos_para_cajas.html#estilos-para-cajas","text":"( <div> o <table> ) width: Unidades CSS | Porcentaje height: Unidades CSS | Porcentaje Ejemplos : width: 50px; width: 100%; height: 15px; Permiten indicar el ancho y altura de un elemento. Se pueden aplicar sobre muchos elementos, como tablas, etiquetas div, im\u00e1genes, p\u00e1rrafos \"p\", etc. Con algunas etiquetas no funciona, tampoco sirve para indicar espaciado (padding), bordes o m\u00e1rgenes. margin-left: Unidades CSS Ejemplos : margin-left: 1cm; margin-left: 0,5in; Indica el tama\u00f1o del margen izquierdo. margin-right: Unidades CSS Ejemplos : margin-right: 5%; margin-right: 1in; Define el tama\u00f1o del margen derecho. margin-top: Unidades CSS Ejemplos : margin-top: 0px; margin-top: 10px; Indica el tama\u00f1o del margen superior. margin-bottom: Unidades CSS Ejemplos : margin-bottom: 0pt; margin-top: 1px; Indica el tama\u00f1o del margen inferior. margin: <arriba> <derecha> <abajo> <izquierda> | <arriba> <derecha> <abajo> | <arriba-abajo> <izquierda-derecha> | <los 4 m\u00e1rgenes> Ejemplos : margin: 4px 2px 1px 2px; margin: 4px; Tambi\u00e9n podemos utilizar el estilo \"margin\" para indicar todos los m\u00e1rgenes a la vez, esta etiqueta nos permite indicarle desde 4 valores (para cada uno de los m\u00e1rgenes), hasta 1 valor (para aplicarlo sobre todos los m\u00e1rgenes). padding-left: Unidades CSS Ejemplos : padding-left: 0.5in; padding-left: 1px; Indica el espacio insertado, por la izquierda, entre el borde del elemento-continente y el contenido de este. Es parecido a el atributo cellpadding de las tablas. El espacio insertado tiene el mismo fondo que el fondo del elemento-continente. padding-right: Unidades CSS Ejemplos : padding-right: 0.5cm; padding-right: 1pt; Indica el espacio insertado, en este caso por la derecha, entre el borde del elemento-continente y el contenido de este. Es parecido a el atributo cellpadding de las tablas. El espacio insertado tiene el mismo fondo que el fondo del elemento-continente. padding-top: Unidades CSS Ejemplos : padding-top: 10pt; padding-top: 5px; Indica el espacio insertado, por arriba, entre el borde del elemento-continente y el contenido de este. padding-bottom: Unidades CSS Ejemplos : padding-bottom: 0.5cm; padding-bottom: 1pt; Indica el espacio insertado, en este caso por abajo, entre el borde del elemento-continente y el contenido de este. padding: <arriba> <derecha> <abajo> <izquierda> | <arriba> <derecha> <abajo> | <arriba-abajo> <izquierda-derecha> | <los 4 m\u00e1rgenes> Ejemplos : padding: 4px 2px 1px 2px; padding: 4px; Al igual que para \"margin\", esta etiqueta nos permite indicarle desde 4 valores (espaciado hasta cada uno de los bordes por separado), hasta 1 valor (para indicar el mismo espaciado hasta todos los bordes). border-color: color RGB o nombre de color Ejemplos : border-color: red; border-color: #ffccff; Para indicar el color del borde del elemento de la p\u00e1gina al que se lo aplicamos. Se puede poner colores por separado con los atributos border-top-color, border-right-color, border-bottom-color, border-left-color. border-style: none | dotted | solid | double | groove | ridge | inset | outset Ejemplos : border-style: solid; border-style: double; El estilo del borde, los valores significan: none=ning\u00fan borde, dotted=punteado, solid=solido, double=doble borde, desde groove hasta outset son bordes con varios efectos 3D. border-width: Unidades CSS Ejemplos : border-width: 10px; border-width: 0.5in; El tama\u00f1o del borde del elemento al que lo aplicamos. border: <grosor> <tipo> <color> Ejemplo : border: 2px solid red; De esta forma podemos indicar las tres propiedades del borde a la vez. Tambi\u00e9n podemos utilizar border-top, border-right, border-bottom y border-left para indicar estas tres propiedades para un borde en concreto. float: none | left | right Ejemplo : float: right; Sirve para alinear un elemento a la izquierda o la derecha haciendo que el texto se agrupe alrededor de dicho elemento. clear: none | both | right | left Ejemplo : clear: right; Indica que no se permiten elementos por ese lado del objeto. Por ejemplo, si tenemos varias cajas una a continuaci\u00f3n de otra, al poner \"clear:left\" en la \u00faltima caja, esta pasar\u00eda a la siguiente l\u00ednea. En la siguiente imagen se puede ver un esquema de un contenedor DIV en el que se representa la diferencia entre margin , padding y border :","title":"Estilos para cajas"},{"location":"capitulo_css_estilos_para_fondos.html","text":"Estilos para fondos \u00b6 background-color: Un color, con su nombre o su valor RGB Ejemplos : background-color: green; background-color: #000055; Sirve para indicar el color de fondo de un elemento de la p\u00e1gina. background-image: El nombre de la imagen con su camino relativo o absoluto Ejemplos : background-image: url(m\u00e1rmol.gif); background-image: url(http://www.url.com/fondo.gif) Permite colocar una imagen de fondo en cualquier elemento de la p\u00e1gina.","title":"Estilos para fondos"},{"location":"capitulo_css_estilos_para_fondos.html#estilos-para-fondos","text":"background-color: Un color, con su nombre o su valor RGB Ejemplos : background-color: green; background-color: #000055; Sirve para indicar el color de fondo de un elemento de la p\u00e1gina. background-image: El nombre de la imagen con su camino relativo o absoluto Ejemplos : background-image: url(m\u00e1rmol.gif); background-image: url(http://www.url.com/fondo.gif) Permite colocar una imagen de fondo en cualquier elemento de la p\u00e1gina.","title":"Estilos para fondos"},{"location":"capitulo_css_estilos_para_parrafos.html","text":"Estilos para p\u00e1rrafos \u00b6 Los estilos para p\u00e1rrafos nos permiten cambiar propiedades de todo un p\u00e1rrafo o bloque de texto, como por ejemplo el espaciado entre las l\u00edneas, la alineaci\u00f3n, etc. line-height: normal | unidades CSS Ejemplos : line-height: 12px; line-height: normal; El alto de una l\u00ednea, y por tanto, el espaciado entre l\u00edneas. Es una de esas caracter\u00edsticas que no se pod\u00edan modificar utilizando HTML. text-align: left | right | center | justify Ejemplos : text-align: right; text-align: center; Sirve para indicar la alineaci\u00f3n del texto. Es interesante destacar que las hojas de estilo permiten el justificado de texto, aunque recuerda que no tiene por que funcionar en todos los sistemas. text-indent: Unidades CSS Ejemplos : text-indent: 10px; text-indent: 2in; Un atributo que sirve para hacer sangrado o m\u00e1rgenes en las p\u00e1ginas. Ejemplos \u00b6 Para alinear el texto de un p\u00e1rrafo a la derecha podemos utilizar: 1 2 3 < p style = \"text-align:right\" > Texto alineado a la derecha </ p > En este otro ejemplo vamos a colocar un texto centrado, con un interlineado mayor, con el texto en cursiva y gris. Adem\u00e1s definiremos la hoja de estilo en la cabecera de la p\u00e1gina: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" /> < style type = \"text/css\" > h1 { color : #222 ; text-align : center ; } . poema { text-align : center ; font-style : italic ; line-height : 30 pt ; font-size : 12 pt ; color : #222 ; } . autor { font-weight : bold ; color : gray ; font-size : 10 pt ; text-align : center ; } </ style > </ head > < body > < h1 > Me gusta cuando callas </ h1 > < p class = \"poema\" > Me gustas cuando callas porque est\u00e1s como ausente, < br /> y me oyes desde lejos, y mi voz no te toca. < br /> Parece que los ojos se te hubieran volado < br /> y parece que un beso te cerrara la boca. </ p > < br /> < p class = \"autor\" > Pablo Neruda </ p > </ body > </ html > Con lo que obtendr\u00edamos un resultado similar al siguiente:","title":"Estilos para p\u00e1rrafos"},{"location":"capitulo_css_estilos_para_parrafos.html#estilos-para-parrafos","text":"Los estilos para p\u00e1rrafos nos permiten cambiar propiedades de todo un p\u00e1rrafo o bloque de texto, como por ejemplo el espaciado entre las l\u00edneas, la alineaci\u00f3n, etc. line-height: normal | unidades CSS Ejemplos : line-height: 12px; line-height: normal; El alto de una l\u00ednea, y por tanto, el espaciado entre l\u00edneas. Es una de esas caracter\u00edsticas que no se pod\u00edan modificar utilizando HTML. text-align: left | right | center | justify Ejemplos : text-align: right; text-align: center; Sirve para indicar la alineaci\u00f3n del texto. Es interesante destacar que las hojas de estilo permiten el justificado de texto, aunque recuerda que no tiene por que funcionar en todos los sistemas. text-indent: Unidades CSS Ejemplos : text-indent: 10px; text-indent: 2in; Un atributo que sirve para hacer sangrado o m\u00e1rgenes en las p\u00e1ginas.","title":"Estilos para p\u00e1rrafos"},{"location":"capitulo_css_estilos_para_parrafos.html#ejemplos","text":"Para alinear el texto de un p\u00e1rrafo a la derecha podemos utilizar: 1 2 3 < p style = \"text-align:right\" > Texto alineado a la derecha </ p > En este otro ejemplo vamos a colocar un texto centrado, con un interlineado mayor, con el texto en cursiva y gris. Adem\u00e1s definiremos la hoja de estilo en la cabecera de la p\u00e1gina: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" /> < style type = \"text/css\" > h1 { color : #222 ; text-align : center ; } . poema { text-align : center ; font-style : italic ; line-height : 30 pt ; font-size : 12 pt ; color : #222 ; } . autor { font-weight : bold ; color : gray ; font-size : 10 pt ; text-align : center ; } </ style > </ head > < body > < h1 > Me gusta cuando callas </ h1 > < p class = \"poema\" > Me gustas cuando callas porque est\u00e1s como ausente, < br /> y me oyes desde lejos, y mi voz no te toca. < br /> Parece que los ojos se te hubieran volado < br /> y parece que un beso te cerrara la boca. </ p > < br /> < p class = \"autor\" > Pablo Neruda </ p > </ body > </ html > Con lo que obtendr\u00edamos un resultado similar al siguiente:","title":"Ejemplos"},{"location":"capitulo_css_estilos_para_textos.html","text":"Estilos para textos \u00b6 En esta secci\u00f3n se describen los principales estilos CSS que podemos utilizar para cambiar la apariencia de los textos de una Web. Para cada uno de ellos se indica el nombre del atributo, los posibles valores que le podemos asignar, algunos ejemplos y una explicaci\u00f3n de uso. color: valor RGB o nombre de color Ejemplos : color: #009900; color: red; Sirve para indicar el color del texto. Lo admiten casi todas las etiquetas de HTML. No todos los nombres de colores son admitidos en el est\u00e1ndar, es aconsejable entonces utilizar el valor RGB. Algunos de los principales nombres de colores son: white, black, gray, blue, red, green o yellow, para m\u00e1s nombres podemos consultar la direcci\u00f3n \" http://www.w3schools.com/cssref/css_colornames.asp \". font-size: xx-small|x-small|small|medium|large|x-large|xx-large|Unidades CSS Ejemplos : font-size: 12pt; font-size: x-large; Sirve para indicar el tama\u00f1o de las fuentes de manera m\u00e1s r\u00edgida y con mayor exactitud. font-family: serif | sans-serif | cursive | fantasy | monospace | Etc. Ejemplos : font-family: arial,helvetica; font-family: fantasy; Con este atributo indicamos la familia de tipograf\u00eda del texto. Los primeros valores son gen\u00e9ricos (serif, sans-serif, etc.), es decir, los navegadores las comprenden y utilizan las fuentes que el usuario tenga en su sistema. Tambi\u00e9n se pueden definir con tipograf\u00edas normales. Si el nombre de una fuente tiene espacios se utilizan comillas para que se entienda bien. font-weight: normal | bold | bolder | lighter | 100 | 200 | 300 | ... | 900 Ejemplos : font-weight: bold; font-weight: 200; Sirve para definir la anchura de los caracteres, o dicho de otra manera, para poner negrita con total libertad. Normal y 400 son el mismo valor, as\u00ed como bold y 700. font-style: normal | italic | oblique Ejemplos : font-style: normal; font-style: italic; Es el estilo de la fuente, que puede ser normal, it\u00e1lica u oblicua. El estilo \"oblique\" es similar al \"italic\". text-decoration: none | underline | overline | line-through Ejemplos : text-decoration: none; text-decoration: underline; Establece la decoraci\u00f3n de un texto, si est\u00e1 subrayado, sobre-rayado o tachado. text-transform: capitalize | uppercase | lowercase | none Ejemplos : text-transform: none; text-transform: capitalize; Nos permite transformar el texto, para que tenga la primera letra en may\u00fasculas de todas las palabras, o todo en may\u00fasculas o min\u00fasculas. Ejemplos \u00b6 Por ejemplo, para definir un p\u00e1rrafo en negrita, cursiva y adem\u00e1s cambiar el color podemos definir estos estilos inline en el atributo style del propio p\u00e1rrafo: 1 2 3 < p style = \"font-weight:bold; font-style:italic; color:red\" > Texto en negrita, cursiva y en color rojo. </ p > Si quisieramos cambiar solamente el estilo de una o varias palabras dentro de un p\u00e1rrafo podemos utilizar la etiqueta <span> y asignarle dichos estilos en su atributo style : 1 2 3 4 < p > Este p\u00e1rrafo contiene una < span style = \"font-weight:bold\" > secci\u00f3n en negrita </ span > . </ p > La definici\u00f3n de estilos dentro de la etiqueta style se suele hacer cuando dicho estilo solo se va a aplicar de forma puntual. Pero si por el contrario queremos definir un estilo que lo vamos a aplicar varias veces en un sitio Web lo m\u00e1s aconsejable es declarar una clase en una hoja de estilos externa o interna. Por ejemplo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" /> < style type = \"text/css\" > h1 { color : blue ; } p { color : black ; font-size : 12 pt ; } . parrafo-aviso { font-weight : bold ; font-style : italic ; color : red ; } . nota { text-align : right ; font-size : 10 pt ; color : gray ; } </ style > </ head > < body > < h1 > Art\u00edculo 1 </ h1 > < p > P\u00e1rrafo normal al que se le aplica el color negro y un tama\u00f1o de 12pt. </ p > < p class = \"parrafo-aviso\" > Texto de aviso destacado en color rojo, cursiva y negrita. </ p > < p class = \"nota\" > Nota alineada a la derecha, en color gris y con tama\u00f1o de letra 10pt. </ p > </ body > </ html >","title":"Estilos para textos"},{"location":"capitulo_css_estilos_para_textos.html#estilos-para-textos","text":"En esta secci\u00f3n se describen los principales estilos CSS que podemos utilizar para cambiar la apariencia de los textos de una Web. Para cada uno de ellos se indica el nombre del atributo, los posibles valores que le podemos asignar, algunos ejemplos y una explicaci\u00f3n de uso. color: valor RGB o nombre de color Ejemplos : color: #009900; color: red; Sirve para indicar el color del texto. Lo admiten casi todas las etiquetas de HTML. No todos los nombres de colores son admitidos en el est\u00e1ndar, es aconsejable entonces utilizar el valor RGB. Algunos de los principales nombres de colores son: white, black, gray, blue, red, green o yellow, para m\u00e1s nombres podemos consultar la direcci\u00f3n \" http://www.w3schools.com/cssref/css_colornames.asp \". font-size: xx-small|x-small|small|medium|large|x-large|xx-large|Unidades CSS Ejemplos : font-size: 12pt; font-size: x-large; Sirve para indicar el tama\u00f1o de las fuentes de manera m\u00e1s r\u00edgida y con mayor exactitud. font-family: serif | sans-serif | cursive | fantasy | monospace | Etc. Ejemplos : font-family: arial,helvetica; font-family: fantasy; Con este atributo indicamos la familia de tipograf\u00eda del texto. Los primeros valores son gen\u00e9ricos (serif, sans-serif, etc.), es decir, los navegadores las comprenden y utilizan las fuentes que el usuario tenga en su sistema. Tambi\u00e9n se pueden definir con tipograf\u00edas normales. Si el nombre de una fuente tiene espacios se utilizan comillas para que se entienda bien. font-weight: normal | bold | bolder | lighter | 100 | 200 | 300 | ... | 900 Ejemplos : font-weight: bold; font-weight: 200; Sirve para definir la anchura de los caracteres, o dicho de otra manera, para poner negrita con total libertad. Normal y 400 son el mismo valor, as\u00ed como bold y 700. font-style: normal | italic | oblique Ejemplos : font-style: normal; font-style: italic; Es el estilo de la fuente, que puede ser normal, it\u00e1lica u oblicua. El estilo \"oblique\" es similar al \"italic\". text-decoration: none | underline | overline | line-through Ejemplos : text-decoration: none; text-decoration: underline; Establece la decoraci\u00f3n de un texto, si est\u00e1 subrayado, sobre-rayado o tachado. text-transform: capitalize | uppercase | lowercase | none Ejemplos : text-transform: none; text-transform: capitalize; Nos permite transformar el texto, para que tenga la primera letra en may\u00fasculas de todas las palabras, o todo en may\u00fasculas o min\u00fasculas.","title":"Estilos para textos"},{"location":"capitulo_css_estilos_para_textos.html#ejemplos","text":"Por ejemplo, para definir un p\u00e1rrafo en negrita, cursiva y adem\u00e1s cambiar el color podemos definir estos estilos inline en el atributo style del propio p\u00e1rrafo: 1 2 3 < p style = \"font-weight:bold; font-style:italic; color:red\" > Texto en negrita, cursiva y en color rojo. </ p > Si quisieramos cambiar solamente el estilo de una o varias palabras dentro de un p\u00e1rrafo podemos utilizar la etiqueta <span> y asignarle dichos estilos en su atributo style : 1 2 3 4 < p > Este p\u00e1rrafo contiene una < span style = \"font-weight:bold\" > secci\u00f3n en negrita </ span > . </ p > La definici\u00f3n de estilos dentro de la etiqueta style se suele hacer cuando dicho estilo solo se va a aplicar de forma puntual. Pero si por el contrario queremos definir un estilo que lo vamos a aplicar varias veces en un sitio Web lo m\u00e1s aconsejable es declarar una clase en una hoja de estilos externa o interna. Por ejemplo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" /> < style type = \"text/css\" > h1 { color : blue ; } p { color : black ; font-size : 12 pt ; } . parrafo-aviso { font-weight : bold ; font-style : italic ; color : red ; } . nota { text-align : right ; font-size : 10 pt ; color : gray ; } </ style > </ head > < body > < h1 > Art\u00edculo 1 </ h1 > < p > P\u00e1rrafo normal al que se le aplica el color negro y un tama\u00f1o de 12pt. </ p > < p class = \"parrafo-aviso\" > Texto de aviso destacado en color rojo, cursiva y negrita. </ p > < p class = \"nota\" > Nota alineada a la derecha, en color gris y con tama\u00f1o de letra 10pt. </ p > </ body > </ html >","title":"Ejemplos"},{"location":"capitulo_css_identificadores_y_clases.html","text":"Identificadores y Clases \u00b6 A veces tenemos varias etiquetas del mismo tipo pero queremos aplicar diferentes estilos seg\u00fan donde est\u00e9n. Para esto usamos los identificadores y las clases. La principal diferencia entre ellos es que los identificadores tienen que ser \u00fanicos en todo el documento HTML mientras que las clases pueden repetirse todas las veces que queramos. La otra diferencia es la forma de definirlos y de utilizarlos: En HTML para indicar el identificador de una etiqueta usaremos el atributo \" id \", mientras que para indicar la clase usaremos \" class \": 1 2 3 4 5 6 7 8 < div id = \"capitulo2\" > < p > ... </ p > < p class = \"parrafogris\" > .... </ p > < p > ... </ p > < p class = \"parrafogris\" > .... </ p > < p > ... </ p > < p class = \"parrafogris\" > .... </ p > </ div > En este ejemplo se asigna el identificador \"capitulo2\" a la etiqueta <div> inicial. Esta etiqueta ser\u00eda una secci\u00f3n \u00fanica en todo el documento sobre la cual podemos aplicar un estilo concreto. El estilo de la clase \"parrafogris\" se aplicar\u00eda sobre las etiquetas \" p \" indicadas, y como se puede ver si ha aplicado varias veces. Otra diferencia entre identificadores y clases es la forma de definir sus estilos CSS en la hoja de estilos. Para indicar un identificador escribiremos su nombre precedido por una almohadilla \" # \", y para referenciar una clase usaremos como prefijo el punto \".\", por ejemplo: 1 2 3 4 5 6 # identificador { /* estilos CSS */ } . clase { /* estilos CSS */ } Por ejemplo, para indicar los estilos del ejemplo anterior, escribir\u00edamos el siguiente c\u00f3digo: 1 2 3 4 5 6 # capitulo2 { /* estilos CSS */ } . parrafogris { /* estilos CSS */ } Es importante diferenciar cuando tenemos que usar la almohadilla \" # \" y el punto \".\", los cuales solo los pondremos en la hoja de estilos y no en el c\u00f3digo HTML. Esto es un error com\u00fan y har\u00eda que los estilos no funcionasen. Es decir, si escribimos <div id=\"#capitulo2\"> (con \" # \") o escribimos <p class=\".parrafogris\"> (con \".\") ser\u00eda un error y no funcionar\u00eda. Los identificadores se suelen usar menos que las clases y solo para elementos espec\u00edficos que se quieren diferenciar. Normalmente se aplican sobre etiquetas \"neutras\" como <div> o <span> para marcar partes de un documento y despu\u00e9s indicar sus estilos (como por ejemplo identificar la cabecera, un logotipo, el men\u00fa principal, etc.). Definici\u00f3n de varios estilos a la vez \u00b6 Igual que hemos visto antes, podemos definir estilos a la vez para varios identificadores y clases: 1 2 3 4 5 6 # capitulo1 , # capitulo2 , # capitulo3 { /* estilos CSS */ } . parrafogris , . parraforojo , . parrafoverde { /* estilos CSS */ } Podemos mezclar identificadores, con clases y con etiquetas sin problema: 1 2 3 # capitulo1 , . parrafogris , h1 { /* estilos CSS */ } Anidaci\u00f3n de estilos \u00b6 Podemos aplicar estilos a identificadores y clases solo cuando cuando est\u00e9n dentro de otros: 1 2 3 4 5 6 # capitulo1 # cabecera { /* estilo a aplicar a #cabecera solo cuando est\u00e9 dentro de #capitulo1 */ } . parrafogris . resaltado { /* estilo a aplicar a .resaltado solo cuando est\u00e9 dentro de .parrafogris */ } Igual que antes tambi\u00e9n podemos combinar identificadores, con clases y con etiquetas sin problema: 1 2 3 4 5 6 # cabecera h1 { /* estilos a aplicar a h1 solo cuando est\u00e9 dentro de la secci\u00f3n #cabecera */ } . parrafogris span { /* estilos a aplicar a la etiqueta span solo cuando est\u00e9 dentro de .parrafogris */ } Si queremos podemos crear m\u00e1s niveles de profundidad, por ejemplo: 1 2 3 4 # cabecera p . resaltado { /* estilos a aplicar a \".resaltado\" solo cuando est\u00e9 dentro de una etiqueta \"p\" que a su vez est\u00e9 dentro de la secci\u00f3n #cabecera */ } Filtrar etiquetas con estilos \u00b6 Tambi\u00e9n podemos aplicar estilos filtrando por etiquetas que tenga una determinada clase, por ejemplo: 1 2 3 etiqueta1 . clase1 { /* estilos CSS */ } En este caso s\u00f3lo se aplicar\u00eda el estilo a las etiquetas \"etiqueta1\" que se marque que son de la clase \"clase1\", por ejemplo: <etiqueta1 class=\"clase1\">...</etiqueta1> . Si intent\u00e1ramos aplicar esta clase a una etiqueta diferente no funcionar\u00eda. Por ejemplo, el estilo: 1 2 3 h1 . resaltado { /* estilos CSS */ } Solo se aplicar\u00eda a las cabeceras h1 que tengan aplicada la clase .resaltado de la forma: <h1 class=\"resaltado\">...</h1>","title":"Identificadores y clases"},{"location":"capitulo_css_identificadores_y_clases.html#identificadores-y-clases","text":"A veces tenemos varias etiquetas del mismo tipo pero queremos aplicar diferentes estilos seg\u00fan donde est\u00e9n. Para esto usamos los identificadores y las clases. La principal diferencia entre ellos es que los identificadores tienen que ser \u00fanicos en todo el documento HTML mientras que las clases pueden repetirse todas las veces que queramos. La otra diferencia es la forma de definirlos y de utilizarlos: En HTML para indicar el identificador de una etiqueta usaremos el atributo \" id \", mientras que para indicar la clase usaremos \" class \": 1 2 3 4 5 6 7 8 < div id = \"capitulo2\" > < p > ... </ p > < p class = \"parrafogris\" > .... </ p > < p > ... </ p > < p class = \"parrafogris\" > .... </ p > < p > ... </ p > < p class = \"parrafogris\" > .... </ p > </ div > En este ejemplo se asigna el identificador \"capitulo2\" a la etiqueta <div> inicial. Esta etiqueta ser\u00eda una secci\u00f3n \u00fanica en todo el documento sobre la cual podemos aplicar un estilo concreto. El estilo de la clase \"parrafogris\" se aplicar\u00eda sobre las etiquetas \" p \" indicadas, y como se puede ver si ha aplicado varias veces. Otra diferencia entre identificadores y clases es la forma de definir sus estilos CSS en la hoja de estilos. Para indicar un identificador escribiremos su nombre precedido por una almohadilla \" # \", y para referenciar una clase usaremos como prefijo el punto \".\", por ejemplo: 1 2 3 4 5 6 # identificador { /* estilos CSS */ } . clase { /* estilos CSS */ } Por ejemplo, para indicar los estilos del ejemplo anterior, escribir\u00edamos el siguiente c\u00f3digo: 1 2 3 4 5 6 # capitulo2 { /* estilos CSS */ } . parrafogris { /* estilos CSS */ } Es importante diferenciar cuando tenemos que usar la almohadilla \" # \" y el punto \".\", los cuales solo los pondremos en la hoja de estilos y no en el c\u00f3digo HTML. Esto es un error com\u00fan y har\u00eda que los estilos no funcionasen. Es decir, si escribimos <div id=\"#capitulo2\"> (con \" # \") o escribimos <p class=\".parrafogris\"> (con \".\") ser\u00eda un error y no funcionar\u00eda. Los identificadores se suelen usar menos que las clases y solo para elementos espec\u00edficos que se quieren diferenciar. Normalmente se aplican sobre etiquetas \"neutras\" como <div> o <span> para marcar partes de un documento y despu\u00e9s indicar sus estilos (como por ejemplo identificar la cabecera, un logotipo, el men\u00fa principal, etc.).","title":"Identificadores y Clases"},{"location":"capitulo_css_identificadores_y_clases.html#definicion-de-varios-estilos-a-la-vez","text":"Igual que hemos visto antes, podemos definir estilos a la vez para varios identificadores y clases: 1 2 3 4 5 6 # capitulo1 , # capitulo2 , # capitulo3 { /* estilos CSS */ } . parrafogris , . parraforojo , . parrafoverde { /* estilos CSS */ } Podemos mezclar identificadores, con clases y con etiquetas sin problema: 1 2 3 # capitulo1 , . parrafogris , h1 { /* estilos CSS */ }","title":"Definici\u00f3n de varios estilos a la vez"},{"location":"capitulo_css_identificadores_y_clases.html#anidacion-de-estilos","text":"Podemos aplicar estilos a identificadores y clases solo cuando cuando est\u00e9n dentro de otros: 1 2 3 4 5 6 # capitulo1 # cabecera { /* estilo a aplicar a #cabecera solo cuando est\u00e9 dentro de #capitulo1 */ } . parrafogris . resaltado { /* estilo a aplicar a .resaltado solo cuando est\u00e9 dentro de .parrafogris */ } Igual que antes tambi\u00e9n podemos combinar identificadores, con clases y con etiquetas sin problema: 1 2 3 4 5 6 # cabecera h1 { /* estilos a aplicar a h1 solo cuando est\u00e9 dentro de la secci\u00f3n #cabecera */ } . parrafogris span { /* estilos a aplicar a la etiqueta span solo cuando est\u00e9 dentro de .parrafogris */ } Si queremos podemos crear m\u00e1s niveles de profundidad, por ejemplo: 1 2 3 4 # cabecera p . resaltado { /* estilos a aplicar a \".resaltado\" solo cuando est\u00e9 dentro de una etiqueta \"p\" que a su vez est\u00e9 dentro de la secci\u00f3n #cabecera */ }","title":"Anidaci\u00f3n de estilos"},{"location":"capitulo_css_identificadores_y_clases.html#filtrar-etiquetas-con-estilos","text":"Tambi\u00e9n podemos aplicar estilos filtrando por etiquetas que tenga una determinada clase, por ejemplo: 1 2 3 etiqueta1 . clase1 { /* estilos CSS */ } En este caso s\u00f3lo se aplicar\u00eda el estilo a las etiquetas \"etiqueta1\" que se marque que son de la clase \"clase1\", por ejemplo: <etiqueta1 class=\"clase1\">...</etiqueta1> . Si intent\u00e1ramos aplicar esta clase a una etiqueta diferente no funcionar\u00eda. Por ejemplo, el estilo: 1 2 3 h1 . resaltado { /* estilos CSS */ } Solo se aplicar\u00eda a las cabeceras h1 que tengan aplicada la clase .resaltado de la forma: <h1 class=\"resaltado\">...</h1>","title":"Filtrar etiquetas con estilos"},{"location":"capitulo_css_pseudo-clases.html","text":"Pseudo-clases \u00b6 Una pseudo-clase permite tener en cuenta diferentes condiciones o eventos al definir una propiedad para una etiqueta HTML, por ejemplo si un enlace ha sido visitado o si el cursor del rat\u00f3n est\u00e1 sobre un elemento. Algunas de las pseudo-clases que podemos utilizar son: a:link - enlace que no ha sido explorado por el usuario. a:visited - se refiere a los enlaces ya visitados. a:active - enlace seleccionado con el rat\u00f3n. a:hover - enlace con el puntero del rat\u00f3n encima, pero no seleccionado. a:focus - enlace con el foco del sistema. Tambi\u00e9n puede ser usado para un input. p:first-letter - primera letra de un p\u00e1rrafo. p:first-line - primera l\u00ednea de un p\u00e1rrafo. Utilizando estos elementos podemos configurar por ejemplo: 1 2 3 4 a { color : black ; } a : hover { color : blue ; } a : visited { color : darkgreen ; } p : first-letter { color : green ; font-size : x-large ;} En este ejemplo se aplica el color azul al texto de los enlaces solo cuando el rat\u00f3n est\u00e9 encima. Es decir, el texto del enlace tendr\u00e1 por defecto el color negro, pero cuando el cursor del rat\u00f3n pase por encima el color cambiar\u00e1 a azul. Adem\u00e1s tambi\u00e9n se asigna el color del texto verde oscuro a los enlaces ya visitados, por lo que el usuario podr\u00e1 ver marcados de este color los enlaces que ya ha pulsado anteriormente. Por \u00faltimo tambi\u00e9n se indica que la primera letra de los p\u00e1rrafos tenga el color verde y un tama\u00f1o m\u00e1s grade. Las pseudo-clases no se pueden incluir en el estilo en l\u00ednea de un elemento, por lo tanto las tendremos que definir bien en la hoja de estilos externa o en la secci\u00f3n style de la cabecera, por ejemplo: 1 2 3 4 5 6 7 8 9 10 11 12 < html > < head > < style type = \"text/css\" > a { background-color : white ; } a : hover { background-color : blue ; } </ style > </ head > ...","title":"Pseudo-clases"},{"location":"capitulo_css_pseudo-clases.html#pseudo-clases","text":"Una pseudo-clase permite tener en cuenta diferentes condiciones o eventos al definir una propiedad para una etiqueta HTML, por ejemplo si un enlace ha sido visitado o si el cursor del rat\u00f3n est\u00e1 sobre un elemento. Algunas de las pseudo-clases que podemos utilizar son: a:link - enlace que no ha sido explorado por el usuario. a:visited - se refiere a los enlaces ya visitados. a:active - enlace seleccionado con el rat\u00f3n. a:hover - enlace con el puntero del rat\u00f3n encima, pero no seleccionado. a:focus - enlace con el foco del sistema. Tambi\u00e9n puede ser usado para un input. p:first-letter - primera letra de un p\u00e1rrafo. p:first-line - primera l\u00ednea de un p\u00e1rrafo. Utilizando estos elementos podemos configurar por ejemplo: 1 2 3 4 a { color : black ; } a : hover { color : blue ; } a : visited { color : darkgreen ; } p : first-letter { color : green ; font-size : x-large ;} En este ejemplo se aplica el color azul al texto de los enlaces solo cuando el rat\u00f3n est\u00e9 encima. Es decir, el texto del enlace tendr\u00e1 por defecto el color negro, pero cuando el cursor del rat\u00f3n pase por encima el color cambiar\u00e1 a azul. Adem\u00e1s tambi\u00e9n se asigna el color del texto verde oscuro a los enlaces ya visitados, por lo que el usuario podr\u00e1 ver marcados de este color los enlaces que ya ha pulsado anteriormente. Por \u00faltimo tambi\u00e9n se indica que la primera letra de los p\u00e1rrafos tenga el color verde y un tama\u00f1o m\u00e1s grade. Las pseudo-clases no se pueden incluir en el estilo en l\u00ednea de un elemento, por lo tanto las tendremos que definir bien en la hoja de estilos externa o en la secci\u00f3n style de la cabecera, por ejemplo: 1 2 3 4 5 6 7 8 9 10 11 12 < html > < head > < style type = \"text/css\" > a { background-color : white ; } a : hover { background-color : blue ; } </ style > </ head > ...","title":"Pseudo-clases"},{"location":"capitulo_ejercicios_1.html","text":"Ejercicios 1 - Ejercicios sobre HTML, HTML5, CSS y CSS3 \u00b6 En esta primera sesi\u00f3n vamos a realizar algunos ejercicios para practicar con las distintas versiones de HTML, HTML5, CSS y CSS3. Descarga la plantilla para los ejercicios de los materiales. Ejercicio 1 - Estructura en HTML (0.6 puntos) \u00b6 En este primer ejercicio vamos a hacer una peque\u00f1a Web de ejemplo utilizando las etiquetas DIV para estructurar el contenido. Nuestra Web va estar dividida en cuatro apartados, cada uno tendr\u00e1 un identificador \u00fanico: header, nav, content, footer . El resultado final tendr\u00e1 que ser similar al de la siguiente imagen: En la parte superior vamos a crear un campo DIV con identificador \"header\", en el que incluiremos el logo del curso (logo.jpg, con un alto de 50px) y el texto \"PHDM\" (color blanco con tama\u00f1o de 16 puntos). A continuaci\u00f3n incluiremos la barra de navegaci\u00f3n, otro campo DIV con identificador \"nav\". Dentro de este a su vez crearemos 3 cajas tio DIV con la clase \"navElement\". Las cajas tendr\u00e1n los textos \"Inicio\", \"Contenidos\" y \"Profesorado\". Como estilo indicaremos que la clase \"navElement\" tenga el color de fondo \"#f0f0f0\" y que cambie al color \"#005682\" cuando el rat\u00f3n pase por encima. La secci\u00f3n central la crearemos tambi\u00e9n mediante una etiqueta DIV con el identificador \"content\". Esta secci\u00f3n contendr\u00e1 una lista no ordenada (del tipo UL ), el contenido de esta lista lo podemos obtener del fichero con la plantilla para este ejercicio. El pie de p\u00e1gina lo crearemos tambi\u00e9n utilizando una etiqueta DIV con el identificador \"footer\" y el texto \"Dept. Ciencia de la Computaci\u00f3n e IA\". Como estilo le aplicaremos el color de texto gris. Por \u00faltimo tenemos que terminar de ajustar los estilos CSS para que la p\u00e1gina se vea correctamente. Para los elementos \"header\", \"nav\", \"content\" y \"footer\" definiremos un ancho del 100% e indicaremos que no se permiten elementos por su lado izquierdo (es decir, que deben de estar en una nueva l\u00ednea, esto lo haremos mediante clear:left; ). Para el estilo \"navElement\" indicaremos que se tiene que situar a continuaci\u00f3n del anterior (en la misma l\u00ednea, esto lo haremos mediante float: left; ). Ejercicio 2 - Terminando la Web de ejemplo (0.6 puntos) \u00b6 En este ejercicio vamos a terminar la web del ejercicio 1, a\u00f1adi\u00e9ndole el contenido de los enlaces que faltan. En primer lugar copiamos el fichero resultado del ejercicio anterior y lo renombramos a \"ejercicio2.html\". En este fichero vamos a modificar las opciones de men\u00fa para a\u00f1adir enlaces a Inicio (un enlace a este mismo fichero), Contenidos (enlace a \"ejercicio2_contenidos.html\") y Profesorado (enlace a \"ejercicio2_profesorado.html\"). Al a\u00f1adir estos enlaces se modificar\u00e1 su apariencia, por lo que tendremos que modificar la hoja de estilo. A\u00f1adimos dos nuevos estilos \" .navElement a \" para indicar que el color de los enlaces es negro y que no se dibuje la l\u00ednea de subrayado del enlace ( text-decoration: none; ). Y otro estilo \" .navElement a:hover \" para que el enlace cambie a color blanco cuando el rat\u00f3n pase por encima. El siguiente paso es pasar todos estos estilos a un fichero independiente, llamado \"ejercicio2_css.css\". Simplemente tendremos que crear este fichero y cortar y pegar en \u00e9l todos los estilos que ya tenemos creados. En el fichero principal HTML tendremos que cargar esta hoja de estilo, quedando solo una l\u00ednea ( <link href=\"ejercicio2_css.css\" rel=\"stylesheet\" type=\"text/css\" /> ). Ahora vamos a crear los dos ficheros HTML que faltan. Para esto realizamos dos copias del fichero HTML principal y las renombraremos a \"ejercicio2_contenidos.html\" y \"ejercicio2_profesorado.html\". En cada una de estas copias solo tendremos que cambiar el contenido de la zona central. Para el fichero de contenidos buscaremos el \u00edndice general de contenidos del curso y lo a\u00f1adiremos en una lista no numerada (UL). Y para el fichero de profesorado a\u00f1adiremos tambi\u00e9n en una lista no numerada los nombres de los profesores. Por \u00faltimo vamos a hacer que al cambiar de secci\u00f3n se quede marcado el enlace correspondiente. Esto lo haremos a\u00f1adiendo la clase \"visited\" solo al enlace de la secci\u00f3n actual, es decir, en cada p\u00e1gina (inicio, contenidos o profesorado), a\u00f1adiremos la clase \"visited\" solo a la opci\u00f3n del men\u00fa que est\u00e1 abierta en ese momento. Nota: Para a\u00f1adir m\u00e1s de un clase a un elemento HTML lo podemos hacer separando las clases con espacios, de la forma: <div class=\"navElement visited\"> . Finalmente definimos el estilo \".visited\" en la hoja de estilo con el color de fondo \"#005682\" y el color de texto blanco. Ejercicio 3 - Estructura de HTML 5 (0.6 puntos) \u00b6 En este ejercicio vamos a modificar la web que hemos hecho en el ejercicio anterior para aplicarle las nuevas etiquetas sem\u00e1nticas de HTML5. Para esto seguiremos los siguientes pasos: Copiamos los ficheros del ejercicio anterior y los renombramos por \"ejercicio3\". Cambiamos la direcci\u00f3n de los enlaces y la inclusi\u00f3n del fichero CSS en la cabecera para que apunten correctamente a los nuevos ficheros. En cada uno de los ficheros HTML cambiamos las etiquetas DIV principales (con identificadores header, nav, content, footer ) y las sustituimos por las etiquetas sem\u00e1nticas de HTML5 ( header, nav, article y footer ). Modificamosel fichero CSS para aplicar los estilos sobre las nuevas etiquetas sem\u00e1nticas de HTML5 (simplemente tendremos que cambiar los identificadores por los nombres de estas etiquetas, por ejemplo: \"#header\" por \"header\"). Ejercicio 4 - Canvas (0.2 puntos) \u00b6 Para practicar con el elemento Canvas vamos a dibujar unas sencillas figuras geom\u00e9tricas. En primer lugar, en el cuerpo del documento, tenemos que crear el canvas con identificador \"myCanvas\" y dimensiones de 360x240. En el c\u00f3digo JavaScript btendremos la instancia del canvas a partir de su identificador \"myCanvas\" y adquiriremos su contexto 2D. Definiremos un estilo de relleno con color '#0000ff', un color de borde '#ff0000' y un grosor de l\u00ednea de 4 p\u00edxeles. Dibujamos un rect\u00e1ngulo relleno en las coordenadas (0, 0, 150, 50), y otro rect\u00e1ngulo usando solo el borde en las coordenadas (0, 60, 150, 50). Por \u00faltimo dibujaremos un tri\u00e1ngulo usando la herramienta trazo (path). Iniciamos el trazo (beginPath), definimos el primer punto en (160, 0) y los siguientes puntos en (270, 0), (160, 110) y (160, 0). Por \u00faltimo indicamos que rellene la figura y que cierre el trazo. Ejercicio 5 - Geolocalizaci\u00f3n (0.2 puntos) \u00b6 En este ejercicio solo tenemos que a\u00f1adir una l\u00ednea, y es el comando necesario para obtener la posici\u00f3n actual, al cual le pasaremos como par\u00e1metro el nombre de la funci\u00f3n \"showPosition\". Esta funci\u00f3n ser\u00e1 la encargada de mostrar nuestras coordenadas (utilizando la API de Google Maps). Nota: si no funciona correctamente es posible que sea por problemas de permisos si abrimos el fichero html directamente. Para solucionarlo podemos colocar el ejercicio en un servidor web local y acceder a \u00e9l a trav\u00e9s del localhost . Ejercicio 6 - Almacenamiento Offline (0.3 puntos) \u00b6 Para practicar con la nueva funcionalidad de almacenamiento Offline vamos a hacer un peque\u00f1o ejemplo que guarde de forma autom\u00e1tica una nota. Si abrimos la plantilla correspondiente solo tenemos que definir las funciones de cargar, guardar y borrar la nota. Para esto utilizaremos el almacenamiento en local (localStorage) y el identificador 'savedNote', y para el borrado eliminaremos todo el contenido directamente (clear). Adem\u00e1s en la secci\u00f3n de estilo CSS indicaremos para el \"contenedor-nota\" que utilice la imagen de fondo \"imgs/stickynote.jpg\". Nota: si no funciona correctamente es posible que sea por problemas de permisos si abrimos el fichero html directamente. Para solucionarlo podemos colocar el ejercicio en un servidor web local y acceder a \u00e9l a trav\u00e9s del localhost . Ejercicio 7 - CSS3 (0.5 puntos) \u00b6 En este ejercicio vamos a probar algunas de las funcionalidades nuevas de CSS3. Para todos los ejemplos recuerda indicar los nombres de las propiedades usando tambi\u00e9n los nombres nativos de los navegadores con los prefijos -webkit-, -moz- y -o-. En el primer ejemplo \"borderRadius\" vamos a indicar que el cuadro tenga bordes redondeados con un radio de 30 p\u00edxeles. En el segundo ejemplo (borderShadow) crearemos una sombra para el borde, con los siguientes atributos: distancia horizontal de la sombra de 5px, distancia vertical de la sombra 5px, desenfoque de 6px y color de la sombra gris\u00e1ceo (#888888). En el tercer ejemplo (textShadow) vamos a crear una sombra para el texto de 2px para sus distancias horizontal y vertical, de 2 p\u00edxeles para el desenfoque y \"#9e9e9e\" como color de sombra. En el cuarto ejemplo (multiColumn) vamos a probar la funcionalidad de columnas. Aqu\u00ed solo tendremos que indicar que el n\u00famero de columnas es de 2 y que el espacio entre las columnas es de 15px. En el \u00faltimo ejemplo (boxTransition) vamos a crear un efecto de transici\u00f3n. Usando la propiedad \"transition\" (para establecer todos los valores en una sola l\u00ednea), indicaremos que vamos a realizar la transici\u00f3n sobre \"margin-left\", con una duraci\u00f3n de 3s, y usando la funci\u00f3n de tiempo \"ease-in-out\".","title":"Ejercicios 1"},{"location":"capitulo_ejercicios_1.html#ejercicios-1-ejercicios-sobre-html-html5-css-y-css3","text":"En esta primera sesi\u00f3n vamos a realizar algunos ejercicios para practicar con las distintas versiones de HTML, HTML5, CSS y CSS3. Descarga la plantilla para los ejercicios de los materiales.","title":"Ejercicios 1 - Ejercicios sobre HTML, HTML5, CSS y CSS3"},{"location":"capitulo_ejercicios_1.html#ejercicio-1-estructura-en-html-06-puntos","text":"En este primer ejercicio vamos a hacer una peque\u00f1a Web de ejemplo utilizando las etiquetas DIV para estructurar el contenido. Nuestra Web va estar dividida en cuatro apartados, cada uno tendr\u00e1 un identificador \u00fanico: header, nav, content, footer . El resultado final tendr\u00e1 que ser similar al de la siguiente imagen: En la parte superior vamos a crear un campo DIV con identificador \"header\", en el que incluiremos el logo del curso (logo.jpg, con un alto de 50px) y el texto \"PHDM\" (color blanco con tama\u00f1o de 16 puntos). A continuaci\u00f3n incluiremos la barra de navegaci\u00f3n, otro campo DIV con identificador \"nav\". Dentro de este a su vez crearemos 3 cajas tio DIV con la clase \"navElement\". Las cajas tendr\u00e1n los textos \"Inicio\", \"Contenidos\" y \"Profesorado\". Como estilo indicaremos que la clase \"navElement\" tenga el color de fondo \"#f0f0f0\" y que cambie al color \"#005682\" cuando el rat\u00f3n pase por encima. La secci\u00f3n central la crearemos tambi\u00e9n mediante una etiqueta DIV con el identificador \"content\". Esta secci\u00f3n contendr\u00e1 una lista no ordenada (del tipo UL ), el contenido de esta lista lo podemos obtener del fichero con la plantilla para este ejercicio. El pie de p\u00e1gina lo crearemos tambi\u00e9n utilizando una etiqueta DIV con el identificador \"footer\" y el texto \"Dept. Ciencia de la Computaci\u00f3n e IA\". Como estilo le aplicaremos el color de texto gris. Por \u00faltimo tenemos que terminar de ajustar los estilos CSS para que la p\u00e1gina se vea correctamente. Para los elementos \"header\", \"nav\", \"content\" y \"footer\" definiremos un ancho del 100% e indicaremos que no se permiten elementos por su lado izquierdo (es decir, que deben de estar en una nueva l\u00ednea, esto lo haremos mediante clear:left; ). Para el estilo \"navElement\" indicaremos que se tiene que situar a continuaci\u00f3n del anterior (en la misma l\u00ednea, esto lo haremos mediante float: left; ).","title":"Ejercicio 1 - Estructura en HTML (0.6 puntos)"},{"location":"capitulo_ejercicios_1.html#ejercicio-2-terminando-la-web-de-ejemplo-06-puntos","text":"En este ejercicio vamos a terminar la web del ejercicio 1, a\u00f1adi\u00e9ndole el contenido de los enlaces que faltan. En primer lugar copiamos el fichero resultado del ejercicio anterior y lo renombramos a \"ejercicio2.html\". En este fichero vamos a modificar las opciones de men\u00fa para a\u00f1adir enlaces a Inicio (un enlace a este mismo fichero), Contenidos (enlace a \"ejercicio2_contenidos.html\") y Profesorado (enlace a \"ejercicio2_profesorado.html\"). Al a\u00f1adir estos enlaces se modificar\u00e1 su apariencia, por lo que tendremos que modificar la hoja de estilo. A\u00f1adimos dos nuevos estilos \" .navElement a \" para indicar que el color de los enlaces es negro y que no se dibuje la l\u00ednea de subrayado del enlace ( text-decoration: none; ). Y otro estilo \" .navElement a:hover \" para que el enlace cambie a color blanco cuando el rat\u00f3n pase por encima. El siguiente paso es pasar todos estos estilos a un fichero independiente, llamado \"ejercicio2_css.css\". Simplemente tendremos que crear este fichero y cortar y pegar en \u00e9l todos los estilos que ya tenemos creados. En el fichero principal HTML tendremos que cargar esta hoja de estilo, quedando solo una l\u00ednea ( <link href=\"ejercicio2_css.css\" rel=\"stylesheet\" type=\"text/css\" /> ). Ahora vamos a crear los dos ficheros HTML que faltan. Para esto realizamos dos copias del fichero HTML principal y las renombraremos a \"ejercicio2_contenidos.html\" y \"ejercicio2_profesorado.html\". En cada una de estas copias solo tendremos que cambiar el contenido de la zona central. Para el fichero de contenidos buscaremos el \u00edndice general de contenidos del curso y lo a\u00f1adiremos en una lista no numerada (UL). Y para el fichero de profesorado a\u00f1adiremos tambi\u00e9n en una lista no numerada los nombres de los profesores. Por \u00faltimo vamos a hacer que al cambiar de secci\u00f3n se quede marcado el enlace correspondiente. Esto lo haremos a\u00f1adiendo la clase \"visited\" solo al enlace de la secci\u00f3n actual, es decir, en cada p\u00e1gina (inicio, contenidos o profesorado), a\u00f1adiremos la clase \"visited\" solo a la opci\u00f3n del men\u00fa que est\u00e1 abierta en ese momento. Nota: Para a\u00f1adir m\u00e1s de un clase a un elemento HTML lo podemos hacer separando las clases con espacios, de la forma: <div class=\"navElement visited\"> . Finalmente definimos el estilo \".visited\" en la hoja de estilo con el color de fondo \"#005682\" y el color de texto blanco.","title":"Ejercicio 2 - Terminando la Web de ejemplo (0.6 puntos)"},{"location":"capitulo_ejercicios_1.html#ejercicio-3-estructura-de-html-5-06-puntos","text":"En este ejercicio vamos a modificar la web que hemos hecho en el ejercicio anterior para aplicarle las nuevas etiquetas sem\u00e1nticas de HTML5. Para esto seguiremos los siguientes pasos: Copiamos los ficheros del ejercicio anterior y los renombramos por \"ejercicio3\". Cambiamos la direcci\u00f3n de los enlaces y la inclusi\u00f3n del fichero CSS en la cabecera para que apunten correctamente a los nuevos ficheros. En cada uno de los ficheros HTML cambiamos las etiquetas DIV principales (con identificadores header, nav, content, footer ) y las sustituimos por las etiquetas sem\u00e1nticas de HTML5 ( header, nav, article y footer ). Modificamosel fichero CSS para aplicar los estilos sobre las nuevas etiquetas sem\u00e1nticas de HTML5 (simplemente tendremos que cambiar los identificadores por los nombres de estas etiquetas, por ejemplo: \"#header\" por \"header\").","title":"Ejercicio 3 - Estructura de HTML 5 (0.6 puntos)"},{"location":"capitulo_ejercicios_1.html#ejercicio-4-canvas-02-puntos","text":"Para practicar con el elemento Canvas vamos a dibujar unas sencillas figuras geom\u00e9tricas. En primer lugar, en el cuerpo del documento, tenemos que crear el canvas con identificador \"myCanvas\" y dimensiones de 360x240. En el c\u00f3digo JavaScript btendremos la instancia del canvas a partir de su identificador \"myCanvas\" y adquiriremos su contexto 2D. Definiremos un estilo de relleno con color '#0000ff', un color de borde '#ff0000' y un grosor de l\u00ednea de 4 p\u00edxeles. Dibujamos un rect\u00e1ngulo relleno en las coordenadas (0, 0, 150, 50), y otro rect\u00e1ngulo usando solo el borde en las coordenadas (0, 60, 150, 50). Por \u00faltimo dibujaremos un tri\u00e1ngulo usando la herramienta trazo (path). Iniciamos el trazo (beginPath), definimos el primer punto en (160, 0) y los siguientes puntos en (270, 0), (160, 110) y (160, 0). Por \u00faltimo indicamos que rellene la figura y que cierre el trazo.","title":"Ejercicio 4 - Canvas (0.2 puntos)"},{"location":"capitulo_ejercicios_1.html#ejercicio-5-geolocalizacion-02-puntos","text":"En este ejercicio solo tenemos que a\u00f1adir una l\u00ednea, y es el comando necesario para obtener la posici\u00f3n actual, al cual le pasaremos como par\u00e1metro el nombre de la funci\u00f3n \"showPosition\". Esta funci\u00f3n ser\u00e1 la encargada de mostrar nuestras coordenadas (utilizando la API de Google Maps). Nota: si no funciona correctamente es posible que sea por problemas de permisos si abrimos el fichero html directamente. Para solucionarlo podemos colocar el ejercicio en un servidor web local y acceder a \u00e9l a trav\u00e9s del localhost .","title":"Ejercicio 5 - Geolocalizaci\u00f3n (0.2 puntos)"},{"location":"capitulo_ejercicios_1.html#ejercicio-6-almacenamiento-offline-03-puntos","text":"Para practicar con la nueva funcionalidad de almacenamiento Offline vamos a hacer un peque\u00f1o ejemplo que guarde de forma autom\u00e1tica una nota. Si abrimos la plantilla correspondiente solo tenemos que definir las funciones de cargar, guardar y borrar la nota. Para esto utilizaremos el almacenamiento en local (localStorage) y el identificador 'savedNote', y para el borrado eliminaremos todo el contenido directamente (clear). Adem\u00e1s en la secci\u00f3n de estilo CSS indicaremos para el \"contenedor-nota\" que utilice la imagen de fondo \"imgs/stickynote.jpg\". Nota: si no funciona correctamente es posible que sea por problemas de permisos si abrimos el fichero html directamente. Para solucionarlo podemos colocar el ejercicio en un servidor web local y acceder a \u00e9l a trav\u00e9s del localhost .","title":"Ejercicio 6 - Almacenamiento Offline (0.3 puntos)"},{"location":"capitulo_ejercicios_1.html#ejercicio-7-css3-05-puntos","text":"En este ejercicio vamos a probar algunas de las funcionalidades nuevas de CSS3. Para todos los ejemplos recuerda indicar los nombres de las propiedades usando tambi\u00e9n los nombres nativos de los navegadores con los prefijos -webkit-, -moz- y -o-. En el primer ejemplo \"borderRadius\" vamos a indicar que el cuadro tenga bordes redondeados con un radio de 30 p\u00edxeles. En el segundo ejemplo (borderShadow) crearemos una sombra para el borde, con los siguientes atributos: distancia horizontal de la sombra de 5px, distancia vertical de la sombra 5px, desenfoque de 6px y color de la sombra gris\u00e1ceo (#888888). En el tercer ejemplo (textShadow) vamos a crear una sombra para el texto de 2px para sus distancias horizontal y vertical, de 2 p\u00edxeles para el desenfoque y \"#9e9e9e\" como color de sombra. En el cuarto ejemplo (multiColumn) vamos a probar la funcionalidad de columnas. Aqu\u00ed solo tendremos que indicar que el n\u00famero de columnas es de 2 y que el espacio entre las columnas es de 15px. En el \u00faltimo ejemplo (boxTransition) vamos a crear un efecto de transici\u00f3n. Usando la propiedad \"transition\" (para establecer todos los valores en una sola l\u00ednea), indicaremos que vamos a realizar la transici\u00f3n sobre \"margin-left\", con una duraci\u00f3n de 3s, y usando la funci\u00f3n de tiempo \"ease-in-out\".","title":"Ejercicio 7 - CSS3 (0.5 puntos)"},{"location":"capitulo_ejercicios_2.html","text":"Ejercicios 2 - Ejercicios sobre JavaScript \u00b6 Ejercicio 1 - Calculadora sencilla (1 punto) \u00b6 Para practicar con javascript vamos a crear una calculadora sencilla como la que se muestra en el siguiente esquema: Para ellos seguiremos los pasos: En primer lugar escribiremos el c\u00f3digo HTML para dise\u00f1ar una calculadora como la que se muestra en el esquema de la imagen. Es importante que asignemos un identificador \u00fanico a los campos tipo \" input \" de entrada de datos y al campo en el que se mostrar\u00e1 el resultado (para este campo podemos asignar un identificador a una etiqueta span vac\u00eda). Crearemos una funci\u00f3n para cada operaci\u00f3n que se llamar\u00e1 en el evento \" onclick \" de cada bot\u00f3n. Las funciones deben comprobar que se haya escrito alg\u00fan valor en los campos y en caso de error mostrar un aviso. Adem\u00e1s, en la funci\u00f3n de divisi\u00f3n se deber\u00e1 de comprobar que el resultado sea correcto (finito) y en caso de error se mostar\u00e1 tambi\u00e9n un mensaje. Para obtener o asignar valor a los campos tipo input usaremos su propiedad .value , mientrar que para asignar un valor a otro tipo de elementos HTML (como p\u00e1rrafos (p), cajas (div), span, etc.) utilizaremos su propiedad .innerHTML . Al obtener el valor de un input se obtiene con tipo cadena, para realizar las operaciones correctamente tendr\u00e9is que convertirlo a decimal mediante la funci\u00f3n parseFloat(valor) . Ejercicio 2 - Calculadora avanzada (1 punto) \u00b6 En este ejercicio vamos a crear una calculadora un poco m\u00e1s avanzada que la del ejercicio anterior. En primer lugar escribiremos el c\u00f3digo HTML para crear una calculadora con un dise\u00f1o similar al de la siguiente figura: Nos podemos ayudar de una tabla de HTML para la disposici\u00f3n de los elementos. La pantalla de la calculadora ser\u00e1 un campo DIV al cual asignaremos valores mediante la funci\u00f3n .innerHTML . El c\u00f3digo JavaScript constar\u00e1 de 3 funciones: Una funci\u00f3n \" limpiar() \" que se llamar\u00e1 al pulsar la tecla \"C\" y que borrar\u00e1 el contenido de la pantalla. Una funci\u00f3n \" setValue(valor) \" que a\u00f1adir\u00e1 el valor pasado por par\u00e1metro al contenido ya existente en la pantalla. Esta funci\u00f3n se utilizar\u00e1 tanto para a\u00f1adir n\u00fameros ( setValue(2) ) como para a\u00f1adir las operaciones ( setValue('+') ) y el separador decimal ( setValue('.') ). Una funci\u00f3n \" calcular() \" que calcular\u00e1 la operaci\u00f3n introducida en la pantalla y mostrar\u00e1 el resultado de la misma. Para realizar los c\u00e1lculos haremos uso de la funci\u00f3n de javascript eval , la cual evalua la expresi\u00f3n que recibe por par\u00e1metro y devuelve el resultado. Adem\u00e1s, dado que la expresi\u00f3n puede contener errores es necesario introducirla en un bloque try...catch como el siguiente: 1 2 3 4 5 try { pantalla . innerHTML = eval ( expr ); } catch ( e ) { // error } Notas: * Es necesario controlar los siguientes errores: * Cuando se llame a \" calcular() \" y no haya nada introducido en la pantalla. * Si se produce una excepci\u00f3n al evaluar la expresi\u00f3n. * Si el resultado de la operaci\u00f3n no es un n\u00famero o no es finito. * En caso de error se mostrar\u00e1 el aviso \"ERROR\" por la pantalla. * Despu\u00e9s de un error, si se pulsa limpiar o se introduce un valor se borrar\u00e1 el aviso. Ejercicio 3 - Validaci\u00f3n de un formulario (1 punto) \u00b6 En este \u00faltimo ejercicio vamos a crear un formulario para el acceso a la secci\u00f3n privada de una web mediante usuario y contrase\u00f1a, esto nos valdr\u00e1 para practicar con la funcionalidad de javascript validando sus campos. En primer lugar crearemos el HTML del formulario de login, el cual deber\u00e1 ser similar al de la siguiente imagen: El fondo de la web tendr\u00e1 el color \" gray \". La caja contenedora tendr\u00e1 un ancho de 400px y estar\u00e1 centrada en la pantalla. Su color de fondo ser\u00e1 #ccc y tendr\u00e1 un border de 2px de color silver . Adem\u00e1s tendr\u00e1 un espaciado interior de 30px. Se tendr\u00e1 que adaptar tambi\u00e9n el resto de elementos para que se muestren con un aspecto y disposici\u00f3n similar al de la figura. Se aconseja crear una secci\u00f3n de estilos CSS para agrupar los estilos del formulario. A continuaci\u00f3n crearemos una funci\u00f3n de JavaScript para realizar la validaci\u00f3n del formulario, la cual mostar\u00e1 los errores que hubiera o indicar\u00e1 que se ha validado correctamente. Para incluir los mensajes de error se pueden incluir directamente en el HTML inicial del formulario, pero se marcar\u00e1n como ocultos usando la propiedad CSS: display:none y cuando se quierdan mostrar se cambiar\u00e1 a display:block . Nota: para cambiar el estilo de un campo en JavaScript se puede hacer accediendo a su propiedad style de la forma: campo.style.display = 'block'; Al pulsar sobre el bot\u00f3n \"Entrar\" se llamar\u00e1 a una funci\u00f3n \" validar() \" que realizar\u00e1 las siguientes acciones: Si alguno de los campos est\u00e1 vac\u00edo mostrar\u00e1 un mensaje de error indic\u00e1ndolo. Si el campo no est\u00e1 vac\u00edo pero la longitud es inferior a 3 caracteres tambi\u00e9n se mostar\u00e1 un error indic\u00e1ndolo (ver la imagen inferior). Si no se produce ning\u00fan error aparecer\u00e1 el aviso: \"\u00a1Validaci\u00f3n correcta! Notas: * Si se pulsa varias veces el bot\u00f3n \"Entrar\" hay que actualizar los errores: si un error anterior ya no se produce el aviso tendr\u00e1 que desaparecer. * Solo se podr\u00e1 mostrar un mensaje de error por cada campo: campo requerido o longitud m\u00ednima incorrecta.","title":"Ejercicios 2"},{"location":"capitulo_ejercicios_2.html#ejercicios-2-ejercicios-sobre-javascript","text":"","title":"Ejercicios 2 - Ejercicios sobre JavaScript"},{"location":"capitulo_ejercicios_2.html#ejercicio-1-calculadora-sencilla-1-punto","text":"Para practicar con javascript vamos a crear una calculadora sencilla como la que se muestra en el siguiente esquema: Para ellos seguiremos los pasos: En primer lugar escribiremos el c\u00f3digo HTML para dise\u00f1ar una calculadora como la que se muestra en el esquema de la imagen. Es importante que asignemos un identificador \u00fanico a los campos tipo \" input \" de entrada de datos y al campo en el que se mostrar\u00e1 el resultado (para este campo podemos asignar un identificador a una etiqueta span vac\u00eda). Crearemos una funci\u00f3n para cada operaci\u00f3n que se llamar\u00e1 en el evento \" onclick \" de cada bot\u00f3n. Las funciones deben comprobar que se haya escrito alg\u00fan valor en los campos y en caso de error mostrar un aviso. Adem\u00e1s, en la funci\u00f3n de divisi\u00f3n se deber\u00e1 de comprobar que el resultado sea correcto (finito) y en caso de error se mostar\u00e1 tambi\u00e9n un mensaje. Para obtener o asignar valor a los campos tipo input usaremos su propiedad .value , mientrar que para asignar un valor a otro tipo de elementos HTML (como p\u00e1rrafos (p), cajas (div), span, etc.) utilizaremos su propiedad .innerHTML . Al obtener el valor de un input se obtiene con tipo cadena, para realizar las operaciones correctamente tendr\u00e9is que convertirlo a decimal mediante la funci\u00f3n parseFloat(valor) .","title":"Ejercicio 1 - Calculadora sencilla (1 punto)"},{"location":"capitulo_ejercicios_2.html#ejercicio-2-calculadora-avanzada-1-punto","text":"En este ejercicio vamos a crear una calculadora un poco m\u00e1s avanzada que la del ejercicio anterior. En primer lugar escribiremos el c\u00f3digo HTML para crear una calculadora con un dise\u00f1o similar al de la siguiente figura: Nos podemos ayudar de una tabla de HTML para la disposici\u00f3n de los elementos. La pantalla de la calculadora ser\u00e1 un campo DIV al cual asignaremos valores mediante la funci\u00f3n .innerHTML . El c\u00f3digo JavaScript constar\u00e1 de 3 funciones: Una funci\u00f3n \" limpiar() \" que se llamar\u00e1 al pulsar la tecla \"C\" y que borrar\u00e1 el contenido de la pantalla. Una funci\u00f3n \" setValue(valor) \" que a\u00f1adir\u00e1 el valor pasado por par\u00e1metro al contenido ya existente en la pantalla. Esta funci\u00f3n se utilizar\u00e1 tanto para a\u00f1adir n\u00fameros ( setValue(2) ) como para a\u00f1adir las operaciones ( setValue('+') ) y el separador decimal ( setValue('.') ). Una funci\u00f3n \" calcular() \" que calcular\u00e1 la operaci\u00f3n introducida en la pantalla y mostrar\u00e1 el resultado de la misma. Para realizar los c\u00e1lculos haremos uso de la funci\u00f3n de javascript eval , la cual evalua la expresi\u00f3n que recibe por par\u00e1metro y devuelve el resultado. Adem\u00e1s, dado que la expresi\u00f3n puede contener errores es necesario introducirla en un bloque try...catch como el siguiente: 1 2 3 4 5 try { pantalla . innerHTML = eval ( expr ); } catch ( e ) { // error } Notas: * Es necesario controlar los siguientes errores: * Cuando se llame a \" calcular() \" y no haya nada introducido en la pantalla. * Si se produce una excepci\u00f3n al evaluar la expresi\u00f3n. * Si el resultado de la operaci\u00f3n no es un n\u00famero o no es finito. * En caso de error se mostrar\u00e1 el aviso \"ERROR\" por la pantalla. * Despu\u00e9s de un error, si se pulsa limpiar o se introduce un valor se borrar\u00e1 el aviso.","title":"Ejercicio 2 - Calculadora avanzada (1 punto)"},{"location":"capitulo_ejercicios_2.html#ejercicio-3-validacion-de-un-formulario-1-punto","text":"En este \u00faltimo ejercicio vamos a crear un formulario para el acceso a la secci\u00f3n privada de una web mediante usuario y contrase\u00f1a, esto nos valdr\u00e1 para practicar con la funcionalidad de javascript validando sus campos. En primer lugar crearemos el HTML del formulario de login, el cual deber\u00e1 ser similar al de la siguiente imagen: El fondo de la web tendr\u00e1 el color \" gray \". La caja contenedora tendr\u00e1 un ancho de 400px y estar\u00e1 centrada en la pantalla. Su color de fondo ser\u00e1 #ccc y tendr\u00e1 un border de 2px de color silver . Adem\u00e1s tendr\u00e1 un espaciado interior de 30px. Se tendr\u00e1 que adaptar tambi\u00e9n el resto de elementos para que se muestren con un aspecto y disposici\u00f3n similar al de la figura. Se aconseja crear una secci\u00f3n de estilos CSS para agrupar los estilos del formulario. A continuaci\u00f3n crearemos una funci\u00f3n de JavaScript para realizar la validaci\u00f3n del formulario, la cual mostar\u00e1 los errores que hubiera o indicar\u00e1 que se ha validado correctamente. Para incluir los mensajes de error se pueden incluir directamente en el HTML inicial del formulario, pero se marcar\u00e1n como ocultos usando la propiedad CSS: display:none y cuando se quierdan mostrar se cambiar\u00e1 a display:block . Nota: para cambiar el estilo de un campo en JavaScript se puede hacer accediendo a su propiedad style de la forma: campo.style.display = 'block'; Al pulsar sobre el bot\u00f3n \"Entrar\" se llamar\u00e1 a una funci\u00f3n \" validar() \" que realizar\u00e1 las siguientes acciones: Si alguno de los campos est\u00e1 vac\u00edo mostrar\u00e1 un mensaje de error indic\u00e1ndolo. Si el campo no est\u00e1 vac\u00edo pero la longitud es inferior a 3 caracteres tambi\u00e9n se mostar\u00e1 un error indic\u00e1ndolo (ver la imagen inferior). Si no se produce ning\u00fan error aparecer\u00e1 el aviso: \"\u00a1Validaci\u00f3n correcta! Notas: * Si se pulsa varias veces el bot\u00f3n \"Entrar\" hay que actualizar los errores: si un error anterior ya no se produce el aviso tendr\u00e1 que desaparecer. * Solo se podr\u00e1 mostrar un mensaje de error por cada campo: campo requerido o longitud m\u00ednima incorrecta.","title":"Ejercicio 3 - Validaci\u00f3n de un formulario (1 punto)"},{"location":"capitulo_html.html","text":"Introducci\u00f3n a HTML \u00b6 HTML, siglas de HyperText Markup Language (Lenguaje de marcado de hipertexto), es el lenguaje de marcado predominante para la elaboraci\u00f3n de p\u00e1ginas web. Es usado para describir la estructura y el contenido en forma de texto, as\u00ed como para complementar el texto con objetos tales como im\u00e1genes. El c\u00f3digo HTML se escribe en forma de \"etiquetas\", mediante las cuales podemos describir la estructura l\u00f3gica y apariencia del contenido. La apariencia que podemos describir con HTML est\u00e1 bastante limitada, pero el c\u00f3digo se puede complementar y mejorar mediante el uso de otros lenguajes como JavaScript o CSS. En las siguientes secciones se realiza una introducci\u00f3n a las principales caracter\u00edsticas de HTML, partiendo desde los posibles editores m\u00e1s adecuados para escribir c\u00f3digo o la estructura b\u00e1sica que una p\u00e1gina HTML debe tener, hasta conceptos m\u00e1s avanzados como la inclusi\u00f3n de formularios o el manejo de los eventos producidos en una p\u00e1gina.","title":"Introducci\u00f3n"},{"location":"capitulo_html.html#introduccion-a-html","text":"HTML, siglas de HyperText Markup Language (Lenguaje de marcado de hipertexto), es el lenguaje de marcado predominante para la elaboraci\u00f3n de p\u00e1ginas web. Es usado para describir la estructura y el contenido en forma de texto, as\u00ed como para complementar el texto con objetos tales como im\u00e1genes. El c\u00f3digo HTML se escribe en forma de \"etiquetas\", mediante las cuales podemos describir la estructura l\u00f3gica y apariencia del contenido. La apariencia que podemos describir con HTML est\u00e1 bastante limitada, pero el c\u00f3digo se puede complementar y mejorar mediante el uso de otros lenguajes como JavaScript o CSS. En las siguientes secciones se realiza una introducci\u00f3n a las principales caracter\u00edsticas de HTML, partiendo desde los posibles editores m\u00e1s adecuados para escribir c\u00f3digo o la estructura b\u00e1sica que una p\u00e1gina HTML debe tener, hasta conceptos m\u00e1s avanzados como la inclusi\u00f3n de formularios o el manejo de los eventos producidos en una p\u00e1gina.","title":"Introducci\u00f3n a HTML"},{"location":"capitulo_html5.html","text":"Introducci\u00f3n a HTML 5 \u00b6 La quinta revisi\u00f3n del lenguaje de programaci\u00f3n HTML pretende remplazar al actual (X)HTML, corrigiendo problemas con los que los desarrolladores web se encuentran, as\u00ed como redise\u00f1ar el c\u00f3digo y actualiz\u00e1ndolo a nuevas necesidades que demanda la web de hoy en d\u00eda. Actualmente se encuentra en modo experimental, lo cual indica la misma W3C; aunque ya es usado por m\u00faltiples desarrolladores web por sus avances, mejoras y ventajas. A diferencia de otras versiones de HTML, los cambios en HTML5 comienzan a\u00f1adiendo sem\u00e1ntica y accesibilidad impl\u00edcitas. Establece una serie de nuevos elementos y atributos que reflejan el uso t\u00edpico de los sitios web modernos. Algunos de ellos son t\u00e9cnicamente similares a las etiquetas <div> y <span> , pero tienen un significado sem\u00e1ntico, como por ejemplo <nav> (bloque de navegaci\u00f3n del sitio web) o <footer> . Otros elementos proporcionan nuevas funcionalidades a trav\u00e9s de una interfaz estandarizada, como los elementos <audio> y <video> . Algunos elementos de HTML 4.01 han quedado obsoletos, incluyendo elementos puramente de presentaci\u00f3n, como <font> y <center> , cuyos efectos se deben de realizar utilizando CSS. Tambi\u00e9n hay un renovado \u00e9nfasis en la importancia del scripting DOM para el comportamiento de la web.","title":"Introducci\u00f3n"},{"location":"capitulo_html5.html#introduccion-a-html-5","text":"La quinta revisi\u00f3n del lenguaje de programaci\u00f3n HTML pretende remplazar al actual (X)HTML, corrigiendo problemas con los que los desarrolladores web se encuentran, as\u00ed como redise\u00f1ar el c\u00f3digo y actualiz\u00e1ndolo a nuevas necesidades que demanda la web de hoy en d\u00eda. Actualmente se encuentra en modo experimental, lo cual indica la misma W3C; aunque ya es usado por m\u00faltiples desarrolladores web por sus avances, mejoras y ventajas. A diferencia de otras versiones de HTML, los cambios en HTML5 comienzan a\u00f1adiendo sem\u00e1ntica y accesibilidad impl\u00edcitas. Establece una serie de nuevos elementos y atributos que reflejan el uso t\u00edpico de los sitios web modernos. Algunos de ellos son t\u00e9cnicamente similares a las etiquetas <div> y <span> , pero tienen un significado sem\u00e1ntico, como por ejemplo <nav> (bloque de navegaci\u00f3n del sitio web) o <footer> . Otros elementos proporcionan nuevas funcionalidades a trav\u00e9s de una interfaz estandarizada, como los elementos <audio> y <video> . Algunos elementos de HTML 4.01 han quedado obsoletos, incluyendo elementos puramente de presentaci\u00f3n, como <font> y <center> , cuyos efectos se deben de realizar utilizando CSS. Tambi\u00e9n hay un renovado \u00e9nfasis en la importancia del scripting DOM para el comportamiento de la web.","title":"Introducci\u00f3n a HTML 5"},{"location":"capitulo_html5_almacenamiento_offline.html","text":"Almacenamiento Offline \u00b6 El almacenamiento web est\u00e1 ampliamente soportado por los navegadores modernos, tanto en plataforma escritorio como en plataforma m\u00f3vil, Android 2.1+, iPhone 3.1+, iPad 4.2+, Opera Mobile 11.00+, Palm WebOS 1.4+ y BlackBerry 6.0+, Crome 4.0+, Firefox 3.5+, IE 8.0+, Opera 10.5+ y Safari 4.0+. Tipos de almacenamiento \u00b6 El almacenamiento web ofrece dos \u00e1reas de almacenamiento diferentes, el almacenamiento local ( localStorage ) y el almacenamiento por sesi\u00f3n ( sessionStorage ), que difieren en alcance y tiempo de vida. Los datos alojados en un almacenamiento local es solo accesible por dominio y persiste a\u00fan cuando se cierre el navegador. El almacenamiento por sesi\u00f3n es por ventana y su tiempo de vida est\u00e1 limitado a lo que dure la ventana (o pesta\u00f1a). Los datos se almacenan de forma muy sencilla, por pares clave/valor, de la forma: 1 2 3 4 5 // Para almacenamiento persistente en local: localStorage . setItem ( \"miValor\" , valor ); // Para almacenamiento por sesi\u00f3n: sessionStorage . setItem ( \"miValor\" , valor ); Para recuperarlos posteriormente solo tenemos que hacer: 1 2 var miValor = localStorage . getItem ( \"miValor\" ); var miValor = sessionStorage . getItem ( \"miValor\" ); Las variables guardadas con sessionStorage s\u00f3lo se mantendr\u00edan en caso de que cambiemos de p\u00e1gina o que el navegador se refresque, mientras que localStorage guardar\u00eda los datos aunque el navegador sea cerrado. Tambi\u00e9n podemos borrar los valores almacenados, indicando un valor en concreto o todos ellos: 1 2 localStorage . remove ( \"miValor\" ); localStorage . clear (); Offline Application Cache (appCache) \u00b6 Esta nueva caracter\u00edstica de HTML5 permite ejecutar aplicaciones Web aun cuando no estamos conectados a Internet. Al visitar por primera vez una p\u00e1gina web (que use appCache) el navegador descarga y guarda todos los archivos necesarios para esa p\u00e1gina. La siguiente vez que la visitemos el navegador usar\u00e1 directamente los archivos descargados (a no ser que estemos conectados y se compruebe que hay una versi\u00f3n m\u00e1s actual de la Web). El principal componente del appCache es el archivo de manifiesto (manifest file), un archivo de texto con la lista de archivos que el navegador cliente debe almacenar. En primer lugar, para usar esta caracter\u00edstica debemos de indicar el archivo de manifiesto en la etiqueta de apertura HTML: 1 < html manifest = \"app.manifest\" > Este fichero debe de empezar con el texto CACHE MANIFEST . A continuaci\u00f3n en cada nueva l\u00ednea indicaremos un recurso a almacenar (usando URLs absolutas o relativas), adem\u00e1s podemos poner comentarios anteponiendo el s\u00edmbolo \"#\". 1 2 3 4 5 6 7 CACHE MANIFEST # Esto es un comentario index.html js/scripts.js css/estilos.css imgs/logo.gif imgs/image1.jpg Una vez cargada la p\u00e1gina, la \u00fanica petici\u00f3n que realizar\u00e1 el navegador ser\u00e1 por el fichero de manifiest . Aunque solo haya cambiado un letra del fichero, se descargar\u00e1n todos los recursos de nuevo. Para asegurarnos que servimos la \u00faltima versi\u00f3n de nuestra p\u00e1gina cuando realizamos cambios, la forma m\u00e1s sencilla y segura es actualizar el fichero de manifiesto con un comentario indicando la fecha de la \u00faltima actualizaci\u00f3n (o un n\u00famero de versi\u00f3n, etc.), de la forma: 1 2 CACHE MANIFEST # Actualizado el 2011-10-12 Para m\u00e1s informaci\u00f3n pod\u00e9is consultar las fuentes: http://www.w3.org/TR/offline-webapps/ http://www.w3.org/TR/html5/offline.html","title":"Almacenamiento Offline"},{"location":"capitulo_html5_almacenamiento_offline.html#almacenamiento-offline","text":"El almacenamiento web est\u00e1 ampliamente soportado por los navegadores modernos, tanto en plataforma escritorio como en plataforma m\u00f3vil, Android 2.1+, iPhone 3.1+, iPad 4.2+, Opera Mobile 11.00+, Palm WebOS 1.4+ y BlackBerry 6.0+, Crome 4.0+, Firefox 3.5+, IE 8.0+, Opera 10.5+ y Safari 4.0+.","title":"Almacenamiento Offline"},{"location":"capitulo_html5_almacenamiento_offline.html#tipos-de-almacenamiento","text":"El almacenamiento web ofrece dos \u00e1reas de almacenamiento diferentes, el almacenamiento local ( localStorage ) y el almacenamiento por sesi\u00f3n ( sessionStorage ), que difieren en alcance y tiempo de vida. Los datos alojados en un almacenamiento local es solo accesible por dominio y persiste a\u00fan cuando se cierre el navegador. El almacenamiento por sesi\u00f3n es por ventana y su tiempo de vida est\u00e1 limitado a lo que dure la ventana (o pesta\u00f1a). Los datos se almacenan de forma muy sencilla, por pares clave/valor, de la forma: 1 2 3 4 5 // Para almacenamiento persistente en local: localStorage . setItem ( \"miValor\" , valor ); // Para almacenamiento por sesi\u00f3n: sessionStorage . setItem ( \"miValor\" , valor ); Para recuperarlos posteriormente solo tenemos que hacer: 1 2 var miValor = localStorage . getItem ( \"miValor\" ); var miValor = sessionStorage . getItem ( \"miValor\" ); Las variables guardadas con sessionStorage s\u00f3lo se mantendr\u00edan en caso de que cambiemos de p\u00e1gina o que el navegador se refresque, mientras que localStorage guardar\u00eda los datos aunque el navegador sea cerrado. Tambi\u00e9n podemos borrar los valores almacenados, indicando un valor en concreto o todos ellos: 1 2 localStorage . remove ( \"miValor\" ); localStorage . clear ();","title":"Tipos de almacenamiento"},{"location":"capitulo_html5_almacenamiento_offline.html#offline-application-cache-appcache","text":"Esta nueva caracter\u00edstica de HTML5 permite ejecutar aplicaciones Web aun cuando no estamos conectados a Internet. Al visitar por primera vez una p\u00e1gina web (que use appCache) el navegador descarga y guarda todos los archivos necesarios para esa p\u00e1gina. La siguiente vez que la visitemos el navegador usar\u00e1 directamente los archivos descargados (a no ser que estemos conectados y se compruebe que hay una versi\u00f3n m\u00e1s actual de la Web). El principal componente del appCache es el archivo de manifiesto (manifest file), un archivo de texto con la lista de archivos que el navegador cliente debe almacenar. En primer lugar, para usar esta caracter\u00edstica debemos de indicar el archivo de manifiesto en la etiqueta de apertura HTML: 1 < html manifest = \"app.manifest\" > Este fichero debe de empezar con el texto CACHE MANIFEST . A continuaci\u00f3n en cada nueva l\u00ednea indicaremos un recurso a almacenar (usando URLs absolutas o relativas), adem\u00e1s podemos poner comentarios anteponiendo el s\u00edmbolo \"#\". 1 2 3 4 5 6 7 CACHE MANIFEST # Esto es un comentario index.html js/scripts.js css/estilos.css imgs/logo.gif imgs/image1.jpg Una vez cargada la p\u00e1gina, la \u00fanica petici\u00f3n que realizar\u00e1 el navegador ser\u00e1 por el fichero de manifiest . Aunque solo haya cambiado un letra del fichero, se descargar\u00e1n todos los recursos de nuevo. Para asegurarnos que servimos la \u00faltima versi\u00f3n de nuestra p\u00e1gina cuando realizamos cambios, la forma m\u00e1s sencilla y segura es actualizar el fichero de manifiesto con un comentario indicando la fecha de la \u00faltima actualizaci\u00f3n (o un n\u00famero de versi\u00f3n, etc.), de la forma: 1 2 CACHE MANIFEST # Actualizado el 2011-10-12 Para m\u00e1s informaci\u00f3n pod\u00e9is consultar las fuentes: http://www.w3.org/TR/offline-webapps/ http://www.w3.org/TR/html5/offline.html","title":"Offline Application Cache (appCache)"},{"location":"capitulo_html5_audio.html","text":"Audio \u00b6 El nuevo elemento audio permite insertar archivos sonoros en diferentes formatos, incluyendo mp3 y ogg. Adem\u00e1s provee de una interfaz de control sobre la reproducci\u00f3n del mismo con una API en JavaScript sin necesidad de plugins de ning\u00fan tipo (como Flash). A\u00f1adir un reproductor de audio en HTML5 es muy simple: 1 2 3 < audio src = \"archivo.mp3\" controls > < p > Tu navegador no soporta el elemento audio </ p > </ audio > En Firefox obtendr\u00edamos un resultado similar a: El texto que se encuentra entre las etiquetas audio solo es tenido en cuenta por navegadores que no soporten la nueva etiqueta. El atributo \"controls\" indica al navegador que muestre los controles de reproducci\u00f3n. En caso de no activarlo no se visualizar\u00eda nada, pero podr\u00edamos controlar la reproducci\u00f3n mediante funciones JavaScript, de la forma: 1 2 3 4 5 < audio id = \"player\" src = \"archivo.mp3\" ></ audio > < button onclick = \"document.getElementById(\u2019player\u2019).play();\" > Reproducir </ button > < button onclick = \"document.getElementById(\u2019player\u2019).pause();\" > Pausa </ button > < button onclick = \"document.getElementById(\u2019player\u2019).volume += 0.1;\" > Subir Volumen </ button > < button onclick = \"document.getElementById(\u2019player\u2019).volume -= 0.1;\" > Bajar Volumen </ button > Tambi\u00e9n podemos usar los atributos \"autoplay\" y \"loop\" para que se auto-reproduzca y para que se cree un bucle de reproducci\u00f3n infinito: 1 < audio src = \"archivo.mp3\" autoplay loop ></ audio > El formato de audio a utilizar vendr\u00e1 impuesto por el navegador usado y no por el est\u00e1ndar: C\u00f3dec IE>=9 Firefox Chrome Safari Opera Ogg Vorbis no s\u00ed s\u00ed no s\u00ed WAV PCM no s\u00ed s\u00ed s\u00ed s\u00ed MP3 s\u00ed no s\u00ed s\u00ed s\u00ed AAC s\u00ed no s\u00ed s\u00ed s\u00ed Speex no no s\u00ed no no Como puede verse, combinando Vorbis y MP3 podremos ofrecer audio a todos los navegadores mayoritarios. Existe una forma de definir m\u00e1s de un archivo de audio para la etiqueta audio, en lugar de usar el atributo \"src\", utilizaremos la etiqueta \"source\" para poder definir m\u00faltiples archivos. Estas etiquetas se ir\u00e1n leyendo de arriba a abajo hasta que el navegador encuentre un formato soportado. De esta manera podremos complacer las necesidades de todos los usuarios sin discriminar a ning\u00fan navegador. 1 2 3 4 5 6 7 8 < audio controls > < source src = \"archivo.ogg\" type = \"audio/ogg\" /> < source src = \"archivo.mp3\" type = \"audio/mpeg\" /> < object type = \"application/x-shockwave-flash\" data = \"player.swf?soundFile=archivo.mp3\" > < param name = \"movie\" value = \"player.swf?soundFile=archivo.mp3\" /> < a href = \"archivo.mp3\" > Descarga el archivo de audio </ a > </ object > </ audio > En este ejemplo hemos a\u00f1adido adem\u00e1s una tercera l\u00ednea con un reproductor Flash por si no fuesen soportados ninguno de los formatos anteriores, y un link directo de descarga para aquellos que tampoco soporten Flash. As\u00ed estaremos ofreciendo nuestro contenido a todos los navegadores y dispositivos manteniendo unas buenas pr\u00e1cticas en cuanto a accesibilidad del contenido se refiere.","title":"Audio"},{"location":"capitulo_html5_audio.html#audio","text":"El nuevo elemento audio permite insertar archivos sonoros en diferentes formatos, incluyendo mp3 y ogg. Adem\u00e1s provee de una interfaz de control sobre la reproducci\u00f3n del mismo con una API en JavaScript sin necesidad de plugins de ning\u00fan tipo (como Flash). A\u00f1adir un reproductor de audio en HTML5 es muy simple: 1 2 3 < audio src = \"archivo.mp3\" controls > < p > Tu navegador no soporta el elemento audio </ p > </ audio > En Firefox obtendr\u00edamos un resultado similar a: El texto que se encuentra entre las etiquetas audio solo es tenido en cuenta por navegadores que no soporten la nueva etiqueta. El atributo \"controls\" indica al navegador que muestre los controles de reproducci\u00f3n. En caso de no activarlo no se visualizar\u00eda nada, pero podr\u00edamos controlar la reproducci\u00f3n mediante funciones JavaScript, de la forma: 1 2 3 4 5 < audio id = \"player\" src = \"archivo.mp3\" ></ audio > < button onclick = \"document.getElementById(\u2019player\u2019).play();\" > Reproducir </ button > < button onclick = \"document.getElementById(\u2019player\u2019).pause();\" > Pausa </ button > < button onclick = \"document.getElementById(\u2019player\u2019).volume += 0.1;\" > Subir Volumen </ button > < button onclick = \"document.getElementById(\u2019player\u2019).volume -= 0.1;\" > Bajar Volumen </ button > Tambi\u00e9n podemos usar los atributos \"autoplay\" y \"loop\" para que se auto-reproduzca y para que se cree un bucle de reproducci\u00f3n infinito: 1 < audio src = \"archivo.mp3\" autoplay loop ></ audio > El formato de audio a utilizar vendr\u00e1 impuesto por el navegador usado y no por el est\u00e1ndar: C\u00f3dec IE>=9 Firefox Chrome Safari Opera Ogg Vorbis no s\u00ed s\u00ed no s\u00ed WAV PCM no s\u00ed s\u00ed s\u00ed s\u00ed MP3 s\u00ed no s\u00ed s\u00ed s\u00ed AAC s\u00ed no s\u00ed s\u00ed s\u00ed Speex no no s\u00ed no no Como puede verse, combinando Vorbis y MP3 podremos ofrecer audio a todos los navegadores mayoritarios. Existe una forma de definir m\u00e1s de un archivo de audio para la etiqueta audio, en lugar de usar el atributo \"src\", utilizaremos la etiqueta \"source\" para poder definir m\u00faltiples archivos. Estas etiquetas se ir\u00e1n leyendo de arriba a abajo hasta que el navegador encuentre un formato soportado. De esta manera podremos complacer las necesidades de todos los usuarios sin discriminar a ning\u00fan navegador. 1 2 3 4 5 6 7 8 < audio controls > < source src = \"archivo.ogg\" type = \"audio/ogg\" /> < source src = \"archivo.mp3\" type = \"audio/mpeg\" /> < object type = \"application/x-shockwave-flash\" data = \"player.swf?soundFile=archivo.mp3\" > < param name = \"movie\" value = \"player.swf?soundFile=archivo.mp3\" /> < a href = \"archivo.mp3\" > Descarga el archivo de audio </ a > </ object > </ audio > En este ejemplo hemos a\u00f1adido adem\u00e1s una tercera l\u00ednea con un reproductor Flash por si no fuesen soportados ninguno de los formatos anteriores, y un link directo de descarga para aquellos que tampoco soporten Flash. As\u00ed estaremos ofreciendo nuestro contenido a todos los navegadores y dispositivos manteniendo unas buenas pr\u00e1cticas en cuanto a accesibilidad del contenido se refiere.","title":"Audio"},{"location":"capitulo_html5_canvas.html","text":"Canvas \u00b6 El elemento canvas puede definirse como un entorno para crear im\u00e1genes din\u00e1micas. Utilizando su API en JavaScript podemos manipular el elemento canvas para dibujar en \u00e9l y crear gr\u00e1ficos din\u00e1micos de todo tipo (incluidas interfaces de aplicaciones web completas). La API, aunque de momento est\u00e1 en desarrollo, la podemos encontrar en: http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html Para empezar a usarlo lo \u00fanico que hay que especificar son sus dimensiones. El texto que escribamos entre la apertura y cierre de la etiqueta canvas solamente ser\u00e1 interpretado por navegadores que no soporten esta etiqueta: 1 2 3 < canvas id = \"myCanvas\" width = \"360\" height = \"240\" > < p > Tu navegador no soporta canvas </ p > </ canvas > El resto de trabajo con canvas se ha de realizar con c\u00f3digo JavaScript. Primero debemos referenciar este elemento y adquirir su contexto (que de momento solo est\u00e1 disponible para 2D): 1 2 var canvas = document . getElementById ( \u2019 myCanvas \u2019 ); var context = canvas . getContext ( \u2019 2 d \u2019 ); Una vez adquirimos el contexto podemos empezar a dibujar. La API bidimensional ofrece muchas de las herramientas que podemos encontrar en cualquier aplicaci\u00f3n de dise\u00f1o gr\u00e1fico: trazos, rellenos, gradientes, sombras, formas y curvas B\u00e9zier. Los principales m\u00e9todos disponibles son: fillRect(x, y, width, height) : dibuja un rect\u00e1ngulo relleno de color seg\u00fan el estilo activado. strokeRect(x, y, width, height) : dibuja solo el borde de un rect\u00e1ngulo, el interior ser\u00e1 transparente. clearRect(x, y, width, height) : borra el \u00e1rea indicada. beginPath() : inicializa el dibujado de un \"trazo\". closePath() : cierra la figura creando una l\u00ednea desde el \u00faltimo punto hasta el primero. moveTo(x, y) : mueve el puntero del trazo hasta las coordenadas indicadas (para poder seguir dibujando). lineTo(x, y) : dibuja un trazo desde la posici\u00f3n actual hasta las coordenadas indicadas. stroke() : dibuja el trazo indicado desde el \u00faltimo \"beginPath()\". fill() : cierra el trazo definido desde el \u00faltimo \"beginPath()\" y lo rellena. arc(x, y, radius, startAngle, endAngle, anticlockwise) : dibuja un arco con centro en \"x, y\" y el radio definido. Los \u00e1ngulos se definen en radianes (radianes = (PI/180)*grados) y el \u00faltimo par\u00e1metro es un valor booleano. quadraticCurveTo(controlx, controly, x, y) : dibuja una curva de bezier cuadr\u00e1tica. bezierCurveTo( control1x, control1y, control2x, control2y, x, y) : dibuja una curva de bezier c\u00fabica. drawImage(x, y) : dibuja una imagen (como objeto JavaScript) en el canvas. createImageData(width, height) : crea un objeto ImageData como un array de p\u00edxeles para ser manipulado como un array de enteros. getImageData(x, y, w, h) : carga un objeto ImageData a partir del dibujo actual para ser manipulado. putImageData(imageData, x, y) : mapea los valores de un objeto ImageData en el dibujo actual. strokeText(string, x, y) : dibuja una cadena de texto usando solo su borde. fillText(string, x, y) : dibuja una cadena de texto. A continuaci\u00f3n mostramos un ejemplo de dibujado en un objeto canvas una vez capturado su contexto: 1 2 3 4 5 6 7 8 9 10 // Primero definimos las propiedades con las que vamos a dibujar context . fillStyle = \u2019# 0000 ff \u2019 ; // color de relleno azul context . strokeStyle = \u2019# ff0000 \u2019 ; // color de borde rojo context . lineWidth = 4 ; // grosor de l\u00ednea // Y a continuaci\u00f3n dibujar algunas figuras context . fillRect ( 0 , 0 , 150 , 50 ); // rect\u00e1ngulo relleno context . strokeRect ( 0 , 60 , 150 , 50 ); // rect\u00e1ngulo solo borde context . clearRect ( 30 , 25 , 90 , 60 ); // borrar \u00e1rea del canvas context . strokeRect ( 30 , 25 , 90 , 60 ); // Orden de coordenadas: izqda, arriba, ancho, largo Obteniendo finalmente un resultado similar a: Webs muy importantes est\u00e1n cambiando sus contenidos a canvas y dejando de usar Flash, como Slideshare (ver http://www.slideshare.net/AmitRanjan/slideshare-is-html5-now ).","title":"Canvas"},{"location":"capitulo_html5_canvas.html#canvas","text":"El elemento canvas puede definirse como un entorno para crear im\u00e1genes din\u00e1micas. Utilizando su API en JavaScript podemos manipular el elemento canvas para dibujar en \u00e9l y crear gr\u00e1ficos din\u00e1micos de todo tipo (incluidas interfaces de aplicaciones web completas). La API, aunque de momento est\u00e1 en desarrollo, la podemos encontrar en: http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html Para empezar a usarlo lo \u00fanico que hay que especificar son sus dimensiones. El texto que escribamos entre la apertura y cierre de la etiqueta canvas solamente ser\u00e1 interpretado por navegadores que no soporten esta etiqueta: 1 2 3 < canvas id = \"myCanvas\" width = \"360\" height = \"240\" > < p > Tu navegador no soporta canvas </ p > </ canvas > El resto de trabajo con canvas se ha de realizar con c\u00f3digo JavaScript. Primero debemos referenciar este elemento y adquirir su contexto (que de momento solo est\u00e1 disponible para 2D): 1 2 var canvas = document . getElementById ( \u2019 myCanvas \u2019 ); var context = canvas . getContext ( \u2019 2 d \u2019 ); Una vez adquirimos el contexto podemos empezar a dibujar. La API bidimensional ofrece muchas de las herramientas que podemos encontrar en cualquier aplicaci\u00f3n de dise\u00f1o gr\u00e1fico: trazos, rellenos, gradientes, sombras, formas y curvas B\u00e9zier. Los principales m\u00e9todos disponibles son: fillRect(x, y, width, height) : dibuja un rect\u00e1ngulo relleno de color seg\u00fan el estilo activado. strokeRect(x, y, width, height) : dibuja solo el borde de un rect\u00e1ngulo, el interior ser\u00e1 transparente. clearRect(x, y, width, height) : borra el \u00e1rea indicada. beginPath() : inicializa el dibujado de un \"trazo\". closePath() : cierra la figura creando una l\u00ednea desde el \u00faltimo punto hasta el primero. moveTo(x, y) : mueve el puntero del trazo hasta las coordenadas indicadas (para poder seguir dibujando). lineTo(x, y) : dibuja un trazo desde la posici\u00f3n actual hasta las coordenadas indicadas. stroke() : dibuja el trazo indicado desde el \u00faltimo \"beginPath()\". fill() : cierra el trazo definido desde el \u00faltimo \"beginPath()\" y lo rellena. arc(x, y, radius, startAngle, endAngle, anticlockwise) : dibuja un arco con centro en \"x, y\" y el radio definido. Los \u00e1ngulos se definen en radianes (radianes = (PI/180)*grados) y el \u00faltimo par\u00e1metro es un valor booleano. quadraticCurveTo(controlx, controly, x, y) : dibuja una curva de bezier cuadr\u00e1tica. bezierCurveTo( control1x, control1y, control2x, control2y, x, y) : dibuja una curva de bezier c\u00fabica. drawImage(x, y) : dibuja una imagen (como objeto JavaScript) en el canvas. createImageData(width, height) : crea un objeto ImageData como un array de p\u00edxeles para ser manipulado como un array de enteros. getImageData(x, y, w, h) : carga un objeto ImageData a partir del dibujo actual para ser manipulado. putImageData(imageData, x, y) : mapea los valores de un objeto ImageData en el dibujo actual. strokeText(string, x, y) : dibuja una cadena de texto usando solo su borde. fillText(string, x, y) : dibuja una cadena de texto. A continuaci\u00f3n mostramos un ejemplo de dibujado en un objeto canvas una vez capturado su contexto: 1 2 3 4 5 6 7 8 9 10 // Primero definimos las propiedades con las que vamos a dibujar context . fillStyle = \u2019# 0000 ff \u2019 ; // color de relleno azul context . strokeStyle = \u2019# ff0000 \u2019 ; // color de borde rojo context . lineWidth = 4 ; // grosor de l\u00ednea // Y a continuaci\u00f3n dibujar algunas figuras context . fillRect ( 0 , 0 , 150 , 50 ); // rect\u00e1ngulo relleno context . strokeRect ( 0 , 60 , 150 , 50 ); // rect\u00e1ngulo solo borde context . clearRect ( 30 , 25 , 90 , 60 ); // borrar \u00e1rea del canvas context . strokeRect ( 30 , 25 , 90 , 60 ); // Orden de coordenadas: izqda, arriba, ancho, largo Obteniendo finalmente un resultado similar a: Webs muy importantes est\u00e1n cambiando sus contenidos a canvas y dejando de usar Flash, como Slideshare (ver http://www.slideshare.net/AmitRanjan/slideshare-is-html5-now ).","title":"Canvas"},{"location":"capitulo_html5_deteccion.html","text":"Detectar funcionalidades de HTML5 \u00b6 Modernizr es una librer\u00eda de JavaScript con licencia MIT de c\u00f3digo abierto que detecta si son compatibles elementos de HTML5 y CSS3. Podemos descargar la librer\u00eda desde \" http://www.modernizr.com/ \". Para utilizarla solo hay que incluir en el <head> de tu p\u00e1gina de la forma: 1 2 3 < head > < script src = \"modernizr.min.js\" ></ script > </ head > Modernizr se ejecuta autom\u00e1ticamente, no es necesario llamar a ninguna funci\u00f3n. Cuando se ejecuta, se crea una objeto global llamado Modernizr , que contiene un set de propiedades Boleanas para cada elemento que detecta. Por ejemplo si su navegador soporta elementos canvas , la propiedad de la librer\u00eda \" Modernizr.canvas \" ser\u00e1 \u201c true \u201d. Si tu navegador no soporta los elementos canvas , la propiedad ser\u00e1 \u201c false \u201d, de la forma: 1 2 3 4 5 if ( Modernizr . canvas ) { // s\u00ed que hay soporte } else { // no hay soporte para canvas } Para comprobar elementos de un formulario tambi\u00e9n podemos crearnos dos simples funciones que validan el soporte para diferentes tipos de inputs y atributos: Comprobar si un input es soportado \u00b6 Con la siguiente funci\u00f3n podemos comprobar si un navegador soporta o no los nuevos tipos de inputs: 1 2 3 4 5 6 7 8 9 function inputSupports ( tipo ) { var input = document . createElement ( \u2019 input \u2019 ); input . setAttribute ( \u2019 type \u2019 , tipo ); if ( input . type == \u2019 text \u2019 ) { return false ; } else { return true ; } } Por lo que podemos usarlo de la siguiente forma: 1 2 3 if ( ! inputSupports ( \u2019 range \u2019 )) { // Input tipo range no soportado } Comprobar si un atributo es soportado \u00b6 Para comprobar si hay soporte para un atributo 1 2 3 4 5 6 7 8 function attrSupports ( el , attr ) { var telement = document . createElement ( el ); if ( attr in telement ) { return true ; } else { return false ; } } Por lo que podemos usarlo para comprobar, por ejemplo, los atributos autofocus, placeholder o required: 1 2 3 4 5 6 7 8 9 if ( ! attrSupports ( \u2019 input \u2019 , \u2019 autofocus \u2019 )) { document . getElementById ( \u2019 search_string \u2019 ). focus (); } if ( ! attrSupports ( \u2019 input \u2019 , \u2019 placeholder \u2019 )) { // Atributo placeholder no soportado } if ( ! attrSupports ( \u2018 input \u2019 , \u2018 required \u2019 )) { // Atributo required no soportado }","title":"Detectar funcionalidades de HTML 5"},{"location":"capitulo_html5_deteccion.html#detectar-funcionalidades-de-html5","text":"Modernizr es una librer\u00eda de JavaScript con licencia MIT de c\u00f3digo abierto que detecta si son compatibles elementos de HTML5 y CSS3. Podemos descargar la librer\u00eda desde \" http://www.modernizr.com/ \". Para utilizarla solo hay que incluir en el <head> de tu p\u00e1gina de la forma: 1 2 3 < head > < script src = \"modernizr.min.js\" ></ script > </ head > Modernizr se ejecuta autom\u00e1ticamente, no es necesario llamar a ninguna funci\u00f3n. Cuando se ejecuta, se crea una objeto global llamado Modernizr , que contiene un set de propiedades Boleanas para cada elemento que detecta. Por ejemplo si su navegador soporta elementos canvas , la propiedad de la librer\u00eda \" Modernizr.canvas \" ser\u00e1 \u201c true \u201d. Si tu navegador no soporta los elementos canvas , la propiedad ser\u00e1 \u201c false \u201d, de la forma: 1 2 3 4 5 if ( Modernizr . canvas ) { // s\u00ed que hay soporte } else { // no hay soporte para canvas } Para comprobar elementos de un formulario tambi\u00e9n podemos crearnos dos simples funciones que validan el soporte para diferentes tipos de inputs y atributos:","title":"Detectar funcionalidades de HTML5"},{"location":"capitulo_html5_deteccion.html#comprobar-si-un-input-es-soportado","text":"Con la siguiente funci\u00f3n podemos comprobar si un navegador soporta o no los nuevos tipos de inputs: 1 2 3 4 5 6 7 8 9 function inputSupports ( tipo ) { var input = document . createElement ( \u2019 input \u2019 ); input . setAttribute ( \u2019 type \u2019 , tipo ); if ( input . type == \u2019 text \u2019 ) { return false ; } else { return true ; } } Por lo que podemos usarlo de la siguiente forma: 1 2 3 if ( ! inputSupports ( \u2019 range \u2019 )) { // Input tipo range no soportado }","title":"Comprobar si un input es soportado"},{"location":"capitulo_html5_deteccion.html#comprobar-si-un-atributo-es-soportado","text":"Para comprobar si hay soporte para un atributo 1 2 3 4 5 6 7 8 function attrSupports ( el , attr ) { var telement = document . createElement ( el ); if ( attr in telement ) { return true ; } else { return false ; } } Por lo que podemos usarlo para comprobar, por ejemplo, los atributos autofocus, placeholder o required: 1 2 3 4 5 6 7 8 9 if ( ! attrSupports ( \u2019 input \u2019 , \u2019 autofocus \u2019 )) { document . getElementById ( \u2019 search_string \u2019 ). focus (); } if ( ! attrSupports ( \u2019 input \u2019 , \u2019 placeholder \u2019 )) { // Atributo placeholder no soportado } if ( ! attrSupports ( \u2018 input \u2019 , \u2018 required \u2019 )) { // Atributo required no soportado }","title":"Comprobar si un atributo es soportado"},{"location":"capitulo_html5_doctype.html","text":"Doctype \u00b6 El doctype es el encargado de indicarle al navegador el tipo de documento que est\u00e1 abriendo, con el fin de renderizar la pagina de manera correcta. Por ejemplo, el doctype de HTML 4 es: 1 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> Para HTML 5 el doctype se ha simplificado mucho y adem\u00e1s es compatible con las versiones anteriores de HTML: 1 <!DOCTYPE html>","title":"Doctype"},{"location":"capitulo_html5_doctype.html#doctype","text":"El doctype es el encargado de indicarle al navegador el tipo de documento que est\u00e1 abriendo, con el fin de renderizar la pagina de manera correcta. Por ejemplo, el doctype de HTML 4 es: 1 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> Para HTML 5 el doctype se ha simplificado mucho y adem\u00e1s es compatible con las versiones anteriores de HTML: 1 <!DOCTYPE html>","title":"Doctype"},{"location":"capitulo_html5_estructura_semantica.html","text":"Estructura sem\u00e1ntica \u00b6 Hasta ahora se utilizaba de forma abusiva la etiqueta <div> y las tablas para estructurar una web en bloques. El HTML5 nos brinda nuevas etiquetas que perfeccionan esta estructuraci\u00f3n. Estas nuevas etiquetas introducen un nuevo nivel sem\u00e1ntico que hace que la estructura de la web sea m\u00e1s coherente y f\u00e1cil de entender. Adem\u00e1s los navegadores podr\u00e1n darle m\u00e1s importancia a determinadas secciones, facilit\u00e1ndole adem\u00e1s la tarea a los buscadores, as\u00ed como cualquier otra aplicaci\u00f3n que interprete sitios Web. En la siguiente imagen se puede ver una comparaci\u00f3n entre la estructuraci\u00f3n realizada con HTML (hasta la versi\u00f3n 4) y HTML 5: Las Webs se dividir\u00e1n en los siguientes elementos: <section></section> : Se utiliza para representar una secci\u00f3n \u201cgeneral\u201d dentro de un documento o aplicaci\u00f3n, como un cap\u00edtulo de un libro. Puede contener subsecciones y si lo acompa\u00f1amos de las etiquetas <h1>..<h6> podemos estructurar mejor toda la p\u00e1gina creando jerarqu\u00edas del contenido, algo muy favorable para el buen posicionamiento web. Por ejemplo: 1 2 3 4 5 6 < section > < h1 > Introducci\u00f3n al elemento section </ h1 > < p > El elemento section se usa para agrupar contenido relacionado entre si. </ p > < p > ... </ p > </ section > <article></article> : Se usa para definir contenido aut\u00f3nomo e independiente, con la intenci\u00f3n de ser reutilizable de modo aislado. El elemento article puede contener uno o varios elementos section. Si por ejemplo nuestro contenido puede ser redistribuido como RSS y sigue manteniendo \u00edntegro su significado, entonces, probablemente es un elemento article. De hecho, el elemento article est\u00e1 especialmente indicado para sindicaci\u00f3n. El elemento article es especialmente \u00fatil para posts en blogs, noticias en prensa digital, comentarios y posts en foros. La especificaci\u00f3n de HTML5 a\u00f1ade adem\u00e1s que el elemento article debe ser usado por widgets aut\u00f3nomos como; calculadoras, relojes, marcos de clima y cosas por el estilo. Hay que analizar si el contenido de un widget es aut\u00f3nomo, independiente y puede ser reutilizable o incluso sindicado. <aside></aside> : Representa una secci\u00f3n de la p\u00e1gina que abarca un contenido no directamente relacionado con el contenido que lo rodea, por lo que se le puede considerar un contenido independiente. Dentro de este elemento pueden incluirse: elementos publicitarios, barras laterales, grupos de elementos de la navegaci\u00f3n, efectos tipogr\u00e1ficos, u otro contenido que se considere separado del contenido principal de la p\u00e1gina. <header></header> : Es la cabecera de la p\u00e1gina o de una secci\u00f3n. Existe una diferencia clave entre el elemento header y el uso habitual del t\u00e9rmino header (o cabecera) utilizado com\u00fanmente para situar los elementos del encabezado de un sitio web. Una p\u00e1gina web debe definir un header principal donde normalmente ir\u00e1 el logo o el nombre del sitio y seguramente un men\u00fa de navegaci\u00f3n, pero adem\u00e1s puede \u2014y debe\u2014 definir otros elementos <header> dentro de los elementos <section> : 1 2 3 4 5 6 < section > < header > < h1 > Cabecera se secci\u00f3n </ h1 > </ header > < p > ... </ p > </ section > <nav></nav> : Contiene informaci\u00f3n sobre la navegaci\u00f3n por el sitio web, usualmente una lista de enlaces. Este elemento debe de ser utilizado solo para la navegaci\u00f3n principal del sitio y no para enlaces externos por ejemplo. Normalmente el elemento nav aparece dentro de un elemento header o footer . <footer></footer> : Representa el pi\u00e9 de una secci\u00f3n o la parte inferior de una p\u00e1gina Web, contiene informaci\u00f3n acerca de la p\u00e1gina/secci\u00f3n que poco tiene que ver con el contenido de la p\u00e1gina, como el autor, el copyright, la fecha de \u00faltima modificaci\u00f3n, etc. Igual que con la etiqueta <header> , este elemento tambi\u00e9n se puede utilizar dentro de una secci\u00f3n para indicar informaci\u00f3n como: quien lo ha escrito, informaci\u00f3n de propiedad intelectual, enlaces, etc. Es muy importante tener en cuenta que estas etiquetas no indican su posici\u00f3n en la p\u00e1gina Web, sino su valor sem\u00e1ntico. Por ejemplo, las etiquetas header, footer o aside no indican que esos elementos tengan que ir en la parte superior, inferior o lateral del contenido principal, sino que indican su funci\u00f3n en esa secci\u00f3n o en esa p\u00e1gina. Adem\u00e1s debemos tener en cuenta que estas nuevas etiquetas se comportan igual que una etiqueta de caja <div> por lo que podemos aplicarles los mismos estilos CSS. Podemos redefinir la propia etiqueta o aplicarle una clase, por ejemplo: 1 2 3 header { width : 100 % ; padding : 10 px ; margin-bottom : 20 px ; } . webheader { height : 30 px ; border : 1 px solid gray ; background-color : silver ; } . sectionheader { font-size : 20 px ; }","title":"Estructura sem\u00e1ntica"},{"location":"capitulo_html5_estructura_semantica.html#estructura-semantica","text":"Hasta ahora se utilizaba de forma abusiva la etiqueta <div> y las tablas para estructurar una web en bloques. El HTML5 nos brinda nuevas etiquetas que perfeccionan esta estructuraci\u00f3n. Estas nuevas etiquetas introducen un nuevo nivel sem\u00e1ntico que hace que la estructura de la web sea m\u00e1s coherente y f\u00e1cil de entender. Adem\u00e1s los navegadores podr\u00e1n darle m\u00e1s importancia a determinadas secciones, facilit\u00e1ndole adem\u00e1s la tarea a los buscadores, as\u00ed como cualquier otra aplicaci\u00f3n que interprete sitios Web. En la siguiente imagen se puede ver una comparaci\u00f3n entre la estructuraci\u00f3n realizada con HTML (hasta la versi\u00f3n 4) y HTML 5: Las Webs se dividir\u00e1n en los siguientes elementos: <section></section> : Se utiliza para representar una secci\u00f3n \u201cgeneral\u201d dentro de un documento o aplicaci\u00f3n, como un cap\u00edtulo de un libro. Puede contener subsecciones y si lo acompa\u00f1amos de las etiquetas <h1>..<h6> podemos estructurar mejor toda la p\u00e1gina creando jerarqu\u00edas del contenido, algo muy favorable para el buen posicionamiento web. Por ejemplo: 1 2 3 4 5 6 < section > < h1 > Introducci\u00f3n al elemento section </ h1 > < p > El elemento section se usa para agrupar contenido relacionado entre si. </ p > < p > ... </ p > </ section > <article></article> : Se usa para definir contenido aut\u00f3nomo e independiente, con la intenci\u00f3n de ser reutilizable de modo aislado. El elemento article puede contener uno o varios elementos section. Si por ejemplo nuestro contenido puede ser redistribuido como RSS y sigue manteniendo \u00edntegro su significado, entonces, probablemente es un elemento article. De hecho, el elemento article est\u00e1 especialmente indicado para sindicaci\u00f3n. El elemento article es especialmente \u00fatil para posts en blogs, noticias en prensa digital, comentarios y posts en foros. La especificaci\u00f3n de HTML5 a\u00f1ade adem\u00e1s que el elemento article debe ser usado por widgets aut\u00f3nomos como; calculadoras, relojes, marcos de clima y cosas por el estilo. Hay que analizar si el contenido de un widget es aut\u00f3nomo, independiente y puede ser reutilizable o incluso sindicado. <aside></aside> : Representa una secci\u00f3n de la p\u00e1gina que abarca un contenido no directamente relacionado con el contenido que lo rodea, por lo que se le puede considerar un contenido independiente. Dentro de este elemento pueden incluirse: elementos publicitarios, barras laterales, grupos de elementos de la navegaci\u00f3n, efectos tipogr\u00e1ficos, u otro contenido que se considere separado del contenido principal de la p\u00e1gina. <header></header> : Es la cabecera de la p\u00e1gina o de una secci\u00f3n. Existe una diferencia clave entre el elemento header y el uso habitual del t\u00e9rmino header (o cabecera) utilizado com\u00fanmente para situar los elementos del encabezado de un sitio web. Una p\u00e1gina web debe definir un header principal donde normalmente ir\u00e1 el logo o el nombre del sitio y seguramente un men\u00fa de navegaci\u00f3n, pero adem\u00e1s puede \u2014y debe\u2014 definir otros elementos <header> dentro de los elementos <section> : 1 2 3 4 5 6 < section > < header > < h1 > Cabecera se secci\u00f3n </ h1 > </ header > < p > ... </ p > </ section > <nav></nav> : Contiene informaci\u00f3n sobre la navegaci\u00f3n por el sitio web, usualmente una lista de enlaces. Este elemento debe de ser utilizado solo para la navegaci\u00f3n principal del sitio y no para enlaces externos por ejemplo. Normalmente el elemento nav aparece dentro de un elemento header o footer . <footer></footer> : Representa el pi\u00e9 de una secci\u00f3n o la parte inferior de una p\u00e1gina Web, contiene informaci\u00f3n acerca de la p\u00e1gina/secci\u00f3n que poco tiene que ver con el contenido de la p\u00e1gina, como el autor, el copyright, la fecha de \u00faltima modificaci\u00f3n, etc. Igual que con la etiqueta <header> , este elemento tambi\u00e9n se puede utilizar dentro de una secci\u00f3n para indicar informaci\u00f3n como: quien lo ha escrito, informaci\u00f3n de propiedad intelectual, enlaces, etc. Es muy importante tener en cuenta que estas etiquetas no indican su posici\u00f3n en la p\u00e1gina Web, sino su valor sem\u00e1ntico. Por ejemplo, las etiquetas header, footer o aside no indican que esos elementos tengan que ir en la parte superior, inferior o lateral del contenido principal, sino que indican su funci\u00f3n en esa secci\u00f3n o en esa p\u00e1gina. Adem\u00e1s debemos tener en cuenta que estas nuevas etiquetas se comportan igual que una etiqueta de caja <div> por lo que podemos aplicarles los mismos estilos CSS. Podemos redefinir la propia etiqueta o aplicarle una clase, por ejemplo: 1 2 3 header { width : 100 % ; padding : 10 px ; margin-bottom : 20 px ; } . webheader { height : 30 px ; border : 1 px solid gray ; background-color : silver ; } . sectionheader { font-size : 20 px ; }","title":"Estructura sem\u00e1ntica"},{"location":"capitulo_html5_formularios.html","text":"Formularios \u00b6 La estructura de los formularios con HTML 5 no var\u00eda con respecto a las anteriores de HTML. Pero s\u00ed que se a\u00f1aden muchos nuevos tipos de campos que podemos utilizar, cada uno espec\u00edfico para cada tipo de dato. En el caso de que utilicemos estas caracter\u00edsticas y el navegador no sea compatible, simplemente las ignorar\u00e1 sin causarnos mayores problemas. Tambi\u00e9n podemos detectar si el navegador soporta una determinada caracter\u00edstica y en caso negativo emularla mediante c\u00f3digo JavaScript (para m\u00e1s informaci\u00f3n ver la secci\u00f3n \"Detectar funcionalidades de HTML5\"). Los nuevos tipos de campos son: search : se utiliza para crear cajas de b\u00fasqueda. Tiene un aspecto similar a un campo de tipo texto. Adem\u00e1s podemos utilizar el atributo results=\"num\" para a\u00f1adir un hist\u00f3rico de b\u00fasquedas con \"num\" resultados. De momento no funciona ni en Firefox ni en Chrome. 1 2 < label for = \"busqueda\" > B\u00fasqueda con hist\u00f3rico: </ label > < input type = \"search\" name = \"busqueda\" id = \"busqueda\" results = \"5\" /> number : campo num\u00e9rico, incorpora dos botones para para incrementar o decrementar el valor del campo. Adem\u00e1s podemos usar atributos para asignar restricciones, como min=\"\" , max=\"\" o step=\"\" . El valor es almacenado en el atributo value=\"\" . range : campo num\u00e9rico que permite seleccionar mediante una barra de desplazamiento un valor entre dos valores predeterminados, especificados mediante min=\"\" y max=\"\". El valor actual es almacenado en el atributo value=\"\" . Adem\u00e1s podemos indicar el incremento m\u00ednimo al desplazar la barra con step=\"\" . color : permite seleccionar un color. De momento solo funciona en Opera 11. tel : es un campo de texto normal pero valida si el valor introducido es un n\u00famero telef\u00f3nico (todav\u00eda no funciona). url : valida direcciones web. De momento requiere \"http://\" o \"http:\" simplemente. En algunos navegadores cambia el aspecto del cambio. email : valida direcciones de email. Funciona en algunos navegadores, mostrando adem\u00e1s un aspecto diferenciado. Para iPhone adem\u00e1s adapta el teclado. date : seleccionar un d\u00eda en un calendario. En algunos navegadores (para m\u00f3vil) aparece un calendario desplegable (como en Opera). month : selector para meses. En algunos navegadores (para m\u00f3vil) aparece un calendario desplegable. week : selector para semanas. En algunos navegadores (para m\u00f3vil) aparece un calendario desplegable. time : campo con formato para hora. datetime : permite seleccionar fecha y hora. datetime-local : permite seleccionar fechas y hora local. output : este campo se utiliza para visualizar valores, por ejemplo el valor de un campo \"range\". De momento solo funciona en Opera. Se suele utilizar junto con la propiedad \"onformchange\" para actualizar su valor: 1 < output onformchange = \"value = rango.value\" > 0 </ output > Adem\u00e1s, junto con estos nuevos tipos de campos, tambi\u00e9n se han incorporado nuevos tipos de atributos. Estos nuevos atributos son aplicables a la mayor\u00eda de los campos: Autocomplete : La mayor\u00eda de los navegadores incorporan la funcionalidad de autocompletar algunos campos de los formularios con valores introducidos anteriormente. Esta funcionalidad no siempre resulta \u00fatil, sobre todo si alguien nos roba nuestro port\u00e1til o dispositivo m\u00f3vil. La nueva especificaci\u00f3n de HTML5 nos permite desactivar el autocompletado en un formulario completo o solo en campos espec\u00edficos. El atributo autocomplete nos permite definir dos valores: \"on\" o \"off\". 1 2 3 < form action = \"formaction.php\" autocomplete = \"off\" > ... </ form > El c\u00f3digo anterior desactivar\u00eda el autocompletado de todo el formulario. Si por el contrario solo queremos desactivar el autocompletado de un solo campo podemos especificarlo as\u00ed: 1 < input type = \"text\" name = \"cuentadelbancosupersecreta\" autocomplete = \"off\" /> Esta funcionalidad no se puede emular mediante c\u00f3digo JavaScript. Placeholder : El atributo placeholder=\"texto\" se utiliza para colocar el valor de su texto dentro del campo a modo de ayuda. Si se focaliza dicho campo, se elimina el placeholder . Si abandonamos el campo sin a\u00f1adir ning\u00fan valor, se vuelve a a\u00f1adir el placeholder . Esta funcionalidad siempre ha requerido del uso de JavaScript para ser llevado a cabo, pero con la nueva especificaci\u00f3n este comportamiento puede definirse de la forma: 1 2 3 < label for = \"referer\" > Nombre </ label > < input id = \"referer\" name = \"referer\" type = \"text\" placeholder = \"Escribe tu nombre completo\" /> Obteniendo como resultado: Required : Una de las tareas de validaci\u00f3n m\u00e1s extendidas es la de los campos requeridos. La nueva especificaci\u00f3n de HTML5 incluye el atributo required que nos sirve para definir si un campo es requerido o no. Si un campo requerido est\u00e1 en blanco el formulario no ser\u00e1 enviado y adem\u00e1s avisar\u00e1 con un mensaje: 1 2 < label for = \"username\" > Su nombre de usuario </ label > < input id = \"username\" name = \"username\" type = \"text\" required /> NOTA : Es un error grave de seguridad validar los formularios \u00fanicamente desde el lado del cliente, es imprescindible adem\u00e1s realizar la validaci\u00f3n en el servidor. Autofoco : El atributo de autofoco asigna el foco (cursor de escritura) al campo indicado en cuando la p\u00e1gina se ha cargado. S\u00f3lo se puede asignar a un elemento de la p\u00e1gina. De momento este atributo solo lo soportan Safari, Chrome y Opera. Firefox e IE, lo ignoran, pero se puede emular f\u00e1cilmente mediante c\u00f3digo JavaScript (ver la siguiente secci\u00f3n \"Detectar funcionalidades de HTML5\"). 1 < input name = \"b\" autofocus /> List : Usando el atributo list con un elemento <input> podemos especificar una lista de opciones. Esto permite al usuario seleccionar un valor de la lista o escribir uno que no est\u00e9 en ella (este tipo de elemento se suele llamar Combo Boxes ). Los elementos de la lista se deben de indicar utilizando otro nuevo elemento de HTML5, el <datalist> . El cual simplemente nos permite crear una lista de valores. En algunos navegadores estas funcionalidades todav\u00eda no funcionan, como en Chrome. 1 2 3 4 5 6 7 8 9 10 11 < label for = \"diasemana\" > D\u00eda de la semana: </ label > < input type = \"text\" name = \"diasemana\" id = \"diasemana\" list = \"dias\" /> < datalist id = \"dias\" > < option value = \"Lunes\" /> < option value = \"Martes\" /> < option value = \"Mi\u00e9rcoles\" /> < option value = \"Jueves\" /> < option value = \"Viernes\" /> < option value = \"S\u00e1bado\" /> < option value = \"Domingo\" /> </ datalist > Con este c\u00f3digo obtendr\u00edamos un resultado similar al de la siguiente imagen: Pattern (formatting) : Este atributo se utiliza para validar la entrada del usuario mediante expresiones regulares. En la direcci\u00f3n \" http://es.wikipedia.org/wiki/Expresi%C3%B3n_regular \" podemos obtener m\u00e1s informaci\u00f3n sobre las expresiones regulares. Ejemplo de uso (en Firefox y Chrome funciona): 1 2 < label for = \"cp\" > C\u00f3digo Postal </ label > < input id = \"cp\" name = \"cp\" pattern = \"[\\d]{5}(-[\\d]{4})\" />","title":"Formularios"},{"location":"capitulo_html5_formularios.html#formularios","text":"La estructura de los formularios con HTML 5 no var\u00eda con respecto a las anteriores de HTML. Pero s\u00ed que se a\u00f1aden muchos nuevos tipos de campos que podemos utilizar, cada uno espec\u00edfico para cada tipo de dato. En el caso de que utilicemos estas caracter\u00edsticas y el navegador no sea compatible, simplemente las ignorar\u00e1 sin causarnos mayores problemas. Tambi\u00e9n podemos detectar si el navegador soporta una determinada caracter\u00edstica y en caso negativo emularla mediante c\u00f3digo JavaScript (para m\u00e1s informaci\u00f3n ver la secci\u00f3n \"Detectar funcionalidades de HTML5\"). Los nuevos tipos de campos son: search : se utiliza para crear cajas de b\u00fasqueda. Tiene un aspecto similar a un campo de tipo texto. Adem\u00e1s podemos utilizar el atributo results=\"num\" para a\u00f1adir un hist\u00f3rico de b\u00fasquedas con \"num\" resultados. De momento no funciona ni en Firefox ni en Chrome. 1 2 < label for = \"busqueda\" > B\u00fasqueda con hist\u00f3rico: </ label > < input type = \"search\" name = \"busqueda\" id = \"busqueda\" results = \"5\" /> number : campo num\u00e9rico, incorpora dos botones para para incrementar o decrementar el valor del campo. Adem\u00e1s podemos usar atributos para asignar restricciones, como min=\"\" , max=\"\" o step=\"\" . El valor es almacenado en el atributo value=\"\" . range : campo num\u00e9rico que permite seleccionar mediante una barra de desplazamiento un valor entre dos valores predeterminados, especificados mediante min=\"\" y max=\"\". El valor actual es almacenado en el atributo value=\"\" . Adem\u00e1s podemos indicar el incremento m\u00ednimo al desplazar la barra con step=\"\" . color : permite seleccionar un color. De momento solo funciona en Opera 11. tel : es un campo de texto normal pero valida si el valor introducido es un n\u00famero telef\u00f3nico (todav\u00eda no funciona). url : valida direcciones web. De momento requiere \"http://\" o \"http:\" simplemente. En algunos navegadores cambia el aspecto del cambio. email : valida direcciones de email. Funciona en algunos navegadores, mostrando adem\u00e1s un aspecto diferenciado. Para iPhone adem\u00e1s adapta el teclado. date : seleccionar un d\u00eda en un calendario. En algunos navegadores (para m\u00f3vil) aparece un calendario desplegable (como en Opera). month : selector para meses. En algunos navegadores (para m\u00f3vil) aparece un calendario desplegable. week : selector para semanas. En algunos navegadores (para m\u00f3vil) aparece un calendario desplegable. time : campo con formato para hora. datetime : permite seleccionar fecha y hora. datetime-local : permite seleccionar fechas y hora local. output : este campo se utiliza para visualizar valores, por ejemplo el valor de un campo \"range\". De momento solo funciona en Opera. Se suele utilizar junto con la propiedad \"onformchange\" para actualizar su valor: 1 < output onformchange = \"value = rango.value\" > 0 </ output > Adem\u00e1s, junto con estos nuevos tipos de campos, tambi\u00e9n se han incorporado nuevos tipos de atributos. Estos nuevos atributos son aplicables a la mayor\u00eda de los campos: Autocomplete : La mayor\u00eda de los navegadores incorporan la funcionalidad de autocompletar algunos campos de los formularios con valores introducidos anteriormente. Esta funcionalidad no siempre resulta \u00fatil, sobre todo si alguien nos roba nuestro port\u00e1til o dispositivo m\u00f3vil. La nueva especificaci\u00f3n de HTML5 nos permite desactivar el autocompletado en un formulario completo o solo en campos espec\u00edficos. El atributo autocomplete nos permite definir dos valores: \"on\" o \"off\". 1 2 3 < form action = \"formaction.php\" autocomplete = \"off\" > ... </ form > El c\u00f3digo anterior desactivar\u00eda el autocompletado de todo el formulario. Si por el contrario solo queremos desactivar el autocompletado de un solo campo podemos especificarlo as\u00ed: 1 < input type = \"text\" name = \"cuentadelbancosupersecreta\" autocomplete = \"off\" /> Esta funcionalidad no se puede emular mediante c\u00f3digo JavaScript. Placeholder : El atributo placeholder=\"texto\" se utiliza para colocar el valor de su texto dentro del campo a modo de ayuda. Si se focaliza dicho campo, se elimina el placeholder . Si abandonamos el campo sin a\u00f1adir ning\u00fan valor, se vuelve a a\u00f1adir el placeholder . Esta funcionalidad siempre ha requerido del uso de JavaScript para ser llevado a cabo, pero con la nueva especificaci\u00f3n este comportamiento puede definirse de la forma: 1 2 3 < label for = \"referer\" > Nombre </ label > < input id = \"referer\" name = \"referer\" type = \"text\" placeholder = \"Escribe tu nombre completo\" /> Obteniendo como resultado: Required : Una de las tareas de validaci\u00f3n m\u00e1s extendidas es la de los campos requeridos. La nueva especificaci\u00f3n de HTML5 incluye el atributo required que nos sirve para definir si un campo es requerido o no. Si un campo requerido est\u00e1 en blanco el formulario no ser\u00e1 enviado y adem\u00e1s avisar\u00e1 con un mensaje: 1 2 < label for = \"username\" > Su nombre de usuario </ label > < input id = \"username\" name = \"username\" type = \"text\" required /> NOTA : Es un error grave de seguridad validar los formularios \u00fanicamente desde el lado del cliente, es imprescindible adem\u00e1s realizar la validaci\u00f3n en el servidor. Autofoco : El atributo de autofoco asigna el foco (cursor de escritura) al campo indicado en cuando la p\u00e1gina se ha cargado. S\u00f3lo se puede asignar a un elemento de la p\u00e1gina. De momento este atributo solo lo soportan Safari, Chrome y Opera. Firefox e IE, lo ignoran, pero se puede emular f\u00e1cilmente mediante c\u00f3digo JavaScript (ver la siguiente secci\u00f3n \"Detectar funcionalidades de HTML5\"). 1 < input name = \"b\" autofocus /> List : Usando el atributo list con un elemento <input> podemos especificar una lista de opciones. Esto permite al usuario seleccionar un valor de la lista o escribir uno que no est\u00e9 en ella (este tipo de elemento se suele llamar Combo Boxes ). Los elementos de la lista se deben de indicar utilizando otro nuevo elemento de HTML5, el <datalist> . El cual simplemente nos permite crear una lista de valores. En algunos navegadores estas funcionalidades todav\u00eda no funcionan, como en Chrome. 1 2 3 4 5 6 7 8 9 10 11 < label for = \"diasemana\" > D\u00eda de la semana: </ label > < input type = \"text\" name = \"diasemana\" id = \"diasemana\" list = \"dias\" /> < datalist id = \"dias\" > < option value = \"Lunes\" /> < option value = \"Martes\" /> < option value = \"Mi\u00e9rcoles\" /> < option value = \"Jueves\" /> < option value = \"Viernes\" /> < option value = \"S\u00e1bado\" /> < option value = \"Domingo\" /> </ datalist > Con este c\u00f3digo obtendr\u00edamos un resultado similar al de la siguiente imagen: Pattern (formatting) : Este atributo se utiliza para validar la entrada del usuario mediante expresiones regulares. En la direcci\u00f3n \" http://es.wikipedia.org/wiki/Expresi%C3%B3n_regular \" podemos obtener m\u00e1s informaci\u00f3n sobre las expresiones regulares. Ejemplo de uso (en Firefox y Chrome funciona): 1 2 < label for = \"cp\" > C\u00f3digo Postal </ label > < input id = \"cp\" name = \"cp\" pattern = \"[\\d]{5}(-[\\d]{4})\" />","title":"Formularios"},{"location":"capitulo_html5_geolocalizacion.html","text":"Geolocalizaci\u00f3n \u00b6 La geolocalizaci\u00f3n es la forma de obtener tu posici\u00f3n en el mundo y si quieres, compartir esta informaci\u00f3n. Existen muchas maneras de descubrir donde te encuentras, por tu direcci\u00f3n IP, la conexi\u00f3n de red inal\u00e1mbrica, la torre de telefon\u00eda m\u00f3vil por la que se conecta tu m\u00f3vil, o usando directamente el posicionador GPS. HTML5 incorpora una nueva funcionalidad para facilitar esta tarea, que depender\u00e1 de que el navegador le de soporte. Est\u00e1 disponible a partir de las versiones de Opera 10.6, Firefox 3.5, Chrome 5, Safari 5 e Internet Explorer 9. Para obtener la localizaci\u00f3n simplemente tienes que utilizar el objeto navigator de JavaScript. Inicialmente es recomendable comprobar si est\u00e1 disponible la localizaci\u00f3n y de ser as\u00ed ya podemos utilizar el m\u00e9todo getCurrentPosition de la forma: 1 2 3 4 5 6 7 8 9 10 11 12 if ( navigator . geolocation ) { navigator . geolocation . getCurrentPosition ( showPosition ); } function showPosition ( position ) { var lat = position . coords . latitude ; var lng = position . coords . longitude ; alert ( \"Latitud: \" + lat + \", longitud: \" + lng ); }","title":"Geolocalizaci\u00f3n"},{"location":"capitulo_html5_geolocalizacion.html#geolocalizacion","text":"La geolocalizaci\u00f3n es la forma de obtener tu posici\u00f3n en el mundo y si quieres, compartir esta informaci\u00f3n. Existen muchas maneras de descubrir donde te encuentras, por tu direcci\u00f3n IP, la conexi\u00f3n de red inal\u00e1mbrica, la torre de telefon\u00eda m\u00f3vil por la que se conecta tu m\u00f3vil, o usando directamente el posicionador GPS. HTML5 incorpora una nueva funcionalidad para facilitar esta tarea, que depender\u00e1 de que el navegador le de soporte. Est\u00e1 disponible a partir de las versiones de Opera 10.6, Firefox 3.5, Chrome 5, Safari 5 e Internet Explorer 9. Para obtener la localizaci\u00f3n simplemente tienes que utilizar el objeto navigator de JavaScript. Inicialmente es recomendable comprobar si est\u00e1 disponible la localizaci\u00f3n y de ser as\u00ed ya podemos utilizar el m\u00e9todo getCurrentPosition de la forma: 1 2 3 4 5 6 7 8 9 10 11 12 if ( navigator . geolocation ) { navigator . geolocation . getCurrentPosition ( showPosition ); } function showPosition ( position ) { var lat = position . coords . latitude ; var lng = position . coords . longitude ; alert ( \"Latitud: \" + lat + \", longitud: \" + lng ); }","title":"Geolocalizaci\u00f3n"},{"location":"capitulo_html5_mark.html","text":"Mark \u00b6 HTML5 tambi\u00e9n introduce un conjunto nuevo de elementos inline , solo que ya no se llaman elementos inline sino text-level semantics o sem\u00e1ntica a nivel de texto. Uno de ellos es la etiqueta mark. Cuando realizamos una b\u00fasqueda en ciertos sitios, los elementos encontrados en la p\u00e1gina aparecen remarcados para facilitar su localizaci\u00f3n. Hasta ahora el estilo se aplicaba con etiquetas <span> , pero esta soluci\u00f3n no es sem\u00e1ntica. Es ah\u00ed donde entra en escena la nueva etiqueta <mark> : 1 2 3 4 5 < h1 > Resultados de la b\u00fasqueda de la palabra \u2019anillo\u2019 </ h1 > < ol > < li > El se\u00f1or de los < mark > anillo </ mark > s... </ li > < li > el cliente compr\u00f3 este < mark > anillo </ mark ></ li > </ ol > Si queremos podemos redefinir el estilo de esta nueva etiqueta de la misma forma que lo hac\u00edamos con las etiquetas de HTML, por ejemplo, para cambiar el color de fondo a rojo: 1 mark { background-color : red ; }","title":"Etiqueta Mark"},{"location":"capitulo_html5_mark.html#mark","text":"HTML5 tambi\u00e9n introduce un conjunto nuevo de elementos inline , solo que ya no se llaman elementos inline sino text-level semantics o sem\u00e1ntica a nivel de texto. Uno de ellos es la etiqueta mark. Cuando realizamos una b\u00fasqueda en ciertos sitios, los elementos encontrados en la p\u00e1gina aparecen remarcados para facilitar su localizaci\u00f3n. Hasta ahora el estilo se aplicaba con etiquetas <span> , pero esta soluci\u00f3n no es sem\u00e1ntica. Es ah\u00ed donde entra en escena la nueva etiqueta <mark> : 1 2 3 4 5 < h1 > Resultados de la b\u00fasqueda de la palabra \u2019anillo\u2019 </ h1 > < ol > < li > El se\u00f1or de los < mark > anillo </ mark > s... </ li > < li > el cliente compr\u00f3 este < mark > anillo </ mark ></ li > </ ol > Si queremos podemos redefinir el estilo de esta nueva etiqueta de la misma forma que lo hac\u00edamos con las etiquetas de HTML, por ejemplo, para cambiar el color de fondo a rojo: 1 mark { background-color : red ; }","title":"Mark"},{"location":"capitulo_html5_navegadores.html","text":"Navegadores que lo soportan \u00b6 Actualmente, de los navegadores de escritorio, el que mayor soporte da es Google Chrome, seguido muy de cerca por Mozilla Firefox y Apple Safari. El que menor compatibilidad ofrece es Internet Explorer. Para comprobar la compatibilidad de un navegador podemos visitar la Web \" http://www.html5test.com/ \" donde se realiza un test de todas las funcionalidades de HTML5.","title":"Navegadores que lo soportan"},{"location":"capitulo_html5_navegadores.html#navegadores-que-lo-soportan","text":"Actualmente, de los navegadores de escritorio, el que mayor soporte da es Google Chrome, seguido muy de cerca por Mozilla Firefox y Apple Safari. El que menor compatibilidad ofrece es Internet Explorer. Para comprobar la compatibilidad de un navegador podemos visitar la Web \" http://www.html5test.com/ \" donde se realiza un test de todas las funcionalidades de HTML5.","title":"Navegadores que lo soportan"},{"location":"capitulo_html5_video.html","text":"V\u00eddeo \u00b6 La nueva especificaci\u00f3n de HTML5 soporta la inclusi\u00f3n de v\u00eddeo empotrado en las p\u00e1ginas web de forma nativa. El elemento video no especifica el formato del mismo sino que el uso de uno u otro vendr\u00e1 impuesto por el fabricante del navegador: C\u00f3dec IE>=9 Firefox Chrome Safari Opera Ogg Theora no s\u00ed s\u00ed no s\u00ed H.264 s\u00ed no no s\u00ed no VP8 no s\u00ed s\u00ed no s\u00ed El elemento video dispone de los atributos \" autoplay \", \" loop \" y \" preload \", para activar la auto-reproducci\u00f3n, para indicar que se reproduzca en bucle y para activar/desactivar la precarga del v\u00eddeo. Asimismo puedes utilizar los controles que te ofrece el navegador de forma nativa utilizando el atributo controls o bien puedes ofrecer tus propios controles en JavaScript. Dado que el v\u00eddeo ocupa un espacio, tambi\u00e9n podremos definir sus dimensiones con los atributos \" width \" y \" height \". E incluso podemos indicar una imagen para que se muestre antes de la reproducci\u00f3n mediante el atributo \"poster\": 1 < video src = \"archivo.mp4\" controls width = \"360\" height = \"240\" poster = \"poster.jpg\" > </ video > Con lo que obtendr\u00edamos un resultado similar a: Para dar soporte a todos los navegadores, podemos especificar diferentes archivos en diferentes formatos. Adem\u00e1s podemos usar el mismo truco que us\u00e1bamos con el elemento audio para seguir dando soporte al plugin de Flash a trav\u00e9s de la etiqueta object , e incluso incluir un link de descarga: 1 2 3 4 5 6 7 8 9 < video controls width = \"360\" height = \"240\" poster = \"poster.jpg\" > < source src = \"archivo.ogv\" type = \"video/ogg\" /> < source src = \"archivo.mp4\" type = \"video/mp4\" /> < object type = \"application/x-shockwave-flash\" width = \"360\" height = \"240\" data = \"player.swf?file=archivo.mp4\" > < param name = \"movie\" value = \"player.swf?file=archivo.mp4\" /> < a href = \"archivo.mp4\" > Descarga la pel\u00edcula </ a > </ object > </ video >","title":"V\u00eddeo"},{"location":"capitulo_html5_video.html#video","text":"La nueva especificaci\u00f3n de HTML5 soporta la inclusi\u00f3n de v\u00eddeo empotrado en las p\u00e1ginas web de forma nativa. El elemento video no especifica el formato del mismo sino que el uso de uno u otro vendr\u00e1 impuesto por el fabricante del navegador: C\u00f3dec IE>=9 Firefox Chrome Safari Opera Ogg Theora no s\u00ed s\u00ed no s\u00ed H.264 s\u00ed no no s\u00ed no VP8 no s\u00ed s\u00ed no s\u00ed El elemento video dispone de los atributos \" autoplay \", \" loop \" y \" preload \", para activar la auto-reproducci\u00f3n, para indicar que se reproduzca en bucle y para activar/desactivar la precarga del v\u00eddeo. Asimismo puedes utilizar los controles que te ofrece el navegador de forma nativa utilizando el atributo controls o bien puedes ofrecer tus propios controles en JavaScript. Dado que el v\u00eddeo ocupa un espacio, tambi\u00e9n podremos definir sus dimensiones con los atributos \" width \" y \" height \". E incluso podemos indicar una imagen para que se muestre antes de la reproducci\u00f3n mediante el atributo \"poster\": 1 < video src = \"archivo.mp4\" controls width = \"360\" height = \"240\" poster = \"poster.jpg\" > </ video > Con lo que obtendr\u00edamos un resultado similar a: Para dar soporte a todos los navegadores, podemos especificar diferentes archivos en diferentes formatos. Adem\u00e1s podemos usar el mismo truco que us\u00e1bamos con el elemento audio para seguir dando soporte al plugin de Flash a trav\u00e9s de la etiqueta object , e incluso incluir un link de descarga: 1 2 3 4 5 6 7 8 9 < video controls width = \"360\" height = \"240\" poster = \"poster.jpg\" > < source src = \"archivo.ogv\" type = \"video/ogg\" /> < source src = \"archivo.mp4\" type = \"video/mp4\" /> < object type = \"application/x-shockwave-flash\" width = \"360\" height = \"240\" data = \"player.swf?file=archivo.mp4\" > < param name = \"movie\" value = \"player.swf?file=archivo.mp4\" /> < a href = \"archivo.mp4\" > Descarga la pel\u00edcula </ a > </ object > </ video >","title":"V\u00eddeo"},{"location":"capitulo_html_cajas.html","text":"Cajas (etiqueta <div> ) \u00b6 La etiqueta <div></div> permite crear cajas contenedoras de otros elementos. Esta etiqueta no muestra (por defecto) ning\u00fan estilo ni formato visual, sino que es utilizada \u00fanicamente para organizar la disposici\u00f3n de los elementos en la p\u00e1gina. Es muy sencillo indicar su posici\u00f3n de forma absoluta o relativa en la p\u00e1gina y crear divisiones del espacio para distribuir los elementos. Estas cajas pueden contener cualquier tipo de elemento (texto, im\u00e1genes, etc.) u otras etiquetas <div> para crear subdivisiones. A continuaci\u00f3n se incluye un peque\u00f1o ejemplo de su uso: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo de uso de la etiqueta DIV </ title > < meta charset = \"utf-8\" > </ head > < body > < div > Menu superior </ div > < div > < h1 > Contenido central </ h1 > < div > Art\u00edculo 1 </ div > < div > Art\u00edculo 2 </ div > </ div > < div > Pie de p\u00e1gina </ div > </ body > </ html > Como se puede ver se ha utilizado una etiqueta <div> para crear una secci\u00f3n que contendr\u00e1 el men\u00fa superior, otra para el contenido central y otra para el pie de p\u00e1gina. La secci\u00f3n con el contenido central se divide a su vez en otras dos secciones o cajas que contendr\u00e1n los art\u00edculos. Si guardamos este c\u00f3digo de ejemplo en un archivo y lo abrimos veremos que esta etiqueta no muestra ning\u00fan formato ni estilo, solamente nos aparecer\u00e1n los textos que hemos puesto. Para poder completar este c\u00f3digo e indicar la posici\u00f3n y estilos nos har\u00e1 falta utilizar CSS. En la secci\u00f3n de \" Introducci\u00f3n a CSS > Capas \" se explica m\u00e1s a fondo el uso de esta etiqueta y como la podemos utilizar para alinear los contenidos o crear secciones con estilos definidos. Para alinear el contenido de una p\u00e1gina se recomienda el uso de la etiqueta <div> junto con CSS. No es recomentable el uso de la etiqueta <table> para crear alineaciones.","title":"Cajas, etiqueta DIV"},{"location":"capitulo_html_cajas.html#cajas-etiqueta-div","text":"La etiqueta <div></div> permite crear cajas contenedoras de otros elementos. Esta etiqueta no muestra (por defecto) ning\u00fan estilo ni formato visual, sino que es utilizada \u00fanicamente para organizar la disposici\u00f3n de los elementos en la p\u00e1gina. Es muy sencillo indicar su posici\u00f3n de forma absoluta o relativa en la p\u00e1gina y crear divisiones del espacio para distribuir los elementos. Estas cajas pueden contener cualquier tipo de elemento (texto, im\u00e1genes, etc.) u otras etiquetas <div> para crear subdivisiones. A continuaci\u00f3n se incluye un peque\u00f1o ejemplo de su uso: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo de uso de la etiqueta DIV </ title > < meta charset = \"utf-8\" > </ head > < body > < div > Menu superior </ div > < div > < h1 > Contenido central </ h1 > < div > Art\u00edculo 1 </ div > < div > Art\u00edculo 2 </ div > </ div > < div > Pie de p\u00e1gina </ div > </ body > </ html > Como se puede ver se ha utilizado una etiqueta <div> para crear una secci\u00f3n que contendr\u00e1 el men\u00fa superior, otra para el contenido central y otra para el pie de p\u00e1gina. La secci\u00f3n con el contenido central se divide a su vez en otras dos secciones o cajas que contendr\u00e1n los art\u00edculos. Si guardamos este c\u00f3digo de ejemplo en un archivo y lo abrimos veremos que esta etiqueta no muestra ning\u00fan formato ni estilo, solamente nos aparecer\u00e1n los textos que hemos puesto. Para poder completar este c\u00f3digo e indicar la posici\u00f3n y estilos nos har\u00e1 falta utilizar CSS. En la secci\u00f3n de \" Introducci\u00f3n a CSS > Capas \" se explica m\u00e1s a fondo el uso de esta etiqueta y como la podemos utilizar para alinear los contenidos o crear secciones con estilos definidos. Para alinear el contenido de una p\u00e1gina se recomienda el uso de la etiqueta <div> junto con CSS. No es recomentable el uso de la etiqueta <table> para crear alineaciones.","title":"Cajas (etiqueta &lt;div&gt;)"},{"location":"capitulo_html_editores.html","text":"Editores HTML \u00b6 El lenguaje HTML puede ser creado y editado con cualquier editor de textos b\u00e1sico, como puede ser Gedit en Linux o el Bloc de notas de Windows. Existen adem\u00e1s otros editores para la realizaci\u00f3n de sitios web con caracter\u00edsticas WYSIWYG ( What You See Is What You Get , o en espa\u00f1ol: \"lo que ves es lo que obtienes\"). Estos editores permiten ver el resultado de lo que se est\u00e1 editando en tiempo real, a medida que se va desarrollando el documento. Ahora bien, esto no significa una manera distinta de realizar sitios web, sino que una forma un tanto m\u00e1s simple ya que estos programas, adem\u00e1s de tener la opci\u00f3n de trabajar con la vista preliminar, tiene su propia secci\u00f3n HTML, la cual va generando todo el c\u00f3digo a medida que se va trabajando. Algunos ejemplos de editores son Adobe Dreamweaver, KompoZer o Microsoft FrontPage. Estos editores aceleran o facilitan la creaci\u00f3n de c\u00f3digo HTML, pero en algunas ocasiones tambi\u00e9n generan mucho m\u00e1s c\u00f3digo del necesario (como es el caso de Microsoft FrontPage). Lo ideal es tener un control total sobre el c\u00f3digo que se escribe y utilizar estos editores s\u00f3lo como una peque\u00f1a ayuda. Tambi\u00e9n podemos utilizar otro tipo de editores que simplemente comprueben que el c\u00f3digo HTML escrito es correcto (que las etiquetas y atributos son correctos, las etiquetas se cierran correctamente, etc.).","title":"Editores HTML"},{"location":"capitulo_html_editores.html#editores-html","text":"El lenguaje HTML puede ser creado y editado con cualquier editor de textos b\u00e1sico, como puede ser Gedit en Linux o el Bloc de notas de Windows. Existen adem\u00e1s otros editores para la realizaci\u00f3n de sitios web con caracter\u00edsticas WYSIWYG ( What You See Is What You Get , o en espa\u00f1ol: \"lo que ves es lo que obtienes\"). Estos editores permiten ver el resultado de lo que se est\u00e1 editando en tiempo real, a medida que se va desarrollando el documento. Ahora bien, esto no significa una manera distinta de realizar sitios web, sino que una forma un tanto m\u00e1s simple ya que estos programas, adem\u00e1s de tener la opci\u00f3n de trabajar con la vista preliminar, tiene su propia secci\u00f3n HTML, la cual va generando todo el c\u00f3digo a medida que se va trabajando. Algunos ejemplos de editores son Adobe Dreamweaver, KompoZer o Microsoft FrontPage. Estos editores aceleran o facilitan la creaci\u00f3n de c\u00f3digo HTML, pero en algunas ocasiones tambi\u00e9n generan mucho m\u00e1s c\u00f3digo del necesario (como es el caso de Microsoft FrontPage). Lo ideal es tener un control total sobre el c\u00f3digo que se escribe y utilizar estos editores s\u00f3lo como una peque\u00f1a ayuda. Tambi\u00e9n podemos utilizar otro tipo de editores que simplemente comprueben que el c\u00f3digo HTML escrito es correcto (que las etiquetas y atributos son correctos, las etiquetas se cierran correctamente, etc.).","title":"Editores HTML"},{"location":"capitulo_html_elementos_de_la_cabecera.html","text":"Elementos de la cabecera \u00b6 La secci\u00f3n de cabecera <head> ... </head> se utiliza para describir el tipo de contenido y aspecto visual que tendr\u00e1 la web. Es importante destacar que todo el contenido de la secci\u00f3n de cabecera no se muestra directamente al usuario, sino que es \u00fanicamente informaci\u00f3n descriptiva y metadatos. Por ejemplo, nos permitir\u00e1 indicar metadatos que son muy \u00fatiles para la indexaci\u00f3n de la web en buscadores, como el tipo de contenido, palabras clave o el autor, o indicar los estilos con los cuales se mostrar\u00e1n los elementos visuales, entre otra informaci\u00f3n. Algunas de las principales etiquetas que podemos utilizar dentro de la cabecera son: <title></title> : define el t\u00edtulo de la p\u00e1gina. Por lo general el t\u00edtulo aparece en la barra de t\u00edtulo encima de la ventana. <link/> : para vincular el sitio con hojas de estilo externas (ver la secci\u00f3n de CSS para m\u00e1s informaci\u00f3n): 1 < link rel = \"stylesheet\" href = \"style.css\" type = \"text/css\" /> El atributo rel es requerido y describe el tipo de documento enlazado (en este caso una hoja de estilo). El atributo type es simplemente indicativo del tipo de hoja de estilo enlazada (en este caso CSS). <style></style> : se utiliza para a\u00f1adir definici\u00f3n de estilo en l\u00ednea. No es necesario colocarlo si se va a utilizar una hoja de estilo externa usando la etiqueta <link/> (que es lo m\u00e1s habitual y recomendable). El uso correcto ser\u00eda de la forma: 1 2 3 4 5 6 7 8 9 < html > < head > ... < style type = \"text/css\" > Estilos CSS </ style > </ head > < body ></ body > </ html > Para m\u00e1s informaci\u00f3n ver la secci\u00f3n CSS del manual. <meta/> : para indicar metadatos como la descripci\u00f3n de la web, los keywords, o el autor: 1 2 3 < meta name = \"description\" content = \"Descripci\u00f3n de la web\" /> < meta name = \"keywords\" content = \"key1,key2,key3\" /> < meta name = \"author\" content = \"Nombre del autor\" /> Una etiqueta \"meta\" muy \u00fatil es la de la codificaci\u00f3n, que nos permitir\u00e1 escribir texto con acentos y se se vea bien (sin s\u00edmbolos extra\u00f1os) en todos los navegadores: 1 < meta charset = \"utf-8\" /> <script></script> : permite incluir un script en la Web. El c\u00f3digo se puede escribir directamente entre las etiquetas de <script> o cargar desde un fichero externo utilizando el atributo src=\"url del script\" para indicar la direcci\u00f3n del fichero. Se recomienda incluir el tipo MIME en el atributo type , que en el caso de c\u00f3digo JavaScript ser\u00eda text/javascript . A continuaci\u00f3n se incluyen algunos ejemplos de uso: 1 2 3 4 < script src = \"fichero.js\" type = \"text/javascript\" ></ script > < script type = \"text/javascript\" > C\u00f3digo de un script integrado en la p\u00e1gina </ script > Cuando usamos el atributo src el contenido de estas etiquetas est\u00e1 vac\u00edo (no encierra nada), esto es porque lo carga directamente desde el fichero indicado. En el cap\u00edtulo sobre JavaScript podr\u00e9is encontrar mucha m\u00e1s informaci\u00f3n sobre como utilizar estas etiquetas. A continuaci\u00f3n se incluye un c\u00f3digo de ejemplo en el que se ha ampliado la estructura HTML b\u00e1sica de una web que vimos en la secci\u00f3n anterior para a\u00f1adir algunas de estas etiquetas: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" /> < meta name = \"description\" content = \"Descripci\u00f3n de la web\" /> < meta name = \"keywords\" content = \"key1,key2,key3\" /> < meta name = \"author\" content = \"Nombre del autor\" /> < link rel = \"stylesheet\" href = \"style.css\" type = \"text/css\" /> < script src = \"javascript.js\" type = \"text/javascript\" ></ script > </ head > < body > \u00a1Hola mundo! </ body > </ html >","title":"Elementos de la cabecera"},{"location":"capitulo_html_elementos_de_la_cabecera.html#elementos-de-la-cabecera","text":"La secci\u00f3n de cabecera <head> ... </head> se utiliza para describir el tipo de contenido y aspecto visual que tendr\u00e1 la web. Es importante destacar que todo el contenido de la secci\u00f3n de cabecera no se muestra directamente al usuario, sino que es \u00fanicamente informaci\u00f3n descriptiva y metadatos. Por ejemplo, nos permitir\u00e1 indicar metadatos que son muy \u00fatiles para la indexaci\u00f3n de la web en buscadores, como el tipo de contenido, palabras clave o el autor, o indicar los estilos con los cuales se mostrar\u00e1n los elementos visuales, entre otra informaci\u00f3n. Algunas de las principales etiquetas que podemos utilizar dentro de la cabecera son: <title></title> : define el t\u00edtulo de la p\u00e1gina. Por lo general el t\u00edtulo aparece en la barra de t\u00edtulo encima de la ventana. <link/> : para vincular el sitio con hojas de estilo externas (ver la secci\u00f3n de CSS para m\u00e1s informaci\u00f3n): 1 < link rel = \"stylesheet\" href = \"style.css\" type = \"text/css\" /> El atributo rel es requerido y describe el tipo de documento enlazado (en este caso una hoja de estilo). El atributo type es simplemente indicativo del tipo de hoja de estilo enlazada (en este caso CSS). <style></style> : se utiliza para a\u00f1adir definici\u00f3n de estilo en l\u00ednea. No es necesario colocarlo si se va a utilizar una hoja de estilo externa usando la etiqueta <link/> (que es lo m\u00e1s habitual y recomendable). El uso correcto ser\u00eda de la forma: 1 2 3 4 5 6 7 8 9 < html > < head > ... < style type = \"text/css\" > Estilos CSS </ style > </ head > < body ></ body > </ html > Para m\u00e1s informaci\u00f3n ver la secci\u00f3n CSS del manual. <meta/> : para indicar metadatos como la descripci\u00f3n de la web, los keywords, o el autor: 1 2 3 < meta name = \"description\" content = \"Descripci\u00f3n de la web\" /> < meta name = \"keywords\" content = \"key1,key2,key3\" /> < meta name = \"author\" content = \"Nombre del autor\" /> Una etiqueta \"meta\" muy \u00fatil es la de la codificaci\u00f3n, que nos permitir\u00e1 escribir texto con acentos y se se vea bien (sin s\u00edmbolos extra\u00f1os) en todos los navegadores: 1 < meta charset = \"utf-8\" /> <script></script> : permite incluir un script en la Web. El c\u00f3digo se puede escribir directamente entre las etiquetas de <script> o cargar desde un fichero externo utilizando el atributo src=\"url del script\" para indicar la direcci\u00f3n del fichero. Se recomienda incluir el tipo MIME en el atributo type , que en el caso de c\u00f3digo JavaScript ser\u00eda text/javascript . A continuaci\u00f3n se incluyen algunos ejemplos de uso: 1 2 3 4 < script src = \"fichero.js\" type = \"text/javascript\" ></ script > < script type = \"text/javascript\" > C\u00f3digo de un script integrado en la p\u00e1gina </ script > Cuando usamos el atributo src el contenido de estas etiquetas est\u00e1 vac\u00edo (no encierra nada), esto es porque lo carga directamente desde el fichero indicado. En el cap\u00edtulo sobre JavaScript podr\u00e9is encontrar mucha m\u00e1s informaci\u00f3n sobre como utilizar estas etiquetas. A continuaci\u00f3n se incluye un c\u00f3digo de ejemplo en el que se ha ampliado la estructura HTML b\u00e1sica de una web que vimos en la secci\u00f3n anterior para a\u00f1adir algunas de estas etiquetas: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" /> < meta name = \"description\" content = \"Descripci\u00f3n de la web\" /> < meta name = \"keywords\" content = \"key1,key2,key3\" /> < meta name = \"author\" content = \"Nombre del autor\" /> < link rel = \"stylesheet\" href = \"style.css\" type = \"text/css\" /> < script src = \"javascript.js\" type = \"text/javascript\" ></ script > </ head > < body > \u00a1Hola mundo! </ body > </ html >","title":"Elementos de la cabecera"},{"location":"capitulo_html_enlaces.html","text":"Enlaces \u00b6 Los enlaces permiten vincular partes del documento con otros documentos o con otras partes del mismo documento. Por ejemplo, que al pulsar con el rat\u00f3n sobre un texto o sobre una imagen se nos redirija a una nueva Web con un contenido diferente. Para crear un enlace se utiliza la etiqueta <a href=\"\"></a> cuyo atributo href establece la direcci\u00f3n URL a la que apunta el enlace. Por ejemplo, un enlace a la Wikipedia ser\u00eda de la forma: 1 < a href = \"http://es.wikipedia.org\" > Wikipedia </ a > Para crear un enlace a una secci\u00f3n de nuestra propia web \u00fanicamente nos har\u00e1 falta escribir el nombre del fichero HTML, por ejemplo: 1 < a href = \"pagina2.html\" > Pulsa aqu\u00ed </ a > Ejemplo \u00b6 En este ejemplo vamos a crear un enlace desde la p\u00e1gina principal de nuestro sitio web (almacenada en el fichero index.html ) a una p\u00e1gina secundaria con un art\u00edculo (que estar\u00eda en el fichero articulo1.html ). Adem\u00e1s, en la p\u00e1gina secundaria a\u00f1adiremos tambi\u00e9n un enlace para volver a la p\u00e1gina principal. El contenido de la p\u00e1gina principal (fichero index.html ) ser\u00eda el siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > Web de ejemplo </ h1 > < p > Pulsa en < a href = \"articulo1.html\" > este enlace </ a > para consultar nuestro primer art\u00edculo. </ p > </ body > </ html > El contenido de la p\u00e1gina secundaria (fichero articulo1.html ) ser\u00eda el siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > Art\u00edculo 1 </ h1 > < p > Texto de ejemplo del art\u00edculo 1. </ p > < p > Pulsa en < a href = \"index.html\" > este enlace </ a > para volver a la p\u00e1gina principal. </ p > </ body > </ html > Enlaces sobre otros elementos \u00b6 Tambi\u00e9n se pueden crear enlaces sobre otros elementos, como por ejemplo im\u00e1genes. Para esto simplemente tenemos que escribir la/s etiqueta/s de dicho elemento dentro del enlace: 1 < a href = \"direcci\u00f3n_URL\" >< img src = \"imagen.jpg\" /></ a > Abrir una nueva ventana (o pesta\u00f1a del navegador) \u00b6 La etiqueta de enlace <a> tambi\u00e9n permite el atributo target=\"_blank\" , mediante el cual indicamos que el enlace se tiene que abrir en una nueva ventana o en una pesta\u00f1a nueva del navegador. Esta opci\u00f3n se suele utilizar a menudo para los enlaces externos para que no se cierre la web actual. Por ejemplo, para a\u00f1adir un enlace a una web externa que se abra en otra ventana para que el usuario consulte m\u00e1s informaci\u00f3n escribir\u00edamos el siguiente c\u00f3digo: 1 2 3 < a href = \"https://es.wikipedia.org/wiki/Polinomio\" target = \"_blank\" > Para m\u00e1s informaci\u00f3n pulsa aqu\u00ed </ a > Direcci\u00f3n base \u00b6 La direcci\u00f3n principal de la web no es necesario escribirla ya que se a\u00f1adir\u00e1 autom\u00e1ticamente. Por ejemplo, si nuestra web es \"http://www.webejemplo.es\" y en el enlace escrib\u00edmos \u00fanicamente <a href=\"pagina2.html\">Pulsa aqu\u00ed</a> , al pulsar nos redirigir\u00e1 a la web \"http://www.webejemplo.es/pagina2.html\". Hay que tener cuidado cuando colocamos las p\u00e1ginas dentro de carpetas. Por ejemplo, si creamos una carpeta para meter todas las p\u00e1ginas con art\u00edculos y escribimos un enlace de la forma: <a href=\"articulos/articulo1.html\">Ir al art\u00edculo 1</a> , esto nos redirigir\u00e1 a la direcci\u00f3n \"http://www.webejemplo.es/articulos/articulo1.html\". El problema est\u00e1 en los enlaces que coloquemos dentro de una p\u00e1gina que est\u00e9 en una subcarpeta. Por ejemplo, si en la p\u00e1gina \"articulo1.html\" (que est\u00e1 en la carpeta \"articulos\") a\u00f1adimos un enlace para volver al \u00edndice de la forma: <a href=\"index.html\">Volver</a> , este enlace en realidad nos llevar\u00eda a la direcci\u00f3n \"http://www.webejemplo.es/ articulos/index.html \". Es decir, buscar\u00eda la p\u00e1gina \"index.html\" dentro de la carpeta actual. Para solucionar este problema y hacer referencia a la ra\u00edz de nuestro sitio web, se suele anteponer siempre la barra \"/\" a todas las direcciones. Por ejemplo, en el caso del enlace err\u00f3neo anterior tendr\u00edamos que escribir: <a href=\"/index.html\">Volver</a> . Pero esta barra es recomendable escribirla siempre, en todas las direcciones, para evitar errores.","title":"Enlaces"},{"location":"capitulo_html_enlaces.html#enlaces","text":"Los enlaces permiten vincular partes del documento con otros documentos o con otras partes del mismo documento. Por ejemplo, que al pulsar con el rat\u00f3n sobre un texto o sobre una imagen se nos redirija a una nueva Web con un contenido diferente. Para crear un enlace se utiliza la etiqueta <a href=\"\"></a> cuyo atributo href establece la direcci\u00f3n URL a la que apunta el enlace. Por ejemplo, un enlace a la Wikipedia ser\u00eda de la forma: 1 < a href = \"http://es.wikipedia.org\" > Wikipedia </ a > Para crear un enlace a una secci\u00f3n de nuestra propia web \u00fanicamente nos har\u00e1 falta escribir el nombre del fichero HTML, por ejemplo: 1 < a href = \"pagina2.html\" > Pulsa aqu\u00ed </ a >","title":"Enlaces"},{"location":"capitulo_html_enlaces.html#ejemplo","text":"En este ejemplo vamos a crear un enlace desde la p\u00e1gina principal de nuestro sitio web (almacenada en el fichero index.html ) a una p\u00e1gina secundaria con un art\u00edculo (que estar\u00eda en el fichero articulo1.html ). Adem\u00e1s, en la p\u00e1gina secundaria a\u00f1adiremos tambi\u00e9n un enlace para volver a la p\u00e1gina principal. El contenido de la p\u00e1gina principal (fichero index.html ) ser\u00eda el siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > Web de ejemplo </ h1 > < p > Pulsa en < a href = \"articulo1.html\" > este enlace </ a > para consultar nuestro primer art\u00edculo. </ p > </ body > </ html > El contenido de la p\u00e1gina secundaria (fichero articulo1.html ) ser\u00eda el siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > Art\u00edculo 1 </ h1 > < p > Texto de ejemplo del art\u00edculo 1. </ p > < p > Pulsa en < a href = \"index.html\" > este enlace </ a > para volver a la p\u00e1gina principal. </ p > </ body > </ html >","title":"Ejemplo"},{"location":"capitulo_html_enlaces.html#enlaces-sobre-otros-elementos","text":"Tambi\u00e9n se pueden crear enlaces sobre otros elementos, como por ejemplo im\u00e1genes. Para esto simplemente tenemos que escribir la/s etiqueta/s de dicho elemento dentro del enlace: 1 < a href = \"direcci\u00f3n_URL\" >< img src = \"imagen.jpg\" /></ a >","title":"Enlaces sobre otros elementos"},{"location":"capitulo_html_enlaces.html#abrir-una-nueva-ventana-o-pestana-del-navegador","text":"La etiqueta de enlace <a> tambi\u00e9n permite el atributo target=\"_blank\" , mediante el cual indicamos que el enlace se tiene que abrir en una nueva ventana o en una pesta\u00f1a nueva del navegador. Esta opci\u00f3n se suele utilizar a menudo para los enlaces externos para que no se cierre la web actual. Por ejemplo, para a\u00f1adir un enlace a una web externa que se abra en otra ventana para que el usuario consulte m\u00e1s informaci\u00f3n escribir\u00edamos el siguiente c\u00f3digo: 1 2 3 < a href = \"https://es.wikipedia.org/wiki/Polinomio\" target = \"_blank\" > Para m\u00e1s informaci\u00f3n pulsa aqu\u00ed </ a >","title":"Abrir una nueva ventana (o pesta\u00f1a del navegador)"},{"location":"capitulo_html_enlaces.html#direccion-base","text":"La direcci\u00f3n principal de la web no es necesario escribirla ya que se a\u00f1adir\u00e1 autom\u00e1ticamente. Por ejemplo, si nuestra web es \"http://www.webejemplo.es\" y en el enlace escrib\u00edmos \u00fanicamente <a href=\"pagina2.html\">Pulsa aqu\u00ed</a> , al pulsar nos redirigir\u00e1 a la web \"http://www.webejemplo.es/pagina2.html\". Hay que tener cuidado cuando colocamos las p\u00e1ginas dentro de carpetas. Por ejemplo, si creamos una carpeta para meter todas las p\u00e1ginas con art\u00edculos y escribimos un enlace de la forma: <a href=\"articulos/articulo1.html\">Ir al art\u00edculo 1</a> , esto nos redirigir\u00e1 a la direcci\u00f3n \"http://www.webejemplo.es/articulos/articulo1.html\". El problema est\u00e1 en los enlaces que coloquemos dentro de una p\u00e1gina que est\u00e9 en una subcarpeta. Por ejemplo, si en la p\u00e1gina \"articulo1.html\" (que est\u00e1 en la carpeta \"articulos\") a\u00f1adimos un enlace para volver al \u00edndice de la forma: <a href=\"index.html\">Volver</a> , este enlace en realidad nos llevar\u00eda a la direcci\u00f3n \"http://www.webejemplo.es/ articulos/index.html \". Es decir, buscar\u00eda la p\u00e1gina \"index.html\" dentro de la carpeta actual. Para solucionar este problema y hacer referencia a la ra\u00edz de nuestro sitio web, se suele anteponer siempre la barra \"/\" a todas las direcciones. Por ejemplo, en el caso del enlace err\u00f3neo anterior tendr\u00edamos que escribir: <a href=\"/index.html\">Volver</a> . Pero esta barra es recomendable escribirla siempre, en todas las direcciones, para evitar errores.","title":"Direcci\u00f3n base"},{"location":"capitulo_html_estructura_basica.html","text":"Estructura b\u00e1sica de una Web \u00b6 Un documento HTML comienza con la etiqueta <html> y termina con </html> . Dentro del documento (entre las etiquetas de principio y fin de html) hay dos zonas bien diferenciadas: el encabezamiento, delimitado por <head> y </head> , que sirve para incluir definiciones iniciales v\u00e1lidas para todo el documento; y el cuerpo, delimitado por <body> y </body> , donde reside la informaci\u00f3n del documento. Las etiquetas b\u00e1sicas o m\u00ednimas son: 1 2 3 4 5 6 7 8 9 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > </ head > < body > \u00a1Hola mundo! </ body > </ html > La primera l\u00ednea es el DOCTYPE, o el tipo de documento que viene a continuaci\u00f3n. En este caso se usa el est\u00e1ndar de HTML 4.01 (el \u00faltimo est\u00e1ndar adoptado en 1999, ya que HTML5 a fecha de 2011 sigue siendo un borrador). La siguiente etiqueta, <html> , define el inicio del documento HTML, e indica que lo que viene a continuaci\u00f3n debe ser interpretado como c\u00f3digo HTML. Como podemos ver en la \u00faltima l\u00ednea, se cierra la etiqueta </html> . Dentro de estas etiquetas <html> ... </html> encontramos las dos secciones mencionadas: Encabezamiento ( head ): Esta secci\u00f3n inicial contiene todos los elementos no visuales de nuestra web, como por ejemplo los metadatos descriptivos (autor, palabras clave, descripci\u00f3n del contenido, etc.), los estilos a utilizar en los elementos visuales del cuerpo, el t\u00edtulo que aparecer\u00e1 en la barra superior del navegador (como en el ejemplo superior), y otra serie de elementos que se estudiar\u00e1n m\u00e1s en detalle en la siguiente secci\u00f3n. Cuerpo ( body ): Aqu\u00ed hemos de incluir todos los contenidos visuales de nuestra web, todos los textos, im\u00e1genes, enlaces, etc. En el ejemplo de arriba lo \u00fanico que se incluye es el texto \"\u00a1Hola mundo!\" por lo que al abrir esta web nos aparecer\u00e1 una p\u00e1gina web que incluir\u00e1 \u00fanicamente ese texto. En los siguientes apartados se describir\u00e1n m\u00e1s en detalle los elementos que podemos utilizar dentro del encabezamiento o del cuerpo de una web. En primer lugar se estudiar\u00e1n los elementos de la cabecera y a continuaci\u00f3n todas las etiquetas HTML que se suelen utilizar para la construcci\u00f3n de una web.","title":"Estructura b\u00e1sica de una Web"},{"location":"capitulo_html_estructura_basica.html#estructura-basica-de-una-web","text":"Un documento HTML comienza con la etiqueta <html> y termina con </html> . Dentro del documento (entre las etiquetas de principio y fin de html) hay dos zonas bien diferenciadas: el encabezamiento, delimitado por <head> y </head> , que sirve para incluir definiciones iniciales v\u00e1lidas para todo el documento; y el cuerpo, delimitado por <body> y </body> , donde reside la informaci\u00f3n del documento. Las etiquetas b\u00e1sicas o m\u00ednimas son: 1 2 3 4 5 6 7 8 9 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > </ head > < body > \u00a1Hola mundo! </ body > </ html > La primera l\u00ednea es el DOCTYPE, o el tipo de documento que viene a continuaci\u00f3n. En este caso se usa el est\u00e1ndar de HTML 4.01 (el \u00faltimo est\u00e1ndar adoptado en 1999, ya que HTML5 a fecha de 2011 sigue siendo un borrador). La siguiente etiqueta, <html> , define el inicio del documento HTML, e indica que lo que viene a continuaci\u00f3n debe ser interpretado como c\u00f3digo HTML. Como podemos ver en la \u00faltima l\u00ednea, se cierra la etiqueta </html> . Dentro de estas etiquetas <html> ... </html> encontramos las dos secciones mencionadas: Encabezamiento ( head ): Esta secci\u00f3n inicial contiene todos los elementos no visuales de nuestra web, como por ejemplo los metadatos descriptivos (autor, palabras clave, descripci\u00f3n del contenido, etc.), los estilos a utilizar en los elementos visuales del cuerpo, el t\u00edtulo que aparecer\u00e1 en la barra superior del navegador (como en el ejemplo superior), y otra serie de elementos que se estudiar\u00e1n m\u00e1s en detalle en la siguiente secci\u00f3n. Cuerpo ( body ): Aqu\u00ed hemos de incluir todos los contenidos visuales de nuestra web, todos los textos, im\u00e1genes, enlaces, etc. En el ejemplo de arriba lo \u00fanico que se incluye es el texto \"\u00a1Hola mundo!\" por lo que al abrir esta web nos aparecer\u00e1 una p\u00e1gina web que incluir\u00e1 \u00fanicamente ese texto. En los siguientes apartados se describir\u00e1n m\u00e1s en detalle los elementos que podemos utilizar dentro del encabezamiento o del cuerpo de una web. En primer lugar se estudiar\u00e1n los elementos de la cabecera y a continuaci\u00f3n todas las etiquetas HTML que se suelen utilizar para la construcci\u00f3n de una web.","title":"Estructura b\u00e1sica de una Web"},{"location":"capitulo_html_etiquetas.html","text":"Sintaxis del lenguaje \u00b6 Las etiquetas HTML deben de ir encerradas entre corchetes angulares <> , y pueden ser de dos tipos: Se abren y se cierran, como por ejemplo: <b>negrita</b> o <p>texto</p> . Se abren y cierran en la misma etiqueta, como: <br/> o <hr/> . En caso de que no cerremos una etiqueta que deba ser cerrada se producir\u00e1 un error en la estructura del documento y probablemente tambi\u00e9n genere errores en la visualizaci\u00f3n. Hay etiquetas que adem\u00e1s pueden contener atributos, en este caso los atributos se deben de colocar en la etiqueta de inicio, de la forma: 1 < etiqueta atributo1 = \"valor1\" atributo2 = \"valor2\" > ... </ etiqueta > O para las etiquetas de solo apertura: 1 < etiqueta atributo1 = \"valor1\" atributo2 = \"valor2\" /> Por ejemplo: 1 < img src = \"imagen.jpg\" alt = \"Imagen de cabecera\" />","title":"Sintaxis del lenguaje"},{"location":"capitulo_html_etiquetas.html#sintaxis-del-lenguaje","text":"Las etiquetas HTML deben de ir encerradas entre corchetes angulares <> , y pueden ser de dos tipos: Se abren y se cierran, como por ejemplo: <b>negrita</b> o <p>texto</p> . Se abren y cierran en la misma etiqueta, como: <br/> o <hr/> . En caso de que no cerremos una etiqueta que deba ser cerrada se producir\u00e1 un error en la estructura del documento y probablemente tambi\u00e9n genere errores en la visualizaci\u00f3n. Hay etiquetas que adem\u00e1s pueden contener atributos, en este caso los atributos se deben de colocar en la etiqueta de inicio, de la forma: 1 < etiqueta atributo1 = \"valor1\" atributo2 = \"valor2\" > ... </ etiqueta > O para las etiquetas de solo apertura: 1 < etiqueta atributo1 = \"valor1\" atributo2 = \"valor2\" /> Por ejemplo: 1 < img src = \"imagen.jpg\" alt = \"Imagen de cabecera\" />","title":"Sintaxis del lenguaje"},{"location":"capitulo_html_etiquetas_basicas.html","text":"Etiquetas b\u00e1sicas HTML \u00b6 Dentro de la secci\u00f3n del cuerpo ( <body> ... </body> ) utilizaremos etiquetas HTML para crear el contenido visual de la web. Estas etiquetas nos permitir\u00e1n ir a\u00f1adiendo textos, im\u00e1genes, encabezados, tablas, etc. para componer el dise\u00f1o de la web. En primer lugar veremos las etiquetas m\u00e1s b\u00e1sicas que se suelen utilizar, estas son: <h1></h1> a <h6></h6> : encabezados o t\u00edtulos del documento con diferente relevancia, siendo <h1> la cabecera de mayor nivel. <p></p> : definici\u00f3n de un p\u00e1rrafo. <br/> : salto de l\u00ednea. <b></b> : texto en negrita (etiqueta desaprobada. Se recomienda usar la etiqueta <strong></strong> ). <i></i> : texto en cursiva (etiqueta desaprobada. Se recomienda usar la etiqueta <em></em> ). <s></s> : texto tachado (etiqueta desaprobada. Se recomienda usar la etiqueta <del></del> ). <u></u> : texto subrayado. <center></center> : texto centrado. <pre></pre> : texto preformateado, respeta los espacios y saltos de l\u00ednea. <sup></sup> : Super\u00edndice. <sub></sub> : Sub\u00edndice. <blockquote></blockquote> : Indica una cita textual, se representa como un p\u00e1rrafo indexado con respecto al margen. <hr/> : L\u00ednea horizontal, usada, por ejemplo, para separar diferentes secciones. <!-- comentario --> : Comentarios en HTML. El texto del comentario no ser\u00e1 visible en el navegador. <span></span> : Esta etiqueta no aplica ning\u00fan formato por si misma, sino que provee una forma de definir un estilo o formato a un trozo de texto. Se utiliza junto con una hoja de estilo. Por ejemplo, lo podemos utilizar para marcar palabras en alg\u00fan color o con alg\u00fan formato especial. A continuaci\u00f3n se incluye un c\u00f3digo de ejemplo en el que se ha ampliado el ejemplo del \"Hola Mundo\" y se han a\u00f1adido algunas de las etiquetas HTML que hemos visto: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > \u00a1Mi primera Web! </ h1 > < p > Ejemplo de web con textos en < strong > negrita </ strong > , < em > cursiva </ em > y < u > subrayado </ u > . </ p > < blockquote > Ejemplo de nota, como se puede ver se le aplica un margen por la izquierda. </ blockquote > < hr /> <!-- Este texto es un comentario que no se ver\u00e1 en el navegador!! --> < h2 > Otro encabezado </ h2 > < p > Texto de ejemplo con super\u00edndices (m < sup > 2 </ sup > ) y sub\u00edndices (H < sub > 2 </ sub > O). </ p > </ body > </ html > Si guardamos este c\u00f3digo en un fichero con extensi\u00f3n \"html\" (por ejemplo \"index.html\") y lo abrimos se nos mostrar\u00eda un resultado similar al siguiente:","title":"Etiquetas b\u00e1sicas"},{"location":"capitulo_html_etiquetas_basicas.html#etiquetas-basicas-html","text":"Dentro de la secci\u00f3n del cuerpo ( <body> ... </body> ) utilizaremos etiquetas HTML para crear el contenido visual de la web. Estas etiquetas nos permitir\u00e1n ir a\u00f1adiendo textos, im\u00e1genes, encabezados, tablas, etc. para componer el dise\u00f1o de la web. En primer lugar veremos las etiquetas m\u00e1s b\u00e1sicas que se suelen utilizar, estas son: <h1></h1> a <h6></h6> : encabezados o t\u00edtulos del documento con diferente relevancia, siendo <h1> la cabecera de mayor nivel. <p></p> : definici\u00f3n de un p\u00e1rrafo. <br/> : salto de l\u00ednea. <b></b> : texto en negrita (etiqueta desaprobada. Se recomienda usar la etiqueta <strong></strong> ). <i></i> : texto en cursiva (etiqueta desaprobada. Se recomienda usar la etiqueta <em></em> ). <s></s> : texto tachado (etiqueta desaprobada. Se recomienda usar la etiqueta <del></del> ). <u></u> : texto subrayado. <center></center> : texto centrado. <pre></pre> : texto preformateado, respeta los espacios y saltos de l\u00ednea. <sup></sup> : Super\u00edndice. <sub></sub> : Sub\u00edndice. <blockquote></blockquote> : Indica una cita textual, se representa como un p\u00e1rrafo indexado con respecto al margen. <hr/> : L\u00ednea horizontal, usada, por ejemplo, para separar diferentes secciones. <!-- comentario --> : Comentarios en HTML. El texto del comentario no ser\u00e1 visible en el navegador. <span></span> : Esta etiqueta no aplica ning\u00fan formato por si misma, sino que provee una forma de definir un estilo o formato a un trozo de texto. Se utiliza junto con una hoja de estilo. Por ejemplo, lo podemos utilizar para marcar palabras en alg\u00fan color o con alg\u00fan formato especial. A continuaci\u00f3n se incluye un c\u00f3digo de ejemplo en el que se ha ampliado el ejemplo del \"Hola Mundo\" y se han a\u00f1adido algunas de las etiquetas HTML que hemos visto: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > \u00a1Mi primera Web! </ h1 > < p > Ejemplo de web con textos en < strong > negrita </ strong > , < em > cursiva </ em > y < u > subrayado </ u > . </ p > < blockquote > Ejemplo de nota, como se puede ver se le aplica un margen por la izquierda. </ blockquote > < hr /> <!-- Este texto es un comentario que no se ver\u00e1 en el navegador!! --> < h2 > Otro encabezado </ h2 > < p > Texto de ejemplo con super\u00edndices (m < sup > 2 </ sup > ) y sub\u00edndices (H < sub > 2 </ sub > O). </ p > </ body > </ html > Si guardamos este c\u00f3digo en un fichero con extensi\u00f3n \"html\" (por ejemplo \"index.html\") y lo abrimos se nos mostrar\u00eda un resultado similar al siguiente:","title":"Etiquetas b\u00e1sicas HTML"},{"location":"capitulo_html_eventos.html","text":"Eventos \u00b6 En esta secci\u00f3n de describe un concepto un poco m\u00e1s avanzado: los eventos. Un evento, como su nombre indica, es cuando sucede una determinada acci\u00f3n sobre un elemento. HTML permite escuchar estos eventos y asociarles un comportamiento o acci\u00f3n que se realizar\u00e1 cuando suceda dicho evento. La forma de definirlos es similar a los atributos ( evento=\"ACCION\" ), la acci\u00f3n har\u00e1 referencia a una funci\u00f3n o m\u00e9todo en lenguaje JavaScript. Algunos de los eventos que podemos utilizar son: onload : se activa cuando el navegador termina de cargar todos los elementos de la p\u00e1gina. onclick : cuando se presiona el bot\u00f3n del rat\u00f3n sobre un elemento. onmouseover : se dispara cuando el cursor del rat\u00f3n pasa sobre un elemento. onmousemove : cuando se mueve el cursor del rat\u00f3n mientras est\u00e1 sobre un elemento. onmouseout : se activa cuando el cursor del rat\u00f3n sale fuera de un elemento (sobre el que estaba). onfocus : ocurre cuando un elemento recibe el enfoque (el cursor de escritura), ya sea con el puntero o con mediante la tecla tabulador. onkeypress : ocurre cuando se presiona una tecla (dentro de un elemento, por ejemplo un campo de escritura). onkeydown : se dispara cuando una tecla es presionada (dentro de un elemento) onkeyup : cuando una tecla es soltada. onsubmit : se activa cuando un formulario es enviado. onreset : ocurre cuando un formulario es reseteado. onchange : ocurre cuando un control pierde el enfoque y su valor ha sido modificado desde que recibi\u00f3 el enfoque. etc. (Ver secci\u00f3n eventos en el cap\u00edtulo de JavaScript) Por ejemplo, podemos enlazar el evento \" onkeyup \" de un textarea con una funci\u00f3n de JavaScript de la forma: 1 2 3 4 5 6 7 < script type = \"text/javascript\" > function saveText () { // acciones JavaScript } </ script > < textarea id = \"myarea\" cols = \"80\" rows = \"15\" onkeyup = \"saveText()\" ></ textarea > Los eventos se ver\u00e1n m\u00e1s en detalle en el cap\u00edtulo correspondiente de la secci\u00f3n dedicada a Javascript (Ver secci\u00f3n eventos ). De momento, solo es importante que aprendr\u00e1is que se puede asociar c\u00f3digo JavaScript a determinados eventos o acciones que se producen en los campos HTML de una p\u00e1gina Web.","title":"Eventos"},{"location":"capitulo_html_eventos.html#eventos","text":"En esta secci\u00f3n de describe un concepto un poco m\u00e1s avanzado: los eventos. Un evento, como su nombre indica, es cuando sucede una determinada acci\u00f3n sobre un elemento. HTML permite escuchar estos eventos y asociarles un comportamiento o acci\u00f3n que se realizar\u00e1 cuando suceda dicho evento. La forma de definirlos es similar a los atributos ( evento=\"ACCION\" ), la acci\u00f3n har\u00e1 referencia a una funci\u00f3n o m\u00e9todo en lenguaje JavaScript. Algunos de los eventos que podemos utilizar son: onload : se activa cuando el navegador termina de cargar todos los elementos de la p\u00e1gina. onclick : cuando se presiona el bot\u00f3n del rat\u00f3n sobre un elemento. onmouseover : se dispara cuando el cursor del rat\u00f3n pasa sobre un elemento. onmousemove : cuando se mueve el cursor del rat\u00f3n mientras est\u00e1 sobre un elemento. onmouseout : se activa cuando el cursor del rat\u00f3n sale fuera de un elemento (sobre el que estaba). onfocus : ocurre cuando un elemento recibe el enfoque (el cursor de escritura), ya sea con el puntero o con mediante la tecla tabulador. onkeypress : ocurre cuando se presiona una tecla (dentro de un elemento, por ejemplo un campo de escritura). onkeydown : se dispara cuando una tecla es presionada (dentro de un elemento) onkeyup : cuando una tecla es soltada. onsubmit : se activa cuando un formulario es enviado. onreset : ocurre cuando un formulario es reseteado. onchange : ocurre cuando un control pierde el enfoque y su valor ha sido modificado desde que recibi\u00f3 el enfoque. etc. (Ver secci\u00f3n eventos en el cap\u00edtulo de JavaScript) Por ejemplo, podemos enlazar el evento \" onkeyup \" de un textarea con una funci\u00f3n de JavaScript de la forma: 1 2 3 4 5 6 7 < script type = \"text/javascript\" > function saveText () { // acciones JavaScript } </ script > < textarea id = \"myarea\" cols = \"80\" rows = \"15\" onkeyup = \"saveText()\" ></ textarea > Los eventos se ver\u00e1n m\u00e1s en detalle en el cap\u00edtulo correspondiente de la secci\u00f3n dedicada a Javascript (Ver secci\u00f3n eventos ). De momento, solo es importante que aprendr\u00e1is que se puede asociar c\u00f3digo JavaScript a determinados eventos o acciones que se producen en los campos HTML de una p\u00e1gina Web.","title":"Eventos"},{"location":"capitulo_html_formularios.html","text":"Formularios \u00b6 Los formularios permiten solicitar informaci\u00f3n al visitante de una p\u00e1gina Web. Est\u00e1n compuestos por campos de diferente tipo, cuya informaci\u00f3n se enviar\u00e1 a una direcci\u00f3n URL (indicada en el c\u00f3digo) al pulsar el bot\u00f3n de env\u00edo. La declaraci\u00f3n de formulario queda recogida por las etiquetas <form></form> , las cuales deben encerrar la definici\u00f3n de todos los campos del formulario. En la etiqueta de apertura <form> tenemos que indicar los atributos b\u00e1sicos: action=\"\" : Entre comillas se indica la acci\u00f3n a realizar al enviar el formulario. En general se indicar\u00e1 el nombre de un fichero alojado en el servidor, el cual se encargar\u00e1 de procesar la informaci\u00f3n. Aunque tambi\u00e9n se le puede indicar una direcci\u00f3n de correo para que env\u00ede directamente todo el contenido, de la forma: mailto:direccion_de_correo . method=\"\" ( post o get ): Indica el m\u00e9todo de transferencia de las variables. El m\u00e9todo \" post \" env\u00eda los datos de forma no visible, mientras que el m\u00e9todo \" get \" los adjunta a la URL a la que se redirige. enctype= \"\" : Especifica el tipo de codificaci\u00f3n de la informaci\u00f3n enviada. Con method=\"get\" no se realiza codificaci\u00f3n, solo se cambian caracteres especiales como el espacio, por lo que no es necesario indicar enctype . Cuando el valor del atributo \" method \" es \" post \", podemos utilizar los siguientes valores: application/x-www-form-urlencoded : Es el valor predeterminado. Codifica todos los caracteres antes de enviarlos. multipart/form-data : Es requerido al enviar archivos mediante un formulario. No codifica la informaci\u00f3n. text/plain : No codifica la informaci\u00f3n, solo cambia los espacios por el s\u00edmbolo \"+\". Por ejemplo, una posible cabecera de un formlario ser\u00eda: 1 2 3 4 5 6 7 8 9 < form action = \"http://www.miweb.com/procesarformulario\" method = \"POST\" > <!-- Como no indicamos el enctype se utilizar\u00e1 la condificaci\u00f3n por defecto --> <!-- Campos del formulario --> <!-- Campos del formulario --> <!-- Campos del formulario --> </ form > Tipos de campos b\u00e1sicos \u00b6 Para a\u00f1adir campos al formulario se utiliza la etiqueta <input/> , esta etiqueta debe de tener siempre dos atributos: name=\"\" : Indica el nombre que se asigna a un determinado campo. Este nombre no aparece visible en la Web, pues se utiliza para poder distinguir cada campo al enviar la informaci\u00f3n al servidor o por correo. Es como si fuera el nombre de la variable a la que se asigna el valor del campo. type=\"\" : Indica el tipo de campo a utilizar. Puede ser de muchos tipos: text, password, checkbox, radio, file, hidden, submit, reset. A continuaci\u00f3n se describen m\u00e1s detalladamente los diferentes tipos de campos <input/> seg\u00fan su valor type : type=\"text\" : campo de tipo texto de una l\u00ednea. Sus atributos son: maxlenght=\"\" : Seguido de un valor que limitar\u00e1 el n\u00famero m\u00e1ximo de caracteres. size=\"\" : Seguido de un valor que limitar\u00e1 el n\u00famero de caracteres a mostrar en pantalla. A diferencia de maxlenght este atributo no limita la longitud del texto que se puede introducir, sino que modifica el tama\u00f1o visible del campo. value=\"\" : Indica el valor inicial del campo. A continuaci\u00f3n se incluye un ejemplo de uso: 1 < input name = \"usuario\" type = \"text\" maxlenght = \"24\" /> type=\"password\" : Este campo funciona exactamente igual que el de tipo \"text\", pero ocultar\u00e1 el texto introducido cambiando las letras por asteriscos o puntos. Sus atributos son los mismos que para \"text\". type=\"checkbox\" : Este campo mostrar\u00e1 una casilla cuadrada que nos permitir\u00e1 marcar opciones de una lista (podremos marcar varias opciones a la vez). Para indicar que varias casillas pertenecen al mismo grupo se les debe de dar el mismo nombre para el atributo \"name\". El texto que queramos que aparezca a continuaci\u00f3n de la casilla del \"checkbox\" se tendr\u00e1 que escribir despu\u00e9s de cerrar la etiqueta <input/> . Sus atributos son: value=\"\" : Define el valor que ser\u00e1 enviado si la casilla est\u00e1 marcada. checked : Este atributo es opcional, y hace que la casilla aparezca marcada por defecto. No necesita indicarle ning\u00fan valor. Ejemplo: 1 2 3 < input type = \"checkbox\" name = \"option1\" value = \"leche\" /> Leche < br /> < input type = \"checkbox\" name = \"option1\" value = \"pan\" checked /> Pan < br /> < input type = \"checkbox\" name = \"option1\" value = \"queso\" /> Queso < br /> type=\"radio\" : El campo se elegir\u00e1 marcando de entre varias opciones una casilla circular. Al marcar una casilla el resto de casillas de ese grupo de desmarcar\u00e1n autom\u00e1ticamente. Para indicar que varias casillas pertenecen al mismo grupo se les debe de dar el mismo nombre para el atributo \"name\" (ver ejemplo). Adem\u00e1s debemos de indicar: value=\"\" : Define el valor que ser\u00e1 enviado si la casilla est\u00e1 marcada. checked : Este atributo es opcional, y hace que la casilla aparezca marcada por defecto. Solo se podr\u00e1 usar para una casilla. No necesita indicarle ning\u00fan valor. Ejemplo: 1 2 3 < input type = \"radio\" name = \"group1\" value = \"leche\" /> Leche < br /> < input type = \"radio\" name = \"group1\" value = \"pan\" checked /> Pan < br /> < input type = \"radio\" name = \"group1\" value = \"queso\" /> Queso < br /> type=\"file\" : El atributo file permite al usuario subir archivos. Necesitaremos un programa que gestione estos archivos en el servidor mediante un lenguaje diferente al HTML. El \u00fanico atributo opcional que podemos utilizar es size=\"\" mediante el cual podremos indicar la anchura visual de este campo. Ejemplo: 1 < input type = \"file\" name = \"datafile\" size = \"40\" /> type=\"hidden\" : Este valor no puede ser modificado, pues permanece oculto. Se suele utilizar para enviar al m\u00e9todo encargado de procesar el formulario alg\u00fan dato adicional necesario para su procesamiento. Para indicar el valor de este campo utilizamos el atributo: value = \"valor\" . type=\"submit\" : Representa el bot\u00f3n de \"Enviar\". Al pulsar este bot\u00f3n la informaci\u00f3n de todos los campos se enviar\u00e1 realizando la acci\u00f3n indicada en <form> . Mediante el atributo: value=\"texto\" : podemos indicar el texto que aparecer\u00e1 en el bot\u00f3n. type=\"reset\" : Al pulsar este bot\u00f3n se borra el contenido de todos los campos del formulario. Mediante el atributo: value=\"texto\" : podemos indicar el texto que aparecer\u00e1 en el bot\u00f3n. Etiquetas \u00b6 Las etiquetas se utilizan para poner un texto o descripci\u00f3n de los campos de un formulario. Se escriben usando la etiqueta HTML <label> y tienen un \u00fanico atributo \" for \" que se utiliza para indicar el nombre (atributo name ) del campo asociado. Por ejemplo: 1 2 < label for = \"campo1\" > Etiqueta </ label > < input name = \"campo1\" type = \"text\" /> Campos de Selecci\u00f3n \u00b6 Mediante la etiqueta <select></select> podemos crear listas de opciones, que nos permitir\u00e1n seleccionar entre una o varias de ellas. Sus atributos son: name=\"\" : Nombre del campo. size=\"\" : N\u00famero de opciones visibles a la vez. Si no se indica nada o se le asigna un valor de uno se presentar\u00e1 como un men\u00fa desplegable. En el caso de valores mayores que uno aparecer\u00e1 como una lista con una barra de desplazamiento. multiple : Permite seleccionar mas de un valor a la vez para el campo. Las diferentes opciones de la lista se indicar\u00e1n mediante la etiqueta <option></option> . El nombre que se visualizar\u00e1 debe de indicarse dentro de estas etiquetas. Mediante el atributo value=\"\" podemos indicar el valor que se enviar\u00e1 con el formulario. Tambi\u00e9n podemos utilizar el atributo selected para indicar la opci\u00f3n seleccionada por defecto. Si no lo especificamos, siempre aparecer\u00e1 como seleccionado el primer elemento de la lista. 1 2 3 4 5 6 7 8 9 10 < select name = \"Colores\" multiple > < option value = \"r\" > Rojo </ option > < option value = \"g\" > Verde </ option > < option value = \"b\" > Azul </ option > </ select > < select name = \"Colores\" SIZE = \"1\" > < option value = \"r\" > Rojo </ option > < option value = \"g\" selected > Verde </ option > < option value = \"b\" > Azul </ option > </ select > \u00c1reas de texto \u00b6 Mediante las etiquetas <textarea></textarea> podemos crear un campo de texto de m\u00faltiples l\u00edneas. Los atributos que podemos utilizar son: name=\"\" : Nombre del campo. cols=\"num\" : N\u00famero de columnas de texto visibles. Este atributo es opcional. rows=\"num\" : N\u00famero de filas de texto visibles. Este atributo es opcional. Ejemplo \u00b6 A continuaci\u00f3n se incluye un ejemplo de uso de los formularios en el que se han incluido la mayor\u00eda de los campos que hemos visto: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" /> </ head > < body > < h2 > Formulario de registro </ h2 > < p > Escribe tus datos de usuario en el siguiente formulario y por \u00faltimo aprieta el bot\u00f3n enviar. </ p > < form action = \"http://www.miweb.com/procesarformulario\" method = \"POST\" > < p > < label for = \"usuario\" > Usuario: </ label > < input name = \"usuario\" type = \"text\" maxlenght = \"32\" /> </ p > < p > < label for = \"password\" > Contrase\u00f1a: </ label > < input name = \"password\" type = \"password\" maxlenght = \"16\" /> </ p > < p > < label for = \"nombre\" > Nombre completo: </ label > < input name = \"nombre\" type = \"text\" maxlenght = \"64\" /> </ p > < p > < label for = \"direccion\" > Direcci\u00f3n: </ label > < input name = \"direccion\" type = \"text\" maxlenght = \"128\" /> </ p > < p > < label for = \"ciudad\" > Ciudad: </ label > < select name = \"ciudad\" > < option value = \"A Coru\u00f1a\" > A Coru\u00f1a </ option > < option value = \"\u00c1lava\" > \u00c1lava </ option > < option value = \"Albacete\" > Albacete </ option > < option value = \"Alicante\" > Alicante </ option > < option value = \"Almer\u00eda\" > Almer\u00eda </ option > < option value = \"Asturias\" > Asturias </ option > <!-- resto de ciudades... --> </ select > </ p > < p > < label for = \"tipo\" > Tipo de cliente: </ label >< br /> < input type = \"radio\" name = \"tipo\" value = \"particular\" checked /> Particular < br /> < input type = \"radio\" name = \"tipo\" value = \"profesional\" /> Profesional < br /> </ p > < p > < label for = \"comentarios\" > Comentarios: </ label >< br /> < textarea name = \"comentarios\" rows = \"4\" cols = \"50\" ></ textarea > </ p > < p > < input type = \"checkbox\" name = \"terminos\" value = \"terminos\" /> < label for = \"terminos\" > Acepto los t\u00e9rminos y condiciones de uso </ label > </ p > < p > < input type = \"submit\" value = \"Enviar\" /> < input type = \"reset\" value = \"Borrar formulario\" /> </ p > </ form > </ body > </ html > Como se puede ver cada par de etiqueta y campo de formulario se ha encerrado dentro de un p\u00e1rrafo <p> para que ocupe una \u00fanica l\u00ednea y que el siguiente campo baje a la l\u00ednea siguiente. Este mismo efecto se podr\u00eda conseguir usando la etiqueta <div> . Para mejorar el aspecto visual del formulario se tendr\u00edan que aplicar estilos CSS, los cuales se tratar\u00e1n en el siguiente cap\u00edtulo. Si guardamos este c\u00f3digo en un fichero \".html\" y lo abrimos con el navegador obtendr\u00edamos un resultado similar al siguiente:","title":"Formularios"},{"location":"capitulo_html_formularios.html#formularios","text":"Los formularios permiten solicitar informaci\u00f3n al visitante de una p\u00e1gina Web. Est\u00e1n compuestos por campos de diferente tipo, cuya informaci\u00f3n se enviar\u00e1 a una direcci\u00f3n URL (indicada en el c\u00f3digo) al pulsar el bot\u00f3n de env\u00edo. La declaraci\u00f3n de formulario queda recogida por las etiquetas <form></form> , las cuales deben encerrar la definici\u00f3n de todos los campos del formulario. En la etiqueta de apertura <form> tenemos que indicar los atributos b\u00e1sicos: action=\"\" : Entre comillas se indica la acci\u00f3n a realizar al enviar el formulario. En general se indicar\u00e1 el nombre de un fichero alojado en el servidor, el cual se encargar\u00e1 de procesar la informaci\u00f3n. Aunque tambi\u00e9n se le puede indicar una direcci\u00f3n de correo para que env\u00ede directamente todo el contenido, de la forma: mailto:direccion_de_correo . method=\"\" ( post o get ): Indica el m\u00e9todo de transferencia de las variables. El m\u00e9todo \" post \" env\u00eda los datos de forma no visible, mientras que el m\u00e9todo \" get \" los adjunta a la URL a la que se redirige. enctype= \"\" : Especifica el tipo de codificaci\u00f3n de la informaci\u00f3n enviada. Con method=\"get\" no se realiza codificaci\u00f3n, solo se cambian caracteres especiales como el espacio, por lo que no es necesario indicar enctype . Cuando el valor del atributo \" method \" es \" post \", podemos utilizar los siguientes valores: application/x-www-form-urlencoded : Es el valor predeterminado. Codifica todos los caracteres antes de enviarlos. multipart/form-data : Es requerido al enviar archivos mediante un formulario. No codifica la informaci\u00f3n. text/plain : No codifica la informaci\u00f3n, solo cambia los espacios por el s\u00edmbolo \"+\". Por ejemplo, una posible cabecera de un formlario ser\u00eda: 1 2 3 4 5 6 7 8 9 < form action = \"http://www.miweb.com/procesarformulario\" method = \"POST\" > <!-- Como no indicamos el enctype se utilizar\u00e1 la condificaci\u00f3n por defecto --> <!-- Campos del formulario --> <!-- Campos del formulario --> <!-- Campos del formulario --> </ form >","title":"Formularios"},{"location":"capitulo_html_formularios.html#tipos-de-campos-basicos","text":"Para a\u00f1adir campos al formulario se utiliza la etiqueta <input/> , esta etiqueta debe de tener siempre dos atributos: name=\"\" : Indica el nombre que se asigna a un determinado campo. Este nombre no aparece visible en la Web, pues se utiliza para poder distinguir cada campo al enviar la informaci\u00f3n al servidor o por correo. Es como si fuera el nombre de la variable a la que se asigna el valor del campo. type=\"\" : Indica el tipo de campo a utilizar. Puede ser de muchos tipos: text, password, checkbox, radio, file, hidden, submit, reset. A continuaci\u00f3n se describen m\u00e1s detalladamente los diferentes tipos de campos <input/> seg\u00fan su valor type : type=\"text\" : campo de tipo texto de una l\u00ednea. Sus atributos son: maxlenght=\"\" : Seguido de un valor que limitar\u00e1 el n\u00famero m\u00e1ximo de caracteres. size=\"\" : Seguido de un valor que limitar\u00e1 el n\u00famero de caracteres a mostrar en pantalla. A diferencia de maxlenght este atributo no limita la longitud del texto que se puede introducir, sino que modifica el tama\u00f1o visible del campo. value=\"\" : Indica el valor inicial del campo. A continuaci\u00f3n se incluye un ejemplo de uso: 1 < input name = \"usuario\" type = \"text\" maxlenght = \"24\" /> type=\"password\" : Este campo funciona exactamente igual que el de tipo \"text\", pero ocultar\u00e1 el texto introducido cambiando las letras por asteriscos o puntos. Sus atributos son los mismos que para \"text\". type=\"checkbox\" : Este campo mostrar\u00e1 una casilla cuadrada que nos permitir\u00e1 marcar opciones de una lista (podremos marcar varias opciones a la vez). Para indicar que varias casillas pertenecen al mismo grupo se les debe de dar el mismo nombre para el atributo \"name\". El texto que queramos que aparezca a continuaci\u00f3n de la casilla del \"checkbox\" se tendr\u00e1 que escribir despu\u00e9s de cerrar la etiqueta <input/> . Sus atributos son: value=\"\" : Define el valor que ser\u00e1 enviado si la casilla est\u00e1 marcada. checked : Este atributo es opcional, y hace que la casilla aparezca marcada por defecto. No necesita indicarle ning\u00fan valor. Ejemplo: 1 2 3 < input type = \"checkbox\" name = \"option1\" value = \"leche\" /> Leche < br /> < input type = \"checkbox\" name = \"option1\" value = \"pan\" checked /> Pan < br /> < input type = \"checkbox\" name = \"option1\" value = \"queso\" /> Queso < br /> type=\"radio\" : El campo se elegir\u00e1 marcando de entre varias opciones una casilla circular. Al marcar una casilla el resto de casillas de ese grupo de desmarcar\u00e1n autom\u00e1ticamente. Para indicar que varias casillas pertenecen al mismo grupo se les debe de dar el mismo nombre para el atributo \"name\" (ver ejemplo). Adem\u00e1s debemos de indicar: value=\"\" : Define el valor que ser\u00e1 enviado si la casilla est\u00e1 marcada. checked : Este atributo es opcional, y hace que la casilla aparezca marcada por defecto. Solo se podr\u00e1 usar para una casilla. No necesita indicarle ning\u00fan valor. Ejemplo: 1 2 3 < input type = \"radio\" name = \"group1\" value = \"leche\" /> Leche < br /> < input type = \"radio\" name = \"group1\" value = \"pan\" checked /> Pan < br /> < input type = \"radio\" name = \"group1\" value = \"queso\" /> Queso < br /> type=\"file\" : El atributo file permite al usuario subir archivos. Necesitaremos un programa que gestione estos archivos en el servidor mediante un lenguaje diferente al HTML. El \u00fanico atributo opcional que podemos utilizar es size=\"\" mediante el cual podremos indicar la anchura visual de este campo. Ejemplo: 1 < input type = \"file\" name = \"datafile\" size = \"40\" /> type=\"hidden\" : Este valor no puede ser modificado, pues permanece oculto. Se suele utilizar para enviar al m\u00e9todo encargado de procesar el formulario alg\u00fan dato adicional necesario para su procesamiento. Para indicar el valor de este campo utilizamos el atributo: value = \"valor\" . type=\"submit\" : Representa el bot\u00f3n de \"Enviar\". Al pulsar este bot\u00f3n la informaci\u00f3n de todos los campos se enviar\u00e1 realizando la acci\u00f3n indicada en <form> . Mediante el atributo: value=\"texto\" : podemos indicar el texto que aparecer\u00e1 en el bot\u00f3n. type=\"reset\" : Al pulsar este bot\u00f3n se borra el contenido de todos los campos del formulario. Mediante el atributo: value=\"texto\" : podemos indicar el texto que aparecer\u00e1 en el bot\u00f3n.","title":"Tipos de campos b\u00e1sicos"},{"location":"capitulo_html_formularios.html#etiquetas","text":"Las etiquetas se utilizan para poner un texto o descripci\u00f3n de los campos de un formulario. Se escriben usando la etiqueta HTML <label> y tienen un \u00fanico atributo \" for \" que se utiliza para indicar el nombre (atributo name ) del campo asociado. Por ejemplo: 1 2 < label for = \"campo1\" > Etiqueta </ label > < input name = \"campo1\" type = \"text\" />","title":"Etiquetas"},{"location":"capitulo_html_formularios.html#campos-de-seleccion","text":"Mediante la etiqueta <select></select> podemos crear listas de opciones, que nos permitir\u00e1n seleccionar entre una o varias de ellas. Sus atributos son: name=\"\" : Nombre del campo. size=\"\" : N\u00famero de opciones visibles a la vez. Si no se indica nada o se le asigna un valor de uno se presentar\u00e1 como un men\u00fa desplegable. En el caso de valores mayores que uno aparecer\u00e1 como una lista con una barra de desplazamiento. multiple : Permite seleccionar mas de un valor a la vez para el campo. Las diferentes opciones de la lista se indicar\u00e1n mediante la etiqueta <option></option> . El nombre que se visualizar\u00e1 debe de indicarse dentro de estas etiquetas. Mediante el atributo value=\"\" podemos indicar el valor que se enviar\u00e1 con el formulario. Tambi\u00e9n podemos utilizar el atributo selected para indicar la opci\u00f3n seleccionada por defecto. Si no lo especificamos, siempre aparecer\u00e1 como seleccionado el primer elemento de la lista. 1 2 3 4 5 6 7 8 9 10 < select name = \"Colores\" multiple > < option value = \"r\" > Rojo </ option > < option value = \"g\" > Verde </ option > < option value = \"b\" > Azul </ option > </ select > < select name = \"Colores\" SIZE = \"1\" > < option value = \"r\" > Rojo </ option > < option value = \"g\" selected > Verde </ option > < option value = \"b\" > Azul </ option > </ select >","title":"Campos de Selecci\u00f3n"},{"location":"capitulo_html_formularios.html#areas-de-texto","text":"Mediante las etiquetas <textarea></textarea> podemos crear un campo de texto de m\u00faltiples l\u00edneas. Los atributos que podemos utilizar son: name=\"\" : Nombre del campo. cols=\"num\" : N\u00famero de columnas de texto visibles. Este atributo es opcional. rows=\"num\" : N\u00famero de filas de texto visibles. Este atributo es opcional.","title":"\u00c1reas de texto"},{"location":"capitulo_html_formularios.html#ejemplo","text":"A continuaci\u00f3n se incluye un ejemplo de uso de los formularios en el que se han incluido la mayor\u00eda de los campos que hemos visto: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> < html > < head > < title > Ejemplo </ title > < meta charset = \"utf-8\" /> </ head > < body > < h2 > Formulario de registro </ h2 > < p > Escribe tus datos de usuario en el siguiente formulario y por \u00faltimo aprieta el bot\u00f3n enviar. </ p > < form action = \"http://www.miweb.com/procesarformulario\" method = \"POST\" > < p > < label for = \"usuario\" > Usuario: </ label > < input name = \"usuario\" type = \"text\" maxlenght = \"32\" /> </ p > < p > < label for = \"password\" > Contrase\u00f1a: </ label > < input name = \"password\" type = \"password\" maxlenght = \"16\" /> </ p > < p > < label for = \"nombre\" > Nombre completo: </ label > < input name = \"nombre\" type = \"text\" maxlenght = \"64\" /> </ p > < p > < label for = \"direccion\" > Direcci\u00f3n: </ label > < input name = \"direccion\" type = \"text\" maxlenght = \"128\" /> </ p > < p > < label for = \"ciudad\" > Ciudad: </ label > < select name = \"ciudad\" > < option value = \"A Coru\u00f1a\" > A Coru\u00f1a </ option > < option value = \"\u00c1lava\" > \u00c1lava </ option > < option value = \"Albacete\" > Albacete </ option > < option value = \"Alicante\" > Alicante </ option > < option value = \"Almer\u00eda\" > Almer\u00eda </ option > < option value = \"Asturias\" > Asturias </ option > <!-- resto de ciudades... --> </ select > </ p > < p > < label for = \"tipo\" > Tipo de cliente: </ label >< br /> < input type = \"radio\" name = \"tipo\" value = \"particular\" checked /> Particular < br /> < input type = \"radio\" name = \"tipo\" value = \"profesional\" /> Profesional < br /> </ p > < p > < label for = \"comentarios\" > Comentarios: </ label >< br /> < textarea name = \"comentarios\" rows = \"4\" cols = \"50\" ></ textarea > </ p > < p > < input type = \"checkbox\" name = \"terminos\" value = \"terminos\" /> < label for = \"terminos\" > Acepto los t\u00e9rminos y condiciones de uso </ label > </ p > < p > < input type = \"submit\" value = \"Enviar\" /> < input type = \"reset\" value = \"Borrar formulario\" /> </ p > </ form > </ body > </ html > Como se puede ver cada par de etiqueta y campo de formulario se ha encerrado dentro de un p\u00e1rrafo <p> para que ocupe una \u00fanica l\u00ednea y que el siguiente campo baje a la l\u00ednea siguiente. Este mismo efecto se podr\u00eda conseguir usando la etiqueta <div> . Para mejorar el aspecto visual del formulario se tendr\u00edan que aplicar estilos CSS, los cuales se tratar\u00e1n en el siguiente cap\u00edtulo. Si guardamos este c\u00f3digo en un fichero \".html\" y lo abrimos con el navegador obtendr\u00edamos un resultado similar al siguiente:","title":"Ejemplo"},{"location":"capitulo_html_imagenes.html","text":"Im\u00e1genes \u00b6 Para incluir una imagen se utiliza la etiqueta <img src=\"\" alt=\"\"/> , la cual requiere el atributo src con la ruta en la que se encuentra la imagen. Es conveniente poner siempre el atributo alt=\"texto alternativo\" , el cual indica el texto a mostrar en caso de no poder cargar la imagen y tambi\u00e9n se utiliza para opciones de accesibilidad. Por ejemplo, para cargar una imagen llamada \"cabecera.jpg\" utilizaremos la etiqueta de la forma: 1 < img src = \"cabecera.jpg\" alt = \"Imagen de cabecera\" /> Adem\u00e1s existen otros atributos interesantes como width y height para redefinir el ancho y la altura de la imagen. Sin embargo se recomienda indicar estas propiedades (ancho y alto) modificando los estilos de la etiqueta (ver cap\u00edtulo \"Introducci\u00f3n a CSS\").","title":"Im\u00e1genes"},{"location":"capitulo_html_imagenes.html#imagenes","text":"Para incluir una imagen se utiliza la etiqueta <img src=\"\" alt=\"\"/> , la cual requiere el atributo src con la ruta en la que se encuentra la imagen. Es conveniente poner siempre el atributo alt=\"texto alternativo\" , el cual indica el texto a mostrar en caso de no poder cargar la imagen y tambi\u00e9n se utiliza para opciones de accesibilidad. Por ejemplo, para cargar una imagen llamada \"cabecera.jpg\" utilizaremos la etiqueta de la forma: 1 < img src = \"cabecera.jpg\" alt = \"Imagen de cabecera\" /> Adem\u00e1s existen otros atributos interesantes como width y height para redefinir el ancho y la altura de la imagen. Sin embargo se recomienda indicar estas propiedades (ancho y alto) modificando los estilos de la etiqueta (ver cap\u00edtulo \"Introducci\u00f3n a CSS\").","title":"Im\u00e1genes"},{"location":"capitulo_html_listas.html","text":"Listas \u00b6 Para definir una lista utilizamos las siguientes etiquetas: <ol></ol> : Lista ordenada (con numeraci\u00f3n). <ul></ul> : Lista con puntos (o vi\u00f1etas). Las etiquetas <ol></ol> y <ul></ul> se utilizan como etiquetas contenedoras de los elementos de la lista, dentro de las cuales tendremos que utilizar la etiqueta <li></li> para ir a\u00f1adiendo cada uno de los elementos de la misma. Por ejemplo, para crear una lista ordenada con dos elementos: 1 2 3 4 < ol > < li > Elemento 1 </ li > < li > Elemento 2 </ li > </ ol > Con lo que obtendr\u00edamos un resultado similar al siguiente: Elemento 1 Elemento 2 O por ejemplo, para crear una lista con puntos o vi\u00f1etas de tres elementos usar\u00edamos el siguiente c\u00f3digo: 1 2 3 4 5 < ul > < li > Elemento 1 </ li > < li > Elemento 2 </ li > < li > Elemento 3 </ li > </ ul > Con lo que obtendr\u00edamos un resultado similar al siguiente: Elemento 1 Elemento 2 Elemento 3 Dentro de las etiquetas <li> a su vez podemos usar otras etiquetas, como por ejemplo poner negritas, cursivas, encabezados, o cualquier otra cosa que se nos ocurra, por ejemplo: 1 2 3 4 < ul > < li >< em > Elemento 1 </ em > : El elemento 1 es el < u > principal </ u > de la lista. </ li > < li >< em > Elemento 2 </ em > : El elemento 2 es muy < strong > peligroso! </ strong ></ li > </ ul > Con este c\u00f3digo HTML obtendr\u00edamos un resultado similar al siguiente: Elemento 1 : El elemento 1 es el principal de la lista. Elemento 2 : El elemento 2 es muy peligroso! Dado que dentro de un elemento de la lista podemos poner cualquier otra etiqueta, tambi\u00e9n podremos poner otras listas. Esto nos permitir\u00e1 es hacer listas anidadas de la forma: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 < h1 > Men\u00fa </ h1 > < ol > < li > Primer plato < ul > < li > Ensalada </ li > < li > Gazpacho andaluz </ li > </ ul > </ li > < li > Segundo plato < ul > < li > Macarrones </ li > < li > Pollo al horno </ li > < li > Pescado </ li > </ ul > </ li > < li > Postre < ul > < li > Tarta </ li > < li > Yogur </ li > < li > Caf\u00e9 </ li > </ ul > </ li > </ ol > Con lo que obtendr\u00edamos una lista como la siguiente:","title":"Listas"},{"location":"capitulo_html_listas.html#listas","text":"Para definir una lista utilizamos las siguientes etiquetas: <ol></ol> : Lista ordenada (con numeraci\u00f3n). <ul></ul> : Lista con puntos (o vi\u00f1etas). Las etiquetas <ol></ol> y <ul></ul> se utilizan como etiquetas contenedoras de los elementos de la lista, dentro de las cuales tendremos que utilizar la etiqueta <li></li> para ir a\u00f1adiendo cada uno de los elementos de la misma. Por ejemplo, para crear una lista ordenada con dos elementos: 1 2 3 4 < ol > < li > Elemento 1 </ li > < li > Elemento 2 </ li > </ ol > Con lo que obtendr\u00edamos un resultado similar al siguiente: Elemento 1 Elemento 2 O por ejemplo, para crear una lista con puntos o vi\u00f1etas de tres elementos usar\u00edamos el siguiente c\u00f3digo: 1 2 3 4 5 < ul > < li > Elemento 1 </ li > < li > Elemento 2 </ li > < li > Elemento 3 </ li > </ ul > Con lo que obtendr\u00edamos un resultado similar al siguiente: Elemento 1 Elemento 2 Elemento 3 Dentro de las etiquetas <li> a su vez podemos usar otras etiquetas, como por ejemplo poner negritas, cursivas, encabezados, o cualquier otra cosa que se nos ocurra, por ejemplo: 1 2 3 4 < ul > < li >< em > Elemento 1 </ em > : El elemento 1 es el < u > principal </ u > de la lista. </ li > < li >< em > Elemento 2 </ em > : El elemento 2 es muy < strong > peligroso! </ strong ></ li > </ ul > Con este c\u00f3digo HTML obtendr\u00edamos un resultado similar al siguiente: Elemento 1 : El elemento 1 es el principal de la lista. Elemento 2 : El elemento 2 es muy peligroso! Dado que dentro de un elemento de la lista podemos poner cualquier otra etiqueta, tambi\u00e9n podremos poner otras listas. Esto nos permitir\u00e1 es hacer listas anidadas de la forma: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 < h1 > Men\u00fa </ h1 > < ol > < li > Primer plato < ul > < li > Ensalada </ li > < li > Gazpacho andaluz </ li > </ ul > </ li > < li > Segundo plato < ul > < li > Macarrones </ li > < li > Pollo al horno </ li > < li > Pescado </ li > </ ul > </ li > < li > Postre < ul > < li > Tarta </ li > < li > Yogur </ li > < li > Caf\u00e9 </ li > </ ul > </ li > </ ol > Con lo que obtendr\u00edamos una lista como la siguiente:","title":"Listas"},{"location":"capitulo_html_simbolos.html","text":"S\u00edmbolos HTML \u00b6 Los caracteres especiales como signo de puntuaci\u00f3n, letras con tilde o di\u00e9resis, o s\u00edmbolos del lenguaje; se deben convertir en entidades HTML para que se muestren correctamente en un navegador. La siguiente es una lista de caracteres espa\u00f1oles junto con algunos s\u00edmbolos especiales y su correspondiente entidad HTML: Caracter C\u00f3digo Caracter C\u00f3digo \u00e1 &aacute; \u00c1 &Aacute; \u00e9 &eacute; \u00c9 &Eacute; \u00ed &iacute; \u00cd &Iacute; \u00f3 &oacute; \u00d3 &Oacute; \u00fa &uacute; \u00da &Uacute; \u00fc &uuml; \u00dc &Uuml; \u00f1 &ntilde; \u00d1 &Ntilde; espacio en blanco &nbsp; \u20ac &euro; < (Menor que) &lt; > (Mayor que) &gt; & &amp; \u00ba (grados) &deg; Recordad que para escribir letras acentuadas u otros s\u00edmbolos y que el navegador los muestre correctamente s\u00edmplemente tenemos que a\u00f1adir la cabecera meta con la codificaci\u00f3n: 1 < meta charset = \"utf-8\" /> Sin embargo hay determinados caracteres que si queremos escribirlos nos veremos obligados a escribir el c\u00f3digo del s\u00edmbolo. Por ejemplo, HTML solamente muestra o renderiza un espacio en el navegador aunque nosotros escribamos muchos espacios. Si por alguna raz\u00f3n queremos dar varios espacios tendremos que escibir el s\u00edmbolo \" &nbsp; \". O si por ejemplo queremos poner los s\u00edmbolos de mayor ( > ) o menor ( < ) y no correr el riesgo de que se confunda con el inicio o cierre de una etiqueta HTML, tambi\u00e9n tendremos que escribir el c\u00f3digo correspondiente. Para obtener una lista mucho m\u00e1s completa de s\u00edmbolos podemos buscar en Google: \" HTML symbols \" o visitar la siguiente direcci\u00f3n http://www.ascii.cl/htmlcodes.htm.","title":"S\u00edmbolos HTML"},{"location":"capitulo_html_simbolos.html#simbolos-html","text":"Los caracteres especiales como signo de puntuaci\u00f3n, letras con tilde o di\u00e9resis, o s\u00edmbolos del lenguaje; se deben convertir en entidades HTML para que se muestren correctamente en un navegador. La siguiente es una lista de caracteres espa\u00f1oles junto con algunos s\u00edmbolos especiales y su correspondiente entidad HTML: Caracter C\u00f3digo Caracter C\u00f3digo \u00e1 &aacute; \u00c1 &Aacute; \u00e9 &eacute; \u00c9 &Eacute; \u00ed &iacute; \u00cd &Iacute; \u00f3 &oacute; \u00d3 &Oacute; \u00fa &uacute; \u00da &Uacute; \u00fc &uuml; \u00dc &Uuml; \u00f1 &ntilde; \u00d1 &Ntilde; espacio en blanco &nbsp; \u20ac &euro; < (Menor que) &lt; > (Mayor que) &gt; & &amp; \u00ba (grados) &deg; Recordad que para escribir letras acentuadas u otros s\u00edmbolos y que el navegador los muestre correctamente s\u00edmplemente tenemos que a\u00f1adir la cabecera meta con la codificaci\u00f3n: 1 < meta charset = \"utf-8\" /> Sin embargo hay determinados caracteres que si queremos escribirlos nos veremos obligados a escribir el c\u00f3digo del s\u00edmbolo. Por ejemplo, HTML solamente muestra o renderiza un espacio en el navegador aunque nosotros escribamos muchos espacios. Si por alguna raz\u00f3n queremos dar varios espacios tendremos que escibir el s\u00edmbolo \" &nbsp; \". O si por ejemplo queremos poner los s\u00edmbolos de mayor ( > ) o menor ( < ) y no correr el riesgo de que se confunda con el inicio o cierre de una etiqueta HTML, tambi\u00e9n tendremos que escribir el c\u00f3digo correspondiente. Para obtener una lista mucho m\u00e1s completa de s\u00edmbolos podemos buscar en Google: \" HTML symbols \" o visitar la siguiente direcci\u00f3n http://www.ascii.cl/htmlcodes.htm.","title":"S\u00edmbolos HTML"},{"location":"capitulo_html_tablas.html","text":"Tablas \u00b6 Las tablas se definen b\u00e1sicamente mediante tres etiquetas: <table></table> : define una tabla. <tr></tr> : fila de una tabla, debe de estar dentro de las etiquetas de una tabla. <td></td> : celda de una tabla, debe estar dentro de una fila. Ejemplo de una tabla: 1 2 3 4 5 6 7 8 9 10 < table > < tr > < td > Fila 1 izquierda </ td > < td > Fila 1 derecha </ td > </ tr > < tr > < td > Fila 2 izquierda </ td > < td > Fila 2 derecha </ td > </ tr > </ table > Con lo que obtendr\u00edamos un resultado similar al siguiente: Fila 1 izquierda Fila 1 derecha Fila 2 izquierda Fila 2 derecha Adem\u00e1s tambi\u00e9n podemos utilizar la etiqueta <th> en lugar de <td> para indicar una celda de \"cabecera\", de esta forma el contenido ser\u00e1 resaltado en negrita y en un tama\u00f1o ligeramente superior al normal. Por ejemplo, para crear una tabla con dos elementos de cabecera y dos celdas normales: 1 2 3 4 5 6 7 8 9 10 < table > < tr > < th > Cabecera 1 </ th > < th > Cabecera 2 </ th > </ tr > < tr > < td > Celda 1 </ td > < td > Celda 2 </ td > </ tr > </ table > En la etiqueta de apertura <table> podemos utilizar los siguientes atributos: border=\"num\" : Ancho del borde de la tabla en puntos. Si indicamos border=\"0\" tendremos una tabla cuyas divisiones no ser\u00e1n visibles, esta propiedad se suele utilizar para distribuir los elementos en una p\u00e1gina Web. cellspacing=\"num\" : Espacio en puntos que separa las celdas que est\u00e1n dentro de la tabla. cellpadding=\"num\" : Espacio en puntos que separa el borde de cada celda y el contenido de esta. width=\"num\" : Indica la anchura de la tabla en puntos o en porcentaje en funci\u00f3n del ancho de la ventana. Si no se indica este par\u00e1metro, el ancho depender\u00e1 de los contenidos de las celdas. height=\"num\" : Indica la altura de la tabla en puntos o en porcentaje en funci\u00f3n del alto de la ventana. Si no se indica este par\u00e1metro, la altura depender\u00e1 de los contenidos de las celdas. Este atributo tambi\u00e9n se puede utilizar en las etiquetas <tr> para indicar la altura de cada fila de forma individual. En las etiquetas de apertura de celda ( <td> o <th> ) podemos utilizar los siguientes atributos: align=\"pos\" : Indica como se debe alinear el contenido de la celda, a la izquierda (left), a la derecha (right), centrado (center) o justificado (justify). valign=\"pos\" : Indica la alineaci\u00f3n vertical del contenido de la celda, en la parte superior (top), en la inferior (bottom), o en el centro (middle). rowspan=\"num\" : Indica el n\u00famero de filas que ocupar\u00e1 la celda. Por defecto ocupa una sola fila. Este atributo se utiliza para crear celdas \"multifila\", es decir, una celda que por ejemplo ocupe 3 filas. Tendremos que tener en cuenta que esa celda no se deber\u00e1 de definir en las siguientes 2 filas (para esas filas se definir\u00e1 una celda menos). colspan=\"num\" : Indica el n\u00famero de columnas que ocupar\u00e1 la celda. Por defecto ocupa una sola columna. Este atributo se utiliza para crear celdas \"multicolumna\", es decir, una celda que por ejemplo ocupe 3 columnas. Tendremos que tener en cuenta que en esa fila tendremos que definir 2 celdas menos. width=\"num\" : Indica la anchura de la columna en puntos o en porcentaje en funci\u00f3n del ancho de la ventana. Si no se indica este par\u00e1metro, el ancho depender\u00e1 del tama\u00f1o de los contenidos.","title":"Tablas"},{"location":"capitulo_html_tablas.html#tablas","text":"Las tablas se definen b\u00e1sicamente mediante tres etiquetas: <table></table> : define una tabla. <tr></tr> : fila de una tabla, debe de estar dentro de las etiquetas de una tabla. <td></td> : celda de una tabla, debe estar dentro de una fila. Ejemplo de una tabla: 1 2 3 4 5 6 7 8 9 10 < table > < tr > < td > Fila 1 izquierda </ td > < td > Fila 1 derecha </ td > </ tr > < tr > < td > Fila 2 izquierda </ td > < td > Fila 2 derecha </ td > </ tr > </ table > Con lo que obtendr\u00edamos un resultado similar al siguiente: Fila 1 izquierda Fila 1 derecha Fila 2 izquierda Fila 2 derecha Adem\u00e1s tambi\u00e9n podemos utilizar la etiqueta <th> en lugar de <td> para indicar una celda de \"cabecera\", de esta forma el contenido ser\u00e1 resaltado en negrita y en un tama\u00f1o ligeramente superior al normal. Por ejemplo, para crear una tabla con dos elementos de cabecera y dos celdas normales: 1 2 3 4 5 6 7 8 9 10 < table > < tr > < th > Cabecera 1 </ th > < th > Cabecera 2 </ th > </ tr > < tr > < td > Celda 1 </ td > < td > Celda 2 </ td > </ tr > </ table > En la etiqueta de apertura <table> podemos utilizar los siguientes atributos: border=\"num\" : Ancho del borde de la tabla en puntos. Si indicamos border=\"0\" tendremos una tabla cuyas divisiones no ser\u00e1n visibles, esta propiedad se suele utilizar para distribuir los elementos en una p\u00e1gina Web. cellspacing=\"num\" : Espacio en puntos que separa las celdas que est\u00e1n dentro de la tabla. cellpadding=\"num\" : Espacio en puntos que separa el borde de cada celda y el contenido de esta. width=\"num\" : Indica la anchura de la tabla en puntos o en porcentaje en funci\u00f3n del ancho de la ventana. Si no se indica este par\u00e1metro, el ancho depender\u00e1 de los contenidos de las celdas. height=\"num\" : Indica la altura de la tabla en puntos o en porcentaje en funci\u00f3n del alto de la ventana. Si no se indica este par\u00e1metro, la altura depender\u00e1 de los contenidos de las celdas. Este atributo tambi\u00e9n se puede utilizar en las etiquetas <tr> para indicar la altura de cada fila de forma individual. En las etiquetas de apertura de celda ( <td> o <th> ) podemos utilizar los siguientes atributos: align=\"pos\" : Indica como se debe alinear el contenido de la celda, a la izquierda (left), a la derecha (right), centrado (center) o justificado (justify). valign=\"pos\" : Indica la alineaci\u00f3n vertical del contenido de la celda, en la parte superior (top), en la inferior (bottom), o en el centro (middle). rowspan=\"num\" : Indica el n\u00famero de filas que ocupar\u00e1 la celda. Por defecto ocupa una sola fila. Este atributo se utiliza para crear celdas \"multifila\", es decir, una celda que por ejemplo ocupe 3 filas. Tendremos que tener en cuenta que esa celda no se deber\u00e1 de definir en las siguientes 2 filas (para esas filas se definir\u00e1 una celda menos). colspan=\"num\" : Indica el n\u00famero de columnas que ocupar\u00e1 la celda. Por defecto ocupa una sola columna. Este atributo se utiliza para crear celdas \"multicolumna\", es decir, una celda que por ejemplo ocupe 3 columnas. Tendremos que tener en cuenta que en esa fila tendremos que definir 2 celdas menos. width=\"num\" : Indica la anchura de la columna en puntos o en porcentaje en funci\u00f3n del ancho de la ventana. Si no se indica este par\u00e1metro, el ancho depender\u00e1 del tama\u00f1o de los contenidos.","title":"Tablas"},{"location":"capitulo_javascript.html","text":"Introducci\u00f3n a JavaScript \u00b6 JavaScript (comunmente abreviado como \"js\") es un lenguaje de programaci\u00f3n que se utiliza principalmente para crear p\u00e1ginas web din\u00e1micas. Una p\u00e1gina web din\u00e1mica es aquella que incorpora efectos como texto que aparece y desaparece, animaciones, acciones que se activan al pulsar botones y ventanas con mensajes de aviso al usuario. Se utiliza principalmente en su forma del lado del cliente ( client-side ), aunque existe una forma de JavaScript del lado del servidor ( Server-side JavaScript o SSJS ). Su uso en aplicaciones externas a la web, por ejemplo en documentos PDF, aplicaciones de escritorio (mayoritariamente widgets) es tambi\u00e9n significativo. T\u00e9cnicamente, JavaScript es un lenguaje de programaci\u00f3n interpretado, por lo que no es necesario compilar los programas para ejecutarlos. En otras palabras, los programas escritos con JavaScript se pueden probar directamente en cualquier navegador sin necesidad de procesos intermedios. JavaScript no es Java, aunque el nombre incluye la palabra y su sintaxis tenga algo de influencia de dicho lenguaje (tambi\u00e9n de C). Sin embargo son lenguajes totalmente diferentes, dise\u00f1ados por personas diferentes, con objetivos diferentes. Conceptualmente Java es un lenguaje est\u00e1tico, el compilador comprueba los tipos de datos, y adem\u00e1s es un lenguaje interpretado. JavaScript es din\u00e1mico, existen los tipos, pero solo se resuelven en tiempo de ejecuci\u00f3n, y no es un lenguaje interpretado. JavaScript es en general un lenguaje sencillo aunque expresivo, que ha triunfado donde Java ha fallado, en el cliente, y tiene la ventaja de que no necesita instalaci\u00f3n, ya que est\u00e1 presente en todos los navegadores.","title":"Introducci\u00f3n"},{"location":"capitulo_javascript.html#introduccion-a-javascript","text":"JavaScript (comunmente abreviado como \"js\") es un lenguaje de programaci\u00f3n que se utiliza principalmente para crear p\u00e1ginas web din\u00e1micas. Una p\u00e1gina web din\u00e1mica es aquella que incorpora efectos como texto que aparece y desaparece, animaciones, acciones que se activan al pulsar botones y ventanas con mensajes de aviso al usuario. Se utiliza principalmente en su forma del lado del cliente ( client-side ), aunque existe una forma de JavaScript del lado del servidor ( Server-side JavaScript o SSJS ). Su uso en aplicaciones externas a la web, por ejemplo en documentos PDF, aplicaciones de escritorio (mayoritariamente widgets) es tambi\u00e9n significativo. T\u00e9cnicamente, JavaScript es un lenguaje de programaci\u00f3n interpretado, por lo que no es necesario compilar los programas para ejecutarlos. En otras palabras, los programas escritos con JavaScript se pueden probar directamente en cualquier navegador sin necesidad de procesos intermedios. JavaScript no es Java, aunque el nombre incluye la palabra y su sintaxis tenga algo de influencia de dicho lenguaje (tambi\u00e9n de C). Sin embargo son lenguajes totalmente diferentes, dise\u00f1ados por personas diferentes, con objetivos diferentes. Conceptualmente Java es un lenguaje est\u00e1tico, el compilador comprueba los tipos de datos, y adem\u00e1s es un lenguaje interpretado. JavaScript es din\u00e1mico, existen los tipos, pero solo se resuelven en tiempo de ejecuci\u00f3n, y no es un lenguaje interpretado. JavaScript es en general un lenguaje sencillo aunque expresivo, que ha triunfado donde Java ha fallado, en el cliente, y tiene la ventaja de que no necesita instalaci\u00f3n, ya que est\u00e1 presente en todos los navegadores.","title":"Introducci\u00f3n a JavaScript"},{"location":"capitulo_javascript_consideraciones.html","text":"Consideraciones sobre el lenguaje JavaScript \u00b6 Algunas consideraciones a tener en cuenta sobre el lenguaje JavaScript antes de empezar a ver su sintaxis son: No se tienen en cuenta los espacios en blanco y las nuevas l\u00edneas. Se distinguen las may\u00fasculas y min\u00fasculas. No se define el tipo de las variables: una misma variable puede almacenar diferentes tipos de datos durante la ejecuci\u00f3n del script. No es necesario terminar cada sentencia con el car\u00e1cter de punto y coma (;), pero s\u00ed que es muy recomendable. Se pueden incluir comentarios con \" // \" y con \" /* */ \". La lista de palabras reservadas que no se pueden utilizar libremente para definir variables o funciones son: break, case, catch, continue, default, delete, do, else, finally, for, function, if, in, instanceof, new, return, switch, this, throw, try, typeof, var, void, while, with .","title":"Consideraciones sobre el lenguaje"},{"location":"capitulo_javascript_consideraciones.html#consideraciones-sobre-el-lenguaje-javascript","text":"Algunas consideraciones a tener en cuenta sobre el lenguaje JavaScript antes de empezar a ver su sintaxis son: No se tienen en cuenta los espacios en blanco y las nuevas l\u00edneas. Se distinguen las may\u00fasculas y min\u00fasculas. No se define el tipo de las variables: una misma variable puede almacenar diferentes tipos de datos durante la ejecuci\u00f3n del script. No es necesario terminar cada sentencia con el car\u00e1cter de punto y coma (;), pero s\u00ed que es muy recomendable. Se pueden incluir comentarios con \" // \" y con \" /* */ \". La lista de palabras reservadas que no se pueden utilizar libremente para definir variables o funciones son: break, case, catch, continue, default, delete, do, else, finally, for, function, if, in, instanceof, new, return, switch, this, throw, try, typeof, var, void, while, with .","title":"Consideraciones sobre el lenguaje JavaScript"},{"location":"capitulo_javascript_control_de_flujo.html","text":"Estructuras de control de flujo \u00b6 Las estructuras de control permiten modificar el flujo de ejecuci\u00f3n de las instrucciones de un programa. Estructura if \u00b6 Se emplea para tomar decisiones en funci\u00f3n de una condici\u00f3n. Su definici\u00f3n formal es: 1 2 3 if ( condicion ) { ... } Si la condici\u00f3n se cumple (es decir, si su valor es true ) se ejecutan todas las instrucciones que se encuentran dentro de {...} . Si la condici\u00f3n no se cumple (es decir, si su valor es false ) no se ejecuta ninguna instrucci\u00f3n contenida en {...} y el programa contin\u00faa ejecutando el resto de instrucciones del script. La condici\u00f3n se evaluar\u00e1 de forma booleana y por lo tanto podemos utilizar cualquiera de los operadores que hemos visto para ello: !, &&, ||, >, <, ==, etc. Esta estructura permite a\u00f1adir una secci\u00f3n else que se ejecutar\u00e1 en caso de que no se cumpla la condici\u00f3n anterior e incluso concatenar varias sentencias if para realizar varias comprobaciones. A continuaci\u00f3n se incluyen algunos ejemplos: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 var nombre = \"\" ; if ( nombre == \"\" ) { alert ( \"A\u00fan no nos has dicho tu nombre\" ); } else { alert ( \"Hemos guardado tu nombre\" ); } // If ... else if anidado var valor = 3 ; if ( valor == 1 ) alert ( \"La variable vale 1\" ); else if ( valor == 2 ) alert ( \"La variable vale 2\" ); else if ( valor == 3 ) alert ( \"La variable vale 3\" ); else alert ( \"La variable tiene otro valor\" ); Estructura switch \u00b6 La estructura switch se utiliza para agilizar la toma de decisiones m\u00faltiples, trabaja de la misma manera que lo har\u00edan sucesivos if , if else anidados en el que seg\u00fan el valor de una variable entrar\u00eda en uno de los casos definidos o en el caso por defecto: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 switch ( variable ) { // La variable puede ser cualquier tipo de dato case \"ok\" : // si variable == \"ok\" break ; case 1 : // si variable == \"1\" break ; default : // Si no es igual a ninguno de los casos anteriores break ; } \u00b4\u00b4\u00b4 El ejemplo anterior ser\u00eda igual a hacer : ```javascript if( variable == \"ok\" ) { // si variable == \"ok\" } else if( variable == 1 ) { // si variable == \"1\" } else { // Si no es igual a ninguno de los casos anteriores } Estructura for \u00b6 Esta estructura permite realizar una serie de repeticiones (tambi\u00e9n llamado bucle) mientras se cumpla una condici\u00f3n: 1 2 3 for ( inicializacion ; condicion ; actualizacion ) { ... } Donde: * La \"inicializaci\u00f3n\" es la zona en la que se establece los valores iniciales de las variables que controlan la repetici\u00f3n. * La \"condici\u00f3n\" es el \u00fanico elemento que decide si continua o se detiene la repetici\u00f3n. * La \"actualizaci\u00f3n\" es el nuevo valor que se asigna despu\u00e9s de cada repetici\u00f3n a las variables que controlan la repetici\u00f3n. Ejemplo de uso con un array: 1 2 3 4 var dias = [ \"Lunes\" , \"Martes\" , \"Mi\u00e9rcoles\" , \"Jueves\" , \"Viernes\" , \"S\u00e1bado\" , \"Domingo\" ]; for ( var i = 0 ; i < 7 ; i ++ ) { alert ( dias [ i ]); } Estructura while \u00b6 Es similar a for , repetir\u00e1 el contenido del bucle mientras se cumpla la condici\u00f3n inicial: 1 2 3 while ( condicion ) { ... } Estructura do...while \u00b6 Esta estructura es similar al bucle tipo while pero evalua la condici\u00f3n al final del bucle, con lo que se asegura que al menos se ejecutar\u00e1 una iteraci\u00f3n: 1 2 3 do { ... } while ( condicion ); Estructura for...in \u00b6 Este tipo de bucle, derivado de la estructura tipo for , permite iterar entre los elementos de un array o de un objeto (no tratados en esta introducci\u00f3n) de una forma muy sencilla: 1 2 3 4 5 var dias = [ \"Lunes\" , \"Martes\" , \"Mi\u00e9rcoles\" , \"Jueves\" , \"Viernes\" , \"S\u00e1bado\" , \"Domingo\" ]; for ( i in dias ) { alert ( dias [ i ]); }","title":"Estructuras de control de flujo"},{"location":"capitulo_javascript_control_de_flujo.html#estructuras-de-control-de-flujo","text":"Las estructuras de control permiten modificar el flujo de ejecuci\u00f3n de las instrucciones de un programa.","title":"Estructuras de control de flujo"},{"location":"capitulo_javascript_control_de_flujo.html#estructura-if","text":"Se emplea para tomar decisiones en funci\u00f3n de una condici\u00f3n. Su definici\u00f3n formal es: 1 2 3 if ( condicion ) { ... } Si la condici\u00f3n se cumple (es decir, si su valor es true ) se ejecutan todas las instrucciones que se encuentran dentro de {...} . Si la condici\u00f3n no se cumple (es decir, si su valor es false ) no se ejecuta ninguna instrucci\u00f3n contenida en {...} y el programa contin\u00faa ejecutando el resto de instrucciones del script. La condici\u00f3n se evaluar\u00e1 de forma booleana y por lo tanto podemos utilizar cualquiera de los operadores que hemos visto para ello: !, &&, ||, >, <, ==, etc. Esta estructura permite a\u00f1adir una secci\u00f3n else que se ejecutar\u00e1 en caso de que no se cumpla la condici\u00f3n anterior e incluso concatenar varias sentencias if para realizar varias comprobaciones. A continuaci\u00f3n se incluyen algunos ejemplos: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 var nombre = \"\" ; if ( nombre == \"\" ) { alert ( \"A\u00fan no nos has dicho tu nombre\" ); } else { alert ( \"Hemos guardado tu nombre\" ); } // If ... else if anidado var valor = 3 ; if ( valor == 1 ) alert ( \"La variable vale 1\" ); else if ( valor == 2 ) alert ( \"La variable vale 2\" ); else if ( valor == 3 ) alert ( \"La variable vale 3\" ); else alert ( \"La variable tiene otro valor\" );","title":"Estructura if"},{"location":"capitulo_javascript_control_de_flujo.html#estructura-switch","text":"La estructura switch se utiliza para agilizar la toma de decisiones m\u00faltiples, trabaja de la misma manera que lo har\u00edan sucesivos if , if else anidados en el que seg\u00fan el valor de una variable entrar\u00eda en uno de los casos definidos o en el caso por defecto: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 switch ( variable ) { // La variable puede ser cualquier tipo de dato case \"ok\" : // si variable == \"ok\" break ; case 1 : // si variable == \"1\" break ; default : // Si no es igual a ninguno de los casos anteriores break ; } \u00b4\u00b4\u00b4 El ejemplo anterior ser\u00eda igual a hacer : ```javascript if( variable == \"ok\" ) { // si variable == \"ok\" } else if( variable == 1 ) { // si variable == \"1\" } else { // Si no es igual a ninguno de los casos anteriores }","title":"Estructura switch"},{"location":"capitulo_javascript_control_de_flujo.html#estructura-for","text":"Esta estructura permite realizar una serie de repeticiones (tambi\u00e9n llamado bucle) mientras se cumpla una condici\u00f3n: 1 2 3 for ( inicializacion ; condicion ; actualizacion ) { ... } Donde: * La \"inicializaci\u00f3n\" es la zona en la que se establece los valores iniciales de las variables que controlan la repetici\u00f3n. * La \"condici\u00f3n\" es el \u00fanico elemento que decide si continua o se detiene la repetici\u00f3n. * La \"actualizaci\u00f3n\" es el nuevo valor que se asigna despu\u00e9s de cada repetici\u00f3n a las variables que controlan la repetici\u00f3n. Ejemplo de uso con un array: 1 2 3 4 var dias = [ \"Lunes\" , \"Martes\" , \"Mi\u00e9rcoles\" , \"Jueves\" , \"Viernes\" , \"S\u00e1bado\" , \"Domingo\" ]; for ( var i = 0 ; i < 7 ; i ++ ) { alert ( dias [ i ]); }","title":"Estructura for"},{"location":"capitulo_javascript_control_de_flujo.html#estructura-while","text":"Es similar a for , repetir\u00e1 el contenido del bucle mientras se cumpla la condici\u00f3n inicial: 1 2 3 while ( condicion ) { ... }","title":"Estructura while"},{"location":"capitulo_javascript_control_de_flujo.html#estructura-dowhile","text":"Esta estructura es similar al bucle tipo while pero evalua la condici\u00f3n al final del bucle, con lo que se asegura que al menos se ejecutar\u00e1 una iteraci\u00f3n: 1 2 3 do { ... } while ( condicion );","title":"Estructura do...while"},{"location":"capitulo_javascript_control_de_flujo.html#estructura-forin","text":"Este tipo de bucle, derivado de la estructura tipo for , permite iterar entre los elementos de un array o de un objeto (no tratados en esta introducci\u00f3n) de una forma muy sencilla: 1 2 3 4 5 var dias = [ \"Lunes\" , \"Martes\" , \"Mi\u00e9rcoles\" , \"Jueves\" , \"Viernes\" , \"S\u00e1bado\" , \"Domingo\" ]; for ( i in dias ) { alert ( dias [ i ]); }","title":"Estructura for...in"},{"location":"capitulo_javascript_deteccion_de_errores.html","text":"Detecci\u00f3n de errores con Firefox y Chrome \u00b6 Firefox y Chrome proporcionan herramientas para ayuda al desarrollador que est\u00e1n incluidas por defecto y que son de gran utilidad a la hora de depurar y detectar errores en una web en desarrollo. Para abrir estas utilidades se puede pulsar sobre la opci\u00f3n correspondiente del men\u00fa (en la secci\u00f3n \"Herramientas\") o directamente pulsando la tecla de funci\u00f3n F12. La consola de errores permite diferenciar los mensajes de informaci\u00f3n, los mensajes de aviso y los mensajes de error. Adem\u00e1s, permite visualizar todos los errores de la p\u00e1gina simult\u00e1neamente. Por cada error detectado se indica la posible soluci\u00f3n mediante un mensaje en ingl\u00e9s y se muestra el trozo de c\u00f3digo del script donde se ha producido el error. Adem\u00e1s, pulsando sobre el enlace incluido se accede a la l\u00ednea concreta del archivo concreto donde se ha producido el error. Firefox permite instalar peque\u00f1as mejoras y ampliaciones en el navegador, que se conocen con el nombre de extensiones. Una de las extensiones m\u00e1s interesantes para los desarrolladores de aplicaciones web es Firebug, que se puede descargar gratuitamente desde http://www.getfirebug.com/","title":"Detecci\u00f3n de errores"},{"location":"capitulo_javascript_deteccion_de_errores.html#deteccion-de-errores-con-firefox-y-chrome","text":"Firefox y Chrome proporcionan herramientas para ayuda al desarrollador que est\u00e1n incluidas por defecto y que son de gran utilidad a la hora de depurar y detectar errores en una web en desarrollo. Para abrir estas utilidades se puede pulsar sobre la opci\u00f3n correspondiente del men\u00fa (en la secci\u00f3n \"Herramientas\") o directamente pulsando la tecla de funci\u00f3n F12. La consola de errores permite diferenciar los mensajes de informaci\u00f3n, los mensajes de aviso y los mensajes de error. Adem\u00e1s, permite visualizar todos los errores de la p\u00e1gina simult\u00e1neamente. Por cada error detectado se indica la posible soluci\u00f3n mediante un mensaje en ingl\u00e9s y se muestra el trozo de c\u00f3digo del script donde se ha producido el error. Adem\u00e1s, pulsando sobre el enlace incluido se accede a la l\u00ednea concreta del archivo concreto donde se ha producido el error. Firefox permite instalar peque\u00f1as mejoras y ampliaciones en el navegador, que se conocen con el nombre de extensiones. Una de las extensiones m\u00e1s interesantes para los desarrolladores de aplicaciones web es Firebug, que se puede descargar gratuitamente desde http://www.getfirebug.com/","title":"Detecci\u00f3n de errores con Firefox y Chrome"},{"location":"capitulo_javascript_dom.html","text":"DOM \u00b6 El Document Object Model o DOM ('Modelo de Objetos del Documento' o 'Modelo en Objetos para la Representaci\u00f3n de Documentos') es esencialmente una interfaz que proporciona un conjunto est\u00e1ndar de objetos para representar documentos HTML y XML, aportando una interfaz est\u00e1ndar para acceder a ellos y manipularlos. A trav\u00e9s del DOM se pueden acceder y modificar el contenido, estructura y estilo de los documentos HTML y XML, y es para lo que se dise\u00f1\u00f3 principalmente. DOM transforma todos los documentos XHTML en un conjunto de elementos llamados nodos, que est\u00e1n interconectados y que representan los contenidos de las p\u00e1ginas web y las relaciones entre ellos. Por su aspecto, la uni\u00f3n de todos los nodos se llama \"\u00e1rbol de nodos\". Por ejemplo, la siguiente p\u00e1gina HTML: 1 2 3 4 5 6 7 8 9 < html xmlns = \"http://www.w3.org/1999/xhtml\" > < head > < meta http-equiv = \"Content-Type\" content = \"text/html; charset=iso-8859-1\" /> < title > P\u00e1gina sencilla </ title > </ head > < body > < p > Esta p\u00e1gina es < strong > muy sencilla </ strong ></ p > </ body > </ html > Se transformar\u00eda en el siguiente \u00e1rbol de nodos: Una vez construido autom\u00e1ticamente el \u00e1rbol completo de nodos DOM, ya es posible utilizar las funciones DOM para acceder de forma directa a cualquier nodo del \u00e1rbol. Como acceder a un nodo del \u00e1rbol es equivalente a acceder a \"un trozo\" de la p\u00e1gina, por lo que es posible manipular de forma sencilla la p\u00e1gina: acceder al valor de un elemento, establecer el valor de un elemento, mover un elemento de la p\u00e1gina, crear y a\u00f1adir nuevos elementos, etc. DOM proporciona dos m\u00e9todos alternativos para acceder a un nodo espec\u00edfico: acceso a trav\u00e9s de sus nodos padre y acceso directo. Las funciones que proporciona DOM para acceder a un nodo a trav\u00e9s de sus nodos padre consisten en acceder al nodo ra\u00edz de la p\u00e1gina y despu\u00e9s a sus nodos hijos y a los nodos hijos de esos hijos y as\u00ed sucesivamente hasta el \u00faltimo nodo de la rama terminada por el nodo buscado. Sin embargo, cuando se quiere acceder a un nodo espec\u00edfico, es mucho m\u00e1s r\u00e1pido acceder directamente a ese nodo y no llegar a \u00e9l descendiendo a trav\u00e9s de todos sus nodos padre. Acceso a nodos del \u00e1rbol DOM \u00b6 getElementsByTagName() \u00b6 Obtiene todos los elementos de la p\u00e1gina HTML cuya etiqueta sea igual que el par\u00e1metro que se le pasa a la funci\u00f3n, por ejemplo: 1 var parrafos = document . getElementsByTagName ( \"p\" ); El valor que se indica delante del nombre de la funci\u00f3n (en este caso document , que ser\u00eda la ra\u00edz del \u00e1rbol DOM) es el nodo a partir del cual se realiza la b\u00fasqueda de los elementos. En este caso, como se quieren obtener todos los p\u00e1rrafos de la p\u00e1gina, se utiliza el valor document como punto de partida de la b\u00fasqueda. El valor que devuelve la funci\u00f3n es un array con todos los nodos que cumplen la condici\u00f3n de que su etiqueta coincide con el par\u00e1metro proporcionado. El valor devuelto es un array de nodos del DOM, no un array de cadenas de texto o un array de objetos normales. De este modo, se puede obtener el primer p\u00e1rrafo de la p\u00e1gina de la siguiente manera: 1 var primerParrafo = parrafos [ 0 ]; De la misma forma, se podr\u00edan recorrer todos los p\u00e1rrafos de la p\u00e1gina con el siguiente c\u00f3digo: 1 2 3 for ( var i = 0 ; i < parrafos . length ; i ++ ) { var parrafo = parrafos [ i ]; } La funci\u00f3n getElementsByTagName() se puede aplicar de forma recursiva sobre cada uno de los nodos devueltos por la funci\u00f3n. En el siguiente ejemplo, se obtienen todos los enlaces del primer p\u00e1rrafo de la p\u00e1gina: 1 2 3 var parrafos = document . getElementsByTagName ( \"p\" ); var primerParrafo = parrafos [ 0 ]; var enlaces = primerParrafo . getElementsByTagName ( \"a\" ); getElementsByName() \u00b6 Esta funci\u00f3n es similar a la anterior, pero en este caso se buscan los elementos cuyo atributo name sea igual al par\u00e1metro proporcionado. En el siguiente ejemplo, se obtiene directamente el \u00fanico p\u00e1rrafo con el nombre indicado: 1 2 3 4 var parrafoEspecial = document . getElementsByName ( \"especial\" ); < p name = \"prueba\" > ... < /p> < p name = \"especial\" > ... < /p> < p > ... < /p> Internet Explorer 6.0 no implementa de forma correcta esta funci\u00f3n, ya que s\u00f3lo la tiene en cuenta para los elementos de tipo <input> y <img> . Adem\u00e1s, tambi\u00e9n tiene en consideraci\u00f3n los elementos cuyo atributo id sea igual al par\u00e1metro de la funci\u00f3n. getElementById() \u00b6 Esta es la funci\u00f3n m\u00e1s utilizada cuando se desarrollan aplicaciones web din\u00e1micas ya que permite acceder directamente a un nodo y poder leer o modificar sus propiedades. La funci\u00f3n getElementById() devuelve el elemento HTML cuyo atributo id coincide con el par\u00e1metro indicado en la funci\u00f3n. Como el atributo id debe ser \u00fanico en toda la p\u00e1gina, la funci\u00f3n devuelve \u00fanicamente el nodo deseado. 1 2 3 4 var cabecera = document . getElementById ( \"cabecera\" ); < div id = \"cabecera\" > < a href = \"/\" id = \"logo\" > ... < /a> < /div> Internet Explorer 6.0 tambi\u00e9n interpreta incorrectamente esta funci\u00f3n, ya que devuelve tambi\u00e9n aquellos elementos cuyo atributo name coincida con el par\u00e1metro proporcionado a la funci\u00f3n. Creaci\u00f3n y eliminaci\u00f3n de nodos \u00b6 Con JavaScript tambi\u00e9n se pueden a\u00f1adir y eliminar elementos din\u00e1micamente del \u00e1rbol DOM. Para esto se utilizan las funciones createElement(etiqueta) , createTextNode(text) , appendChild(child) y removeChild(child) . Dado que su uso se queda fuera de los contenidos de este curso, si se desea obtener m\u00e1s informaci\u00f3n se puede consultar la web: http://www.w3schools.com/jsref/met_document_createelement.asp http://www.w3schools.com/jsref/met_document_createtextnode.asp http://www.w3schools.com/jsref/met_node_appendchild.asp http://www.w3schools.com/dom/met_element_removechild.asp Acceso a atributos de un nodo \u00b6 Una vez que se ha accedido a un nodo, el siguiente paso natural consiste en acceder y/o modificar sus atributos y propiedades. Mediante DOM, es posible acceder de forma sencilla a todos los atributos y todas las propiedades CSS de cualquier elemento de la p\u00e1gina. Los atributos de los elementos de la p\u00e1gina se transforman autom\u00e1ticamente en propiedades de los nodos. Para acceder a su valor, simplemente se indica el nombre del atributo detr\u00e1s del nombre del nodo. El siguiente ejemplo obtiene de forma directa la direcci\u00f3n a la que enlaza el enlace: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // HTML < a id = \"enlace\" href = \"http://www.ua.es\" > Universidad de Alicante < /a> < img id = \"imagen\" style = \"margin:0; border:0;\" src = \"logo.png\" /> < p id = \"parrafo\" style = \"font-weight: bold;\" class = \"destacado\" > Texto < /p> // JavaScript var enlace = document . getElementById ( \"enlace\" ); var imagen = document . getElementById ( \"imagen\" ); var parrafo = document . getElementById ( \"parrafo\" ); console . log ( enlace . id ); // muestra \"enlace\" console . log ( enlace . href ); // muestra \"http://www.ua.es\" console . log ( enlace . innerHTML ); // muestra \"Universidad de Alicante\" console . log ( imagen . id ); // muestra \"imagen\" console . log ( imagen . src ); // muestra \"logo.png\" console . log ( imagen . style . margin ); // muestra \"0px\" console . log ( imagen . style . border ); // muestra \"0px none\" console . log ( parrafo . id ); // muestra \"parrafo\" console . log ( parrafo . innerHTML ); // muestra \"Texto\" console . log ( parrafo . style . fontWeight ); // muestra \"bold\" console . log ( parrafo . className ); // muestra \"destacado\" Es importante destacar que si el nombre de una propiedad o estilo es compuesto, como \"font-weight\", que tiene un gui\u00f3n \"-\" en el medio, para acceder dicho gui\u00f3n se elimina y adem\u00e1s se escribe en may\u00fasculas la primera letra se la siguiente palabra, por ejemplo: font-weight se transforma en fontWeight line-height se transforma en lineHeight border-top-style se transforma en borderTopStyle list-style-image se transforma en listStyleImage Tambi\u00e9n es importante destacar que como la palabra class est\u00e1 reservada por JavaScript, no es posible utilizarla para acceder al atributo class del elemento XHTML. En su lugar, DOM utiliza el nombre className para acceder.","title":"DOM"},{"location":"capitulo_javascript_dom.html#dom","text":"El Document Object Model o DOM ('Modelo de Objetos del Documento' o 'Modelo en Objetos para la Representaci\u00f3n de Documentos') es esencialmente una interfaz que proporciona un conjunto est\u00e1ndar de objetos para representar documentos HTML y XML, aportando una interfaz est\u00e1ndar para acceder a ellos y manipularlos. A trav\u00e9s del DOM se pueden acceder y modificar el contenido, estructura y estilo de los documentos HTML y XML, y es para lo que se dise\u00f1\u00f3 principalmente. DOM transforma todos los documentos XHTML en un conjunto de elementos llamados nodos, que est\u00e1n interconectados y que representan los contenidos de las p\u00e1ginas web y las relaciones entre ellos. Por su aspecto, la uni\u00f3n de todos los nodos se llama \"\u00e1rbol de nodos\". Por ejemplo, la siguiente p\u00e1gina HTML: 1 2 3 4 5 6 7 8 9 < html xmlns = \"http://www.w3.org/1999/xhtml\" > < head > < meta http-equiv = \"Content-Type\" content = \"text/html; charset=iso-8859-1\" /> < title > P\u00e1gina sencilla </ title > </ head > < body > < p > Esta p\u00e1gina es < strong > muy sencilla </ strong ></ p > </ body > </ html > Se transformar\u00eda en el siguiente \u00e1rbol de nodos: Una vez construido autom\u00e1ticamente el \u00e1rbol completo de nodos DOM, ya es posible utilizar las funciones DOM para acceder de forma directa a cualquier nodo del \u00e1rbol. Como acceder a un nodo del \u00e1rbol es equivalente a acceder a \"un trozo\" de la p\u00e1gina, por lo que es posible manipular de forma sencilla la p\u00e1gina: acceder al valor de un elemento, establecer el valor de un elemento, mover un elemento de la p\u00e1gina, crear y a\u00f1adir nuevos elementos, etc. DOM proporciona dos m\u00e9todos alternativos para acceder a un nodo espec\u00edfico: acceso a trav\u00e9s de sus nodos padre y acceso directo. Las funciones que proporciona DOM para acceder a un nodo a trav\u00e9s de sus nodos padre consisten en acceder al nodo ra\u00edz de la p\u00e1gina y despu\u00e9s a sus nodos hijos y a los nodos hijos de esos hijos y as\u00ed sucesivamente hasta el \u00faltimo nodo de la rama terminada por el nodo buscado. Sin embargo, cuando se quiere acceder a un nodo espec\u00edfico, es mucho m\u00e1s r\u00e1pido acceder directamente a ese nodo y no llegar a \u00e9l descendiendo a trav\u00e9s de todos sus nodos padre.","title":"DOM"},{"location":"capitulo_javascript_dom.html#acceso-a-nodos-del-arbol-dom","text":"","title":"Acceso a nodos del \u00e1rbol DOM"},{"location":"capitulo_javascript_dom.html#getelementsbytagname","text":"Obtiene todos los elementos de la p\u00e1gina HTML cuya etiqueta sea igual que el par\u00e1metro que se le pasa a la funci\u00f3n, por ejemplo: 1 var parrafos = document . getElementsByTagName ( \"p\" ); El valor que se indica delante del nombre de la funci\u00f3n (en este caso document , que ser\u00eda la ra\u00edz del \u00e1rbol DOM) es el nodo a partir del cual se realiza la b\u00fasqueda de los elementos. En este caso, como se quieren obtener todos los p\u00e1rrafos de la p\u00e1gina, se utiliza el valor document como punto de partida de la b\u00fasqueda. El valor que devuelve la funci\u00f3n es un array con todos los nodos que cumplen la condici\u00f3n de que su etiqueta coincide con el par\u00e1metro proporcionado. El valor devuelto es un array de nodos del DOM, no un array de cadenas de texto o un array de objetos normales. De este modo, se puede obtener el primer p\u00e1rrafo de la p\u00e1gina de la siguiente manera: 1 var primerParrafo = parrafos [ 0 ]; De la misma forma, se podr\u00edan recorrer todos los p\u00e1rrafos de la p\u00e1gina con el siguiente c\u00f3digo: 1 2 3 for ( var i = 0 ; i < parrafos . length ; i ++ ) { var parrafo = parrafos [ i ]; } La funci\u00f3n getElementsByTagName() se puede aplicar de forma recursiva sobre cada uno de los nodos devueltos por la funci\u00f3n. En el siguiente ejemplo, se obtienen todos los enlaces del primer p\u00e1rrafo de la p\u00e1gina: 1 2 3 var parrafos = document . getElementsByTagName ( \"p\" ); var primerParrafo = parrafos [ 0 ]; var enlaces = primerParrafo . getElementsByTagName ( \"a\" );","title":"getElementsByTagName()"},{"location":"capitulo_javascript_dom.html#getelementsbyname","text":"Esta funci\u00f3n es similar a la anterior, pero en este caso se buscan los elementos cuyo atributo name sea igual al par\u00e1metro proporcionado. En el siguiente ejemplo, se obtiene directamente el \u00fanico p\u00e1rrafo con el nombre indicado: 1 2 3 4 var parrafoEspecial = document . getElementsByName ( \"especial\" ); < p name = \"prueba\" > ... < /p> < p name = \"especial\" > ... < /p> < p > ... < /p> Internet Explorer 6.0 no implementa de forma correcta esta funci\u00f3n, ya que s\u00f3lo la tiene en cuenta para los elementos de tipo <input> y <img> . Adem\u00e1s, tambi\u00e9n tiene en consideraci\u00f3n los elementos cuyo atributo id sea igual al par\u00e1metro de la funci\u00f3n.","title":"getElementsByName()"},{"location":"capitulo_javascript_dom.html#getelementbyid","text":"Esta es la funci\u00f3n m\u00e1s utilizada cuando se desarrollan aplicaciones web din\u00e1micas ya que permite acceder directamente a un nodo y poder leer o modificar sus propiedades. La funci\u00f3n getElementById() devuelve el elemento HTML cuyo atributo id coincide con el par\u00e1metro indicado en la funci\u00f3n. Como el atributo id debe ser \u00fanico en toda la p\u00e1gina, la funci\u00f3n devuelve \u00fanicamente el nodo deseado. 1 2 3 4 var cabecera = document . getElementById ( \"cabecera\" ); < div id = \"cabecera\" > < a href = \"/\" id = \"logo\" > ... < /a> < /div> Internet Explorer 6.0 tambi\u00e9n interpreta incorrectamente esta funci\u00f3n, ya que devuelve tambi\u00e9n aquellos elementos cuyo atributo name coincida con el par\u00e1metro proporcionado a la funci\u00f3n.","title":"getElementById()"},{"location":"capitulo_javascript_dom.html#creacion-y-eliminacion-de-nodos","text":"Con JavaScript tambi\u00e9n se pueden a\u00f1adir y eliminar elementos din\u00e1micamente del \u00e1rbol DOM. Para esto se utilizan las funciones createElement(etiqueta) , createTextNode(text) , appendChild(child) y removeChild(child) . Dado que su uso se queda fuera de los contenidos de este curso, si se desea obtener m\u00e1s informaci\u00f3n se puede consultar la web: http://www.w3schools.com/jsref/met_document_createelement.asp http://www.w3schools.com/jsref/met_document_createtextnode.asp http://www.w3schools.com/jsref/met_node_appendchild.asp http://www.w3schools.com/dom/met_element_removechild.asp","title":"Creaci\u00f3n y eliminaci\u00f3n de nodos"},{"location":"capitulo_javascript_dom.html#acceso-a-atributos-de-un-nodo","text":"Una vez que se ha accedido a un nodo, el siguiente paso natural consiste en acceder y/o modificar sus atributos y propiedades. Mediante DOM, es posible acceder de forma sencilla a todos los atributos y todas las propiedades CSS de cualquier elemento de la p\u00e1gina. Los atributos de los elementos de la p\u00e1gina se transforman autom\u00e1ticamente en propiedades de los nodos. Para acceder a su valor, simplemente se indica el nombre del atributo detr\u00e1s del nombre del nodo. El siguiente ejemplo obtiene de forma directa la direcci\u00f3n a la que enlaza el enlace: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // HTML < a id = \"enlace\" href = \"http://www.ua.es\" > Universidad de Alicante < /a> < img id = \"imagen\" style = \"margin:0; border:0;\" src = \"logo.png\" /> < p id = \"parrafo\" style = \"font-weight: bold;\" class = \"destacado\" > Texto < /p> // JavaScript var enlace = document . getElementById ( \"enlace\" ); var imagen = document . getElementById ( \"imagen\" ); var parrafo = document . getElementById ( \"parrafo\" ); console . log ( enlace . id ); // muestra \"enlace\" console . log ( enlace . href ); // muestra \"http://www.ua.es\" console . log ( enlace . innerHTML ); // muestra \"Universidad de Alicante\" console . log ( imagen . id ); // muestra \"imagen\" console . log ( imagen . src ); // muestra \"logo.png\" console . log ( imagen . style . margin ); // muestra \"0px\" console . log ( imagen . style . border ); // muestra \"0px none\" console . log ( parrafo . id ); // muestra \"parrafo\" console . log ( parrafo . innerHTML ); // muestra \"Texto\" console . log ( parrafo . style . fontWeight ); // muestra \"bold\" console . log ( parrafo . className ); // muestra \"destacado\" Es importante destacar que si el nombre de una propiedad o estilo es compuesto, como \"font-weight\", que tiene un gui\u00f3n \"-\" en el medio, para acceder dicho gui\u00f3n se elimina y adem\u00e1s se escribe en may\u00fasculas la primera letra se la siguiente palabra, por ejemplo: font-weight se transforma en fontWeight line-height se transforma en lineHeight border-top-style se transforma en borderTopStyle list-style-image se transforma en listStyleImage Tambi\u00e9n es importante destacar que como la palabra class est\u00e1 reservada por JavaScript, no es posible utilizarla para acceder al atributo class del elemento XHTML. En su lugar, DOM utiliza el nombre className para acceder.","title":"Acceso a atributos de un nodo"},{"location":"capitulo_javascript_etiqueta_noscript.html","text":"Etiqueta noscript \u00b6 Algunos navegadores no disponen de soporte completo de JavaScript, otros permiten bloquearlo parcialmente e incluso algunos usuarios bloquean completamente el uso de JavaScript porque creen que as\u00ed navegan de forma m\u00e1s segura. En estos casos, es habitual que si la p\u00e1gina web requiere JavaScript para su correcto funcionamiento, se incluya un mensaje de aviso al usuario indic\u00e1ndole que deber\u00eda activar JavaScript para disfrutar completamente de la p\u00e1gina. 1 2 3 4 5 6 < noscript > < p > Bienvenido a Mi Sitio </ p > < p > La p\u00e1gina que est\u00e1s viendo requiere para su funcionamiento el uso de JavaScript. Si lo has deshabilitado intencionadamente, por favor vuelve a activarlo. </ p > </ noscript >","title":"Etiqueta noscript"},{"location":"capitulo_javascript_etiqueta_noscript.html#etiqueta-noscript","text":"Algunos navegadores no disponen de soporte completo de JavaScript, otros permiten bloquearlo parcialmente e incluso algunos usuarios bloquean completamente el uso de JavaScript porque creen que as\u00ed navegan de forma m\u00e1s segura. En estos casos, es habitual que si la p\u00e1gina web requiere JavaScript para su correcto funcionamiento, se incluya un mensaje de aviso al usuario indic\u00e1ndole que deber\u00eda activar JavaScript para disfrutar completamente de la p\u00e1gina. 1 2 3 4 5 6 < noscript > < p > Bienvenido a Mi Sitio </ p > < p > La p\u00e1gina que est\u00e1s viendo requiere para su funcionamiento el uso de JavaScript. Si lo has deshabilitado intencionadamente, por favor vuelve a activarlo. </ p > </ noscript >","title":"Etiqueta noscript"},{"location":"capitulo_javascript_eventos.html","text":"Eventos \u00b6 Los eventos permiten ejecutar acciones cuando sucede un determinado evento o se realiza una determinada acci\u00f3n sobre un elemento HTML de nuestra p\u00e1gina Web. La forma de definirlos es similar a los atributos HTML ( evento=\"acci\u00f3n\" ), donde la acci\u00f3n har\u00e1 referencia a una funci\u00f3n o m\u00e9todo en lenguaje JavaScript: 1 < div onclick = \"CODIGO-JAVASCRIPT\" ></ div > Algunos de los eventos que podemos utilizar son: onload : se activa cuando el navegador termina de cargar todos los elementos de la p\u00e1gina. onunload : se activa al cerrar una p\u00e1gina. onclick : cuando se presiona el bot\u00f3n del rat\u00f3n sobre un elemento. ondblclick : se activa al hacer doble clic sobre un elemento. onmousedown : se activa al presionar el bot\u00f3n del rat\u00f3n (mientras que est\u00e1 presionado). onmouseup : cuando el bot\u00f3n del rat\u00f3n es liberado. onmouseover : se dispara cuando el cursor del rat\u00f3n pasa sobre un elemento. onmousemove : cuando se mueve el cursor del rat\u00f3n mientras est\u00e1 sobre un elemento. onmouseout : se activa cuando el cursor del rat\u00f3n sale fuera de un elemento (sobre el que estaba). onfocus : ocurre cuando un elemento recibe el enfoque (el cursor de escritura), ya sea con el puntero o con mediante la tecla tabulador. onblur : se dispara cuando un elemento pierde el enfoque (ya sea por hacer clic fuera o por presionar la tecla tabulador). onkeypress : ocurre cuando se presiona una tecla (dentro de un elemento, por ejemplo un campo de escritura). onkeydown : se dispara cuando una tecla es presionada (dentro de un elemento) onkeyup : cuando una tecla es soltada. onsubmit : se activa cuando un formulario es enviado. onreset : ocurre cuando un formulario es reseteado. onselect : cuando el usuario selecciona un texto en un campo de texto. onchange : ocurre cuando un control pierde el enfoque y su valor ha sido modificado desde que recibi\u00f3 el enfoque. Ejemplos de uso: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!-- Dos eventos en una misma etiqueta... --> < div onclick = \"alert('Has hecho click');\" onmouseover = \"alert('Acabas de pasar por encima');\" > Puedes pinchar sobre este elemento o simplemente pasar el rat\u00f3n por encima </ div > <!-- Comprobar que la p\u00e1gina se ha cargado... --> < body onload = \"alert('La p\u00e1gina se ha cargado completamente');\" > ... </ body > <!-- Tambie\u0144 se pueden llamar a funciones desde los eventos... --> < script type = \"text/javascript\" > function saveText () { // acciones JavaScript } </ script > < textarea id = \"myarea\" cols = \"80\" rows = \"15\" onkeyup = \"saveText()\" ></ textarea > Eventos y la variable this \u00b6 JavaScript define una variable especial llamada this que se crea autom\u00e1ticamente y que se emplea en algunas t\u00e9cnicas avanzadas de programaci\u00f3n. En los eventos, se puede utilizar la variable this para referirse al elemento que ha provocado el evento. Esta variable es muy \u00fatil para ejemplos como el siguiente: queremos que al pasar por encima de un <div> el color del borde cambie, y al salir del contenedor restablezca el color inicial. Si no usamos la variable this el c\u00f3digo ser\u00eda el siguiente: 1 2 3 4 5 < div id = \"contenidos\" style = \"width:150px; height:60px; border:thin solid silver\" onmouseover = \"document.getElementById('contenidos').style.borderColor='black';\" onmouseout = \"document.getElementById('contenidos').style.borderColor='silver';\" > Secci\u00f3n de contenidos... </ div > Sin embargo, usando la variable this quedar\u00eda mucho m\u00e1s claro: 1 2 3 4 5 < div id = \"contenidos\" style = \"width:150px; height:60px; border:thin solid silver\" onmouseover = \"this.style.borderColor='black';\" onmouseout = \"this.style.borderColor='silver';\" > Secci\u00f3n de contenidos... </ div > Si quisieramos llamar a una funci\u00f3n externa, tambi\u00e9n es posible usar la variable this para pasarle como par\u00e1metro el elemento sobre el cual se quiere actuar, por ejemplo: 1 2 3 4 5 6 7 8 9 10 < script > function setColor ( element , color ) { element . style . borderColor = color ; } </ script > < div id = \"contenidos\" style = \"width:150px; height:60px; border:thin solid silver\" onmouseover = \"setColor(this,'black');\" onmouseout = \"setColor(this,'silver');\" > Secci\u00f3n de contenidos... </ div >","title":"Eventos"},{"location":"capitulo_javascript_eventos.html#eventos","text":"Los eventos permiten ejecutar acciones cuando sucede un determinado evento o se realiza una determinada acci\u00f3n sobre un elemento HTML de nuestra p\u00e1gina Web. La forma de definirlos es similar a los atributos HTML ( evento=\"acci\u00f3n\" ), donde la acci\u00f3n har\u00e1 referencia a una funci\u00f3n o m\u00e9todo en lenguaje JavaScript: 1 < div onclick = \"CODIGO-JAVASCRIPT\" ></ div > Algunos de los eventos que podemos utilizar son: onload : se activa cuando el navegador termina de cargar todos los elementos de la p\u00e1gina. onunload : se activa al cerrar una p\u00e1gina. onclick : cuando se presiona el bot\u00f3n del rat\u00f3n sobre un elemento. ondblclick : se activa al hacer doble clic sobre un elemento. onmousedown : se activa al presionar el bot\u00f3n del rat\u00f3n (mientras que est\u00e1 presionado). onmouseup : cuando el bot\u00f3n del rat\u00f3n es liberado. onmouseover : se dispara cuando el cursor del rat\u00f3n pasa sobre un elemento. onmousemove : cuando se mueve el cursor del rat\u00f3n mientras est\u00e1 sobre un elemento. onmouseout : se activa cuando el cursor del rat\u00f3n sale fuera de un elemento (sobre el que estaba). onfocus : ocurre cuando un elemento recibe el enfoque (el cursor de escritura), ya sea con el puntero o con mediante la tecla tabulador. onblur : se dispara cuando un elemento pierde el enfoque (ya sea por hacer clic fuera o por presionar la tecla tabulador). onkeypress : ocurre cuando se presiona una tecla (dentro de un elemento, por ejemplo un campo de escritura). onkeydown : se dispara cuando una tecla es presionada (dentro de un elemento) onkeyup : cuando una tecla es soltada. onsubmit : se activa cuando un formulario es enviado. onreset : ocurre cuando un formulario es reseteado. onselect : cuando el usuario selecciona un texto en un campo de texto. onchange : ocurre cuando un control pierde el enfoque y su valor ha sido modificado desde que recibi\u00f3 el enfoque. Ejemplos de uso: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!-- Dos eventos en una misma etiqueta... --> < div onclick = \"alert('Has hecho click');\" onmouseover = \"alert('Acabas de pasar por encima');\" > Puedes pinchar sobre este elemento o simplemente pasar el rat\u00f3n por encima </ div > <!-- Comprobar que la p\u00e1gina se ha cargado... --> < body onload = \"alert('La p\u00e1gina se ha cargado completamente');\" > ... </ body > <!-- Tambie\u0144 se pueden llamar a funciones desde los eventos... --> < script type = \"text/javascript\" > function saveText () { // acciones JavaScript } </ script > < textarea id = \"myarea\" cols = \"80\" rows = \"15\" onkeyup = \"saveText()\" ></ textarea >","title":"Eventos"},{"location":"capitulo_javascript_eventos.html#eventos-y-la-variable-this","text":"JavaScript define una variable especial llamada this que se crea autom\u00e1ticamente y que se emplea en algunas t\u00e9cnicas avanzadas de programaci\u00f3n. En los eventos, se puede utilizar la variable this para referirse al elemento que ha provocado el evento. Esta variable es muy \u00fatil para ejemplos como el siguiente: queremos que al pasar por encima de un <div> el color del borde cambie, y al salir del contenedor restablezca el color inicial. Si no usamos la variable this el c\u00f3digo ser\u00eda el siguiente: 1 2 3 4 5 < div id = \"contenidos\" style = \"width:150px; height:60px; border:thin solid silver\" onmouseover = \"document.getElementById('contenidos').style.borderColor='black';\" onmouseout = \"document.getElementById('contenidos').style.borderColor='silver';\" > Secci\u00f3n de contenidos... </ div > Sin embargo, usando la variable this quedar\u00eda mucho m\u00e1s claro: 1 2 3 4 5 < div id = \"contenidos\" style = \"width:150px; height:60px; border:thin solid silver\" onmouseover = \"this.style.borderColor='black';\" onmouseout = \"this.style.borderColor='silver';\" > Secci\u00f3n de contenidos... </ div > Si quisieramos llamar a una funci\u00f3n externa, tambi\u00e9n es posible usar la variable this para pasarle como par\u00e1metro el elemento sobre el cual se quiere actuar, por ejemplo: 1 2 3 4 5 6 7 8 9 10 < script > function setColor ( element , color ) { element . style . borderColor = color ; } </ script > < div id = \"contenidos\" style = \"width:150px; height:60px; border:thin solid silver\" onmouseover = \"setColor(this,'black');\" onmouseout = \"setColor(this,'silver');\" > Secci\u00f3n de contenidos... </ div >","title":"Eventos y la variable this"},{"location":"capitulo_javascript_funciones.html","text":"Funciones \u00b6 Una funci\u00f3n es un conjunto de instrucciones que se agrupan para realizar una tarea concreta y que se pueden reutilizar f\u00e1cilmente. Las funciones en JavaScript se definen mediante la palabra reservada function , seguida del nombre de la funci\u00f3n. Su definici\u00f3n formal es la siguiente: 1 2 3 function nombre_funcion () { ... } El nombre de la funci\u00f3n se utiliza para llamar a esa funci\u00f3n cuando sea necesario. A continuaci\u00f3n se incluye un ejemplo de funci\u00f3n y su llamada: 1 2 3 4 5 6 7 8 9 < script > function calculaSuma () { var valor1 = 3 ; var valor2 = 7 ; var resultado = valor1 + valor2 ; alert ( \"El resultado es \" + resultado ); } calculaSuma (); // llamada a la funci\u00f3n \"calculaSuma\" < /script> Igual que en otros lenguajes, a las funciones se le pueden pasar valores o argumentos de entrada y pueden devolver un valor como resultado: 1 2 3 4 5 6 function calculaSuma ( valor1 , valor2 ) { var resultado = valor1 + valor2 ; return resultado ; } var resultado = calculaSuma ( 10 , 4 ); // llamada a la funci\u00f3n \"calculaSuma\" alert ( resultado ); Es importante saber que: * Se puede utilizar un n\u00famero ilimitado de argumentos. * El n\u00famero de argumentos que se pasa a una funci\u00f3n deber\u00eda ser el mismo que el n\u00famero de argumentos que ha indicado la funci\u00f3n. No obstante, JavaScript no muestra ning\u00fan error si se pasan m\u00e1s o menos argumentos de los necesarios. En caso de que un argumento no est\u00e9 definido tendr\u00e1 el valor \"undefined\". \u00c1mbito de las variables \u00b6 Con respecto al \u00e1mbito de las variables tenemos que tener en cuenta las siguientes consideraciones: Si una variable se define con var dentro de una funci\u00f3n el \u00e1mbito de dicha variable ser\u00e1 local. Si una variable se define fuera de una funci\u00f3n su \u00e1mbito ser\u00e1 global, y por lo tanto ser\u00e1n accesibles desde dentro de las funciones. Si una variable se define dentro de una funci\u00f3n pero sin usar la palabra reservada var el \u00e1mbito de dicha variable ser\u00e1 global. Ejemplos: 1 2 3 4 5 6 7 8 9 10 var global1 = \"Variable Global 1\" ; function mostrarMensaje () { var local1 = \"Variable local 1\" ; global2 = \"Variable Global 2\" ; console . log ( global1 ); // mostrar\u00e1 \"Variable Global 1\" } mostrarMensaje (); console . log ( local1 ); // error, no existe la variable \"local1\" console . log ( global2 ); // mostrar\u00e1 \"Variable Global 2\"","title":"Funciones"},{"location":"capitulo_javascript_funciones.html#funciones","text":"Una funci\u00f3n es un conjunto de instrucciones que se agrupan para realizar una tarea concreta y que se pueden reutilizar f\u00e1cilmente. Las funciones en JavaScript se definen mediante la palabra reservada function , seguida del nombre de la funci\u00f3n. Su definici\u00f3n formal es la siguiente: 1 2 3 function nombre_funcion () { ... } El nombre de la funci\u00f3n se utiliza para llamar a esa funci\u00f3n cuando sea necesario. A continuaci\u00f3n se incluye un ejemplo de funci\u00f3n y su llamada: 1 2 3 4 5 6 7 8 9 < script > function calculaSuma () { var valor1 = 3 ; var valor2 = 7 ; var resultado = valor1 + valor2 ; alert ( \"El resultado es \" + resultado ); } calculaSuma (); // llamada a la funci\u00f3n \"calculaSuma\" < /script> Igual que en otros lenguajes, a las funciones se le pueden pasar valores o argumentos de entrada y pueden devolver un valor como resultado: 1 2 3 4 5 6 function calculaSuma ( valor1 , valor2 ) { var resultado = valor1 + valor2 ; return resultado ; } var resultado = calculaSuma ( 10 , 4 ); // llamada a la funci\u00f3n \"calculaSuma\" alert ( resultado ); Es importante saber que: * Se puede utilizar un n\u00famero ilimitado de argumentos. * El n\u00famero de argumentos que se pasa a una funci\u00f3n deber\u00eda ser el mismo que el n\u00famero de argumentos que ha indicado la funci\u00f3n. No obstante, JavaScript no muestra ning\u00fan error si se pasan m\u00e1s o menos argumentos de los necesarios. En caso de que un argumento no est\u00e9 definido tendr\u00e1 el valor \"undefined\".","title":"Funciones"},{"location":"capitulo_javascript_funciones.html#ambito-de-las-variables","text":"Con respecto al \u00e1mbito de las variables tenemos que tener en cuenta las siguientes consideraciones: Si una variable se define con var dentro de una funci\u00f3n el \u00e1mbito de dicha variable ser\u00e1 local. Si una variable se define fuera de una funci\u00f3n su \u00e1mbito ser\u00e1 global, y por lo tanto ser\u00e1n accesibles desde dentro de las funciones. Si una variable se define dentro de una funci\u00f3n pero sin usar la palabra reservada var el \u00e1mbito de dicha variable ser\u00e1 global. Ejemplos: 1 2 3 4 5 6 7 8 9 10 var global1 = \"Variable Global 1\" ; function mostrarMensaje () { var local1 = \"Variable local 1\" ; global2 = \"Variable Global 2\" ; console . log ( global1 ); // mostrar\u00e1 \"Variable Global 1\" } mostrarMensaje (); console . log ( local1 ); // error, no existe la variable \"local1\" console . log ( global2 ); // mostrar\u00e1 \"Variable Global 2\"","title":"\u00c1mbito de las variables"},{"location":"capitulo_javascript_funciones_utiles.html","text":"Funciones \u00fatiles de JavaScript \u00b6 JavaScript incorpora una serie de herramientas y utilidades para el manejo de las variables. Funciones \u00fatiles para mostrar resultados \u00b6 La funci\u00f3n \" alert(texto); \" nos permite mostrar un valor o cadena en una ventana emergente. La funci\u00f3n \" console.log(texto); \" nos permite mostrar un valor o cadena en la consola del sistema. Esta funci\u00f3n se suele utilizar para depuraci\u00f3n. Funciones \u00fatiles para cadenas de texto \u00b6 Longitud de una cadena: se obtiene a partir de su propiedad \" .length \" Concatenaci\u00f3n de cadenas: operador \" + \" Convertir en may\u00fasculas: toUpperCase() Convertir en min\u00fasculas: toLowerCase() Obtener un car\u00e1cter de la cadena: charAt(posicion) Ejemplos: 1 2 3 4 5 var mensaje = \"Hola Mundo\" ; var numeroLetras = mensaje . length ; // numeroLetras = 10 var concatenacion = \"\u00a1\" + mensaje + \"!\" ; var mayusculas = mensaje . toUpperCase (); var letra = mensaje . charAt ( 0 ); // letra = H Funciones \u00fatiles para arrays \u00b6 Longitud del array: se obtiene a partir de su propiedad \" .length \" A\u00f1adir un elemento al final del array: \" push(valor) \" Ejemplos: 1 2 3 var array = [ 1 , 2 , 3 ]; var numeroElementos = array . length ; // numeroElementos = 3 array . push ( 4 ); // contenido del array = [1, 2, 3, 4] Funciones \u00fatiles para n\u00fameros \u00b6 Comprobar posibles valores num\u00e9ricos no definidos: \" isNaN(valor) \" Comprobar si el valor es finito: \" isFinite(valor) \" Formatear / redondear n\u00fameros decimales: \" .toFixed(digitos) \" Ejemplos: 1 2 3 4 5 6 7 var valor1 = 3.14159265358979323846 ; var valor2 = 0 ; if ( isNaN ( valor1 / valor2 ) || ! isFinite ( result ) ) alert ( \"La divisi\u00f3n no est\u00e1 definida para los n\u00fameros indicados\" ); var valor3 = valor1 . toFixed ( 2 ); // 3.14","title":"Funciones \u00fatiles"},{"location":"capitulo_javascript_funciones_utiles.html#funciones-utiles-de-javascript","text":"JavaScript incorpora una serie de herramientas y utilidades para el manejo de las variables.","title":"Funciones \u00fatiles de JavaScript"},{"location":"capitulo_javascript_funciones_utiles.html#funciones-utiles-para-mostrar-resultados","text":"La funci\u00f3n \" alert(texto); \" nos permite mostrar un valor o cadena en una ventana emergente. La funci\u00f3n \" console.log(texto); \" nos permite mostrar un valor o cadena en la consola del sistema. Esta funci\u00f3n se suele utilizar para depuraci\u00f3n.","title":"Funciones \u00fatiles para mostrar resultados"},{"location":"capitulo_javascript_funciones_utiles.html#funciones-utiles-para-cadenas-de-texto","text":"Longitud de una cadena: se obtiene a partir de su propiedad \" .length \" Concatenaci\u00f3n de cadenas: operador \" + \" Convertir en may\u00fasculas: toUpperCase() Convertir en min\u00fasculas: toLowerCase() Obtener un car\u00e1cter de la cadena: charAt(posicion) Ejemplos: 1 2 3 4 5 var mensaje = \"Hola Mundo\" ; var numeroLetras = mensaje . length ; // numeroLetras = 10 var concatenacion = \"\u00a1\" + mensaje + \"!\" ; var mayusculas = mensaje . toUpperCase (); var letra = mensaje . charAt ( 0 ); // letra = H","title":"Funciones \u00fatiles para cadenas de texto"},{"location":"capitulo_javascript_funciones_utiles.html#funciones-utiles-para-arrays","text":"Longitud del array: se obtiene a partir de su propiedad \" .length \" A\u00f1adir un elemento al final del array: \" push(valor) \" Ejemplos: 1 2 3 var array = [ 1 , 2 , 3 ]; var numeroElementos = array . length ; // numeroElementos = 3 array . push ( 4 ); // contenido del array = [1, 2, 3, 4]","title":"Funciones \u00fatiles para arrays"},{"location":"capitulo_javascript_funciones_utiles.html#funciones-utiles-para-numeros","text":"Comprobar posibles valores num\u00e9ricos no definidos: \" isNaN(valor) \" Comprobar si el valor es finito: \" isFinite(valor) \" Formatear / redondear n\u00fameros decimales: \" .toFixed(digitos) \" Ejemplos: 1 2 3 4 5 6 7 var valor1 = 3.14159265358979323846 ; var valor2 = 0 ; if ( isNaN ( valor1 / valor2 ) || ! isFinite ( result ) ) alert ( \"La divisi\u00f3n no est\u00e1 definida para los n\u00fameros indicados\" ); var valor3 = valor1 . toFixed ( 2 ); // 3.14","title":"Funciones \u00fatiles para n\u00fameros"},{"location":"capitulo_javascript_inclusion_en_html.html","text":"Como incluir JavaScript en nuestra p\u00e1gina Web \u00b6 La integraci\u00f3n de JavaScript y XHTML es muy flexible, ya que existen al menos tres formas para incluir c\u00f3digo JavaScript en las p\u00e1ginas web. Incluir desde un archivo externo \u00b6 Las instrucciones JavaScript se pueden incluir en un archivo externo de tipo JavaScript que los documentos XHTML enlazan mediante la etiqueta <script> . 1 < script type = \"text/javascript\" src = \"/js/codigo.js\" ></ script > Se pueden crear todos los archivos JavaScript que sean necesarios y cada documento XHTML puede enlazar tantos archivos JavaScript como necesite. La principal ventaja de enlazar un archivo JavaScript externo es que se simplifica el c\u00f3digo de la p\u00e1gina, que se puede reutilizar el mismo c\u00f3digo JavaScript en todas las p\u00e1ginas del sitio web y que cualquier modificaci\u00f3n realizada en el archivo JavaScript se ve reflejada inmediatamente en todas las p\u00e1ginas que lo enlazan. Incluir en el mismo documento HTML \u00b6 El c\u00f3digo JavaScript se encierra entre etiquetas <script> y se incluye en cualquier parte del documento: 1 2 3 < script type = \"text/javascript\" > alert ( \"Hola mundo!\" ); </ script > Aunque es correcto incluir cualquier bloque de c\u00f3digo en cualquier zona de la p\u00e1gina, se recomienda definir el c\u00f3digo JavaScript dentro de la cabecera del documento (secci\u00f3n <head> ) o al final de la p\u00e1gina (antes de la etiqueta de cierre </body> . Con esta segunda opci\u00f3n se consigue mejorar el tiempo de carga de la p\u00e1gina, ya que primero se mostrar\u00e1 todo el contenido de la web y por \u00faltimo se cargar\u00e1n los javascript. Incluir en los elementos HTML \u00b6 Consiste en incluir trozos de JavaScript dentro del c\u00f3digo HTML de la p\u00e1gina, por ejemplo: 1 < p onclick = \"alert('Un mensaje de prueba')\" > Un p\u00e1rrafo de texto. </ p > El principal inconveniente de este m\u00e9todo es que ensucia innecesariamente el c\u00f3digo HTML de la p\u00e1gina y complica el mantenimiento del c\u00f3digo JavaScript.","title":"Inclusi\u00f3n de JavaScript en HTML"},{"location":"capitulo_javascript_inclusion_en_html.html#como-incluir-javascript-en-nuestra-pagina-web","text":"La integraci\u00f3n de JavaScript y XHTML es muy flexible, ya que existen al menos tres formas para incluir c\u00f3digo JavaScript en las p\u00e1ginas web.","title":"Como incluir JavaScript en nuestra p\u00e1gina Web"},{"location":"capitulo_javascript_inclusion_en_html.html#incluir-desde-un-archivo-externo","text":"Las instrucciones JavaScript se pueden incluir en un archivo externo de tipo JavaScript que los documentos XHTML enlazan mediante la etiqueta <script> . 1 < script type = \"text/javascript\" src = \"/js/codigo.js\" ></ script > Se pueden crear todos los archivos JavaScript que sean necesarios y cada documento XHTML puede enlazar tantos archivos JavaScript como necesite. La principal ventaja de enlazar un archivo JavaScript externo es que se simplifica el c\u00f3digo de la p\u00e1gina, que se puede reutilizar el mismo c\u00f3digo JavaScript en todas las p\u00e1ginas del sitio web y que cualquier modificaci\u00f3n realizada en el archivo JavaScript se ve reflejada inmediatamente en todas las p\u00e1ginas que lo enlazan.","title":"Incluir desde un archivo externo"},{"location":"capitulo_javascript_inclusion_en_html.html#incluir-en-el-mismo-documento-html","text":"El c\u00f3digo JavaScript se encierra entre etiquetas <script> y se incluye en cualquier parte del documento: 1 2 3 < script type = \"text/javascript\" > alert ( \"Hola mundo!\" ); </ script > Aunque es correcto incluir cualquier bloque de c\u00f3digo en cualquier zona de la p\u00e1gina, se recomienda definir el c\u00f3digo JavaScript dentro de la cabecera del documento (secci\u00f3n <head> ) o al final de la p\u00e1gina (antes de la etiqueta de cierre </body> . Con esta segunda opci\u00f3n se consigue mejorar el tiempo de carga de la p\u00e1gina, ya que primero se mostrar\u00e1 todo el contenido de la web y por \u00faltimo se cargar\u00e1n los javascript.","title":"Incluir en el mismo documento HTML"},{"location":"capitulo_javascript_inclusion_en_html.html#incluir-en-los-elementos-html","text":"Consiste en incluir trozos de JavaScript dentro del c\u00f3digo HTML de la p\u00e1gina, por ejemplo: 1 < p onclick = \"alert('Un mensaje de prueba')\" > Un p\u00e1rrafo de texto. </ p > El principal inconveniente de este m\u00e9todo es que ensucia innecesariamente el c\u00f3digo HTML de la p\u00e1gina y complica el mantenimiento del c\u00f3digo JavaScript.","title":"Incluir en los elementos HTML"},{"location":"capitulo_javascript_operadores.html","text":"Operadores \u00b6 Los operadores permiten manipular el valor de las variables, realizar operaciones matem\u00e1ticas con sus valores y comparar diferentes variables. De esta forma, los operadores permiten a los programas realizar c\u00e1lculos complejos y tomar decisiones l\u00f3gicas en funci\u00f3n de comparaciones y otros tipos de condiciones. Asignaci\u00f3n \u00b6 Este operador se utiliza para guardar un valor espec\u00edfico en una variable. 1 2 3 var numero1 = 3 ; var numero2 = 4 ; var numero3 = numero1 + numero2 ; Incremento y decremento \u00b6 Estos dos operadores solamente son v\u00e1lidos para las variables num\u00e9ricas y se utilizan para incrementar (++) o decrementar (--) en una unidad el valor de una variable. 1 2 3 4 5 var numero = 5 ; ++ numero ; // Pre-incremento numero ++ ; // Post-incremento -- numero ; // Pre-decremento numero -- ; // Post-decremento Si el operador se utiliza como prefijo el decremento o incremento se realiza antes de la operaci\u00f3n, si por el contrario se utiliza como sufijo se realizar\u00e1 despu\u00e9s, por ejemplo: 1 2 3 4 5 6 7 var numero1 = 5 ; var resultado = 2 + numero1 ++ ; // resultado = 7 var numero1 = 5 ; var resultado = 2 + ++ numero1 ; // resultado = 8 Operadores l\u00f3gicos \u00b6 El resultado de cualquier operaci\u00f3n que utilice operadores l\u00f3gicos siempre es un valor l\u00f3gico o booleano. Negaci\u00f3n : Se utiliza para obtener el valor contrario al valor de la variable: var negacion = !valor_booleano; And : El operador se indica mediante el s\u00edmbolo && y su resultado solamente es true si los dos operandos son true : var resultado = valor1 && valor2; Or : El operador se indica mediante el s\u00edmbolo || y su resultado es true si alguno de los dos operandos es true : var resultado = valor1 || valor2; Operadores matem\u00e1ticos \u00b6 Los operadores definidos son: suma ( + ), resta ( - ), multiplicaci\u00f3n ( * ), divisi\u00f3n ( / ) y m\u00f3dulo ( % ). A continuaci\u00f3n se incluyen algunos ejemplos: 1 2 3 4 5 6 7 var numero1 = 10 ; var numero2 = 5 ; var resultado = numero1 / numero2 ; // resultado 2 resultado = 3 + numero1 ; // resultado 13 resultado = numero2 \u2013 4 ; // resultado 1 resultado = numero1 * numero2 ; // resultado 10 resultado = numero1 % numero2 ; // resultado 0 Los operadores matem\u00e1ticos tambi\u00e9n se pueden combinar con el operador de asignaci\u00f3n para abreviar su notaci\u00f3n: 1 2 3 4 5 6 var numero1 = 5 ; numero1 += 3 ; // numero1 = numero1 + 3 = 8 numero1 -= 1 ; // numero1 = numero1 - 1 = 4 numero1 *= 2 ; // numero1 = numero1 * 2 = 10 numero1 /= 5 ; // numero1 = numero1 / 5 = 1 numero1 %= 4 ; // numero1 = numero1 % 4 = 1 Operadores relacionales o de comparaci\u00f3n \u00b6 Los operadores relacionales definidos por JavaScript son id\u00e9nticos a los que definen las matem\u00e1ticas: mayor que ( > ), menor que ( < ), mayor o igual ( >= ), menor o igual ( <= ), igual que ( == ) y distinto de ( != ). El resultado de todos estos operadores siempre es un valor booleano: 1 2 3 4 5 6 7 8 9 10 11 var numero1 = 3 ; var numero2 = 5 ; resultado = numero1 > numero2 ; // resultado = false resultado = numero1 < numero2 ; // resultado = true numero1 = 5 ; numero2 = 5 ; resultado = numero1 >= numero2 ; // resultado = true resultado = numero1 <= numero2 ; // resultado = true resultado = numero1 == numero2 ; // resultado = true resultado = numero1 != numero2 ; // resultado = false","title":"Operadores"},{"location":"capitulo_javascript_operadores.html#operadores","text":"Los operadores permiten manipular el valor de las variables, realizar operaciones matem\u00e1ticas con sus valores y comparar diferentes variables. De esta forma, los operadores permiten a los programas realizar c\u00e1lculos complejos y tomar decisiones l\u00f3gicas en funci\u00f3n de comparaciones y otros tipos de condiciones.","title":"Operadores"},{"location":"capitulo_javascript_operadores.html#asignacion","text":"Este operador se utiliza para guardar un valor espec\u00edfico en una variable. 1 2 3 var numero1 = 3 ; var numero2 = 4 ; var numero3 = numero1 + numero2 ;","title":"Asignaci\u00f3n"},{"location":"capitulo_javascript_operadores.html#incremento-y-decremento","text":"Estos dos operadores solamente son v\u00e1lidos para las variables num\u00e9ricas y se utilizan para incrementar (++) o decrementar (--) en una unidad el valor de una variable. 1 2 3 4 5 var numero = 5 ; ++ numero ; // Pre-incremento numero ++ ; // Post-incremento -- numero ; // Pre-decremento numero -- ; // Post-decremento Si el operador se utiliza como prefijo el decremento o incremento se realiza antes de la operaci\u00f3n, si por el contrario se utiliza como sufijo se realizar\u00e1 despu\u00e9s, por ejemplo: 1 2 3 4 5 6 7 var numero1 = 5 ; var resultado = 2 + numero1 ++ ; // resultado = 7 var numero1 = 5 ; var resultado = 2 + ++ numero1 ; // resultado = 8","title":"Incremento y decremento"},{"location":"capitulo_javascript_operadores.html#operadores-logicos","text":"El resultado de cualquier operaci\u00f3n que utilice operadores l\u00f3gicos siempre es un valor l\u00f3gico o booleano. Negaci\u00f3n : Se utiliza para obtener el valor contrario al valor de la variable: var negacion = !valor_booleano; And : El operador se indica mediante el s\u00edmbolo && y su resultado solamente es true si los dos operandos son true : var resultado = valor1 && valor2; Or : El operador se indica mediante el s\u00edmbolo || y su resultado es true si alguno de los dos operandos es true : var resultado = valor1 || valor2;","title":"Operadores l\u00f3gicos"},{"location":"capitulo_javascript_operadores.html#operadores-matematicos","text":"Los operadores definidos son: suma ( + ), resta ( - ), multiplicaci\u00f3n ( * ), divisi\u00f3n ( / ) y m\u00f3dulo ( % ). A continuaci\u00f3n se incluyen algunos ejemplos: 1 2 3 4 5 6 7 var numero1 = 10 ; var numero2 = 5 ; var resultado = numero1 / numero2 ; // resultado 2 resultado = 3 + numero1 ; // resultado 13 resultado = numero2 \u2013 4 ; // resultado 1 resultado = numero1 * numero2 ; // resultado 10 resultado = numero1 % numero2 ; // resultado 0 Los operadores matem\u00e1ticos tambi\u00e9n se pueden combinar con el operador de asignaci\u00f3n para abreviar su notaci\u00f3n: 1 2 3 4 5 6 var numero1 = 5 ; numero1 += 3 ; // numero1 = numero1 + 3 = 8 numero1 -= 1 ; // numero1 = numero1 - 1 = 4 numero1 *= 2 ; // numero1 = numero1 * 2 = 10 numero1 /= 5 ; // numero1 = numero1 / 5 = 1 numero1 %= 4 ; // numero1 = numero1 % 4 = 1","title":"Operadores matem\u00e1ticos"},{"location":"capitulo_javascript_operadores.html#operadores-relacionales-o-de-comparacion","text":"Los operadores relacionales definidos por JavaScript son id\u00e9nticos a los que definen las matem\u00e1ticas: mayor que ( > ), menor que ( < ), mayor o igual ( >= ), menor o igual ( <= ), igual que ( == ) y distinto de ( != ). El resultado de todos estos operadores siempre es un valor booleano: 1 2 3 4 5 6 7 8 9 10 11 var numero1 = 3 ; var numero2 = 5 ; resultado = numero1 > numero2 ; // resultado = false resultado = numero1 < numero2 ; // resultado = true numero1 = 5 ; numero2 = 5 ; resultado = numero1 >= numero2 ; // resultado = true resultado = numero1 <= numero2 ; // resultado = true resultado = numero1 == numero2 ; // resultado = true resultado = numero1 != numero2 ; // resultado = false","title":"Operadores relacionales o de comparaci\u00f3n"},{"location":"capitulo_javascript_variables.html","text":"Variables \u00b6 Las variables en JavaScript se crean mediante la palabra reservada var , que solamente es necesario utilizarla la primera vez (al declarar la variable), de la forma: 1 2 3 var numero1 = 2 ; var numero2 = 3 ; var resultado = numero1 + numero2 ; En javascript no es necesario declarar las variables con var , y en este caso lo que hace es crear una variable global a la que asigna el valor correspondiente. Por esta raz\u00f3n se recomienda declarar siempre las variables y llevar cuidado con esta caracter\u00edstica. El nombre de la variable solo puede estar formado por letas, n\u00fameros, el s\u00edmbolo de d\u00f3lar \"$\" y el gui\u00f3n bajo \"_\", adem\u00e1s la primera letra del nombre no puede ser un n\u00famero. A continuaci\u00f3n se incluyen algunos ejemplos de nombres v\u00e1lidos e incorrectos: 1 2 3 4 5 6 7 8 9 // Ejemplos correctos var $numero1 ; var _$letra ; var $$$otroNumero ; var $_a__$4 ; // Ejemplos incorrectos var 1n umero ; // Empieza por un n\u00famero var numero ; 1 _12 .3 ; // Contiene los car\u00e1cteres \";\" y \".\" Tipos de variables \u00b6 Dado que todas las variables se crean de la misma forma (mediante la palabra reservada var ), el tipo de la variable vendr\u00e1 definido seg\u00fan el valor que se le asigne o almacene en ella. A continuaci\u00f3n se detallan los diferentes tipos de variables posibles: Variables num\u00e9ricas \u00b6 Si a una variable se le asigna un entero o un valor decimal dicha variable se convertir\u00e1 a tipo num\u00e9rico, por ejemplo: 1 2 var num1 = 16 ; var num2 = 3.1415 ; Variables tipo cadenas de texto \u00b6 Se utilizan para almacenar caracteres, palabras y/o frases de texto. Para asignar el valor a la variable, se encierra el valor entre comillas dobles o simples, para delimitar su comienzo y su final, por ejemplo: 1 2 3 4 5 6 7 var mensaje = \"Bienvenido a nuestro sitio web\" ; var nombreProducto = 'Producto ABC' ; var letraSeleccionada = 'c' ; var texto1_1 = \"Una frase con 'comillas simples' dentro\" ; var texto1_2 = 'Una frase con \\'comillas simples\\' dentro' ; var texto2_1 = 'Una frase con \"comillas dobles\" dentro' ; var texto2_2 = \"Una frase con \\\"comillas dobles\\\" dentro\" ; Booleanos \u00b6 Una variable de tipo boolean almacena un tipo especial de valor que solamente puede tomar dos valores: true (verdadero) o false (falso). Por ejemplo: 1 2 var clienteRegistrado = false ; var ivaIncluido = true ; Arrays \u00b6 Para definir un array, se utilizan los caracteres [ y ] para delimitar su comienzo y su final y se utiliza el car\u00e1cter , (coma) para separar sus elementos: 1 var nombre_array = [ valor1 , valor2 , ..., valorN ]; Un nuevo array se puede declarar asignado valores iniciales (como en el ejemplo anterior), o vac\u00edo haciendo var array1 = new Array(); o tambi\u00e9n var array2 = []; y despu\u00e9s asignarle valores: 1 2 3 4 5 var array1 = new Array (); array1 [ 0 ] = \"hola\" ; array1 [ 1 ] = \"mundo\" ; var saludo = array1 [ 0 ]; // Obtener el valor de un elemento del array Las posiciones o \u00edndices del array empiezan en 0 y terminan en el tama\u00f1o del array menos uno. Tipo de una variable \u00b6 En JavaScript se puede comprobar el tipo de una variable mediante el operador typeof , por ejemplo: 1 2 3 4 typeof \"John\" // string typeof 3.14 // number typeof false // boolean typeof [ 1 , 2 , 3 , 4 ] // object JavaScript define los siguientes tipos primitivos de variables: undefined, null, boolean, number, string y object . Los dos primeros (equivalentes) se utilizan para identificar cuando se accede a una variable que est\u00e1 sin definir. Los tipos boolean, number y string ya los hemos visto en las secciones anteriores, pero hay que destacar que el tipo object se utiliza para definir tanto a los arrays como a los objectos (los cuales no se tratar\u00e1n en este manual de iniciaci\u00f3n).","title":"Variables"},{"location":"capitulo_javascript_variables.html#variables","text":"Las variables en JavaScript se crean mediante la palabra reservada var , que solamente es necesario utilizarla la primera vez (al declarar la variable), de la forma: 1 2 3 var numero1 = 2 ; var numero2 = 3 ; var resultado = numero1 + numero2 ; En javascript no es necesario declarar las variables con var , y en este caso lo que hace es crear una variable global a la que asigna el valor correspondiente. Por esta raz\u00f3n se recomienda declarar siempre las variables y llevar cuidado con esta caracter\u00edstica. El nombre de la variable solo puede estar formado por letas, n\u00fameros, el s\u00edmbolo de d\u00f3lar \"$\" y el gui\u00f3n bajo \"_\", adem\u00e1s la primera letra del nombre no puede ser un n\u00famero. A continuaci\u00f3n se incluyen algunos ejemplos de nombres v\u00e1lidos e incorrectos: 1 2 3 4 5 6 7 8 9 // Ejemplos correctos var $numero1 ; var _$letra ; var $$$otroNumero ; var $_a__$4 ; // Ejemplos incorrectos var 1n umero ; // Empieza por un n\u00famero var numero ; 1 _12 .3 ; // Contiene los car\u00e1cteres \";\" y \".\"","title":"Variables"},{"location":"capitulo_javascript_variables.html#tipos-de-variables","text":"Dado que todas las variables se crean de la misma forma (mediante la palabra reservada var ), el tipo de la variable vendr\u00e1 definido seg\u00fan el valor que se le asigne o almacene en ella. A continuaci\u00f3n se detallan los diferentes tipos de variables posibles:","title":"Tipos de variables"},{"location":"capitulo_javascript_variables.html#variables-numericas","text":"Si a una variable se le asigna un entero o un valor decimal dicha variable se convertir\u00e1 a tipo num\u00e9rico, por ejemplo: 1 2 var num1 = 16 ; var num2 = 3.1415 ;","title":"Variables num\u00e9ricas"},{"location":"capitulo_javascript_variables.html#variables-tipo-cadenas-de-texto","text":"Se utilizan para almacenar caracteres, palabras y/o frases de texto. Para asignar el valor a la variable, se encierra el valor entre comillas dobles o simples, para delimitar su comienzo y su final, por ejemplo: 1 2 3 4 5 6 7 var mensaje = \"Bienvenido a nuestro sitio web\" ; var nombreProducto = 'Producto ABC' ; var letraSeleccionada = 'c' ; var texto1_1 = \"Una frase con 'comillas simples' dentro\" ; var texto1_2 = 'Una frase con \\'comillas simples\\' dentro' ; var texto2_1 = 'Una frase con \"comillas dobles\" dentro' ; var texto2_2 = \"Una frase con \\\"comillas dobles\\\" dentro\" ;","title":"Variables tipo cadenas de texto"},{"location":"capitulo_javascript_variables.html#booleanos","text":"Una variable de tipo boolean almacena un tipo especial de valor que solamente puede tomar dos valores: true (verdadero) o false (falso). Por ejemplo: 1 2 var clienteRegistrado = false ; var ivaIncluido = true ;","title":"Booleanos"},{"location":"capitulo_javascript_variables.html#arrays","text":"Para definir un array, se utilizan los caracteres [ y ] para delimitar su comienzo y su final y se utiliza el car\u00e1cter , (coma) para separar sus elementos: 1 var nombre_array = [ valor1 , valor2 , ..., valorN ]; Un nuevo array se puede declarar asignado valores iniciales (como en el ejemplo anterior), o vac\u00edo haciendo var array1 = new Array(); o tambi\u00e9n var array2 = []; y despu\u00e9s asignarle valores: 1 2 3 4 5 var array1 = new Array (); array1 [ 0 ] = \"hola\" ; array1 [ 1 ] = \"mundo\" ; var saludo = array1 [ 0 ]; // Obtener el valor de un elemento del array Las posiciones o \u00edndices del array empiezan en 0 y terminan en el tama\u00f1o del array menos uno.","title":"Arrays"},{"location":"capitulo_javascript_variables.html#tipo-de-una-variable","text":"En JavaScript se puede comprobar el tipo de una variable mediante el operador typeof , por ejemplo: 1 2 3 4 typeof \"John\" // string typeof 3.14 // number typeof false // boolean typeof [ 1 , 2 , 3 , 4 ] // object JavaScript define los siguientes tipos primitivos de variables: undefined, null, boolean, number, string y object . Los dos primeros (equivalentes) se utilizan para identificar cuando se accede a una variable que est\u00e1 sin definir. Los tipos boolean, number y string ya los hemos visto en las secciones anteriores, pero hay que destacar que el tipo object se utiliza para definir tanto a los arrays como a los objectos (los cuales no se tratar\u00e1n en este manual de iniciaci\u00f3n).","title":"Tipo de una variable"},{"location":"capitulo_mas_informacion.html","text":"M\u00e1s informaci\u00f3n \u00b6 Para obtener una referencia mucho m\u00e1s completa sobre las hojas de estilo podemos consultar alguna de las siguientes Webs: Referencia detallada de todos los estilos: http://www.w3schools.com/cssref/default.asp Especificaciones: http://www.w3.org/Style/CSS/ Tutoriales: http://www.desarrolloweb.com/manuales/manual-css-hojas-de-estilo.html Sobre CSS3 podemos obtener m\u00e1s informaci\u00f3n en: http://www.w3schools.com/css3/default.asp http://www.w3.org/TR/2001/WD-css3-roadmap-20010523/ Adem\u00e1s, existen algunas p\u00e1ginas Web que proporcionan \"generadores de estilos CSS\" que nos pueden ayudar, como: http://css3generator.com/ http://www.colorzilla.com/gradient-editor/","title":"M\u00e1s informaci\u00f3n"},{"location":"capitulo_mas_informacion.html#mas-informacion","text":"Para obtener una referencia mucho m\u00e1s completa sobre las hojas de estilo podemos consultar alguna de las siguientes Webs: Referencia detallada de todos los estilos: http://www.w3schools.com/cssref/default.asp Especificaciones: http://www.w3.org/Style/CSS/ Tutoriales: http://www.desarrolloweb.com/manuales/manual-css-hojas-de-estilo.html Sobre CSS3 podemos obtener m\u00e1s informaci\u00f3n en: http://www.w3schools.com/css3/default.asp http://www.w3.org/TR/2001/WD-css3-roadmap-20010523/ Adem\u00e1s, existen algunas p\u00e1ginas Web que proporcionan \"generadores de estilos CSS\" que nos pueden ayudar, como: http://css3generator.com/ http://www.colorzilla.com/gradient-editor/","title":"M\u00e1s informaci\u00f3n"}]}